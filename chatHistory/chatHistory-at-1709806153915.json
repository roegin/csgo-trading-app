[{"type":"response","value":"<b>repoKing</b>：欢迎，<br>您可以尝试像我提出这样的问题：\n\t\t\t <ul>\n\t\t\t \t<li>更改您的突出显示的代码</li>\n\t\t\t\t<li>在文件/存储库的上下文中更改某些内容（请在底部点击正确的复选框）</li>\n\t\t\t\t<li>关于您的代码/文件/存储库的高层次问题（请在底部点击正确的复选框）</li>\n\t\t\t </ul>\n\t\t\t 尽量具体，提出不需要更改多个文件的请求。\n\n\t\t\t <br><br>\n\t\t\t 要开始：\n\t\t\t\n\t\t\t <br><br>\n\t\t\t 1. <b><a href=\"https://platform.openai.com/account/api-keys\">创建密钥</a></b>如果您还没有。并将其粘贴到扩展设置中（点击左侧的“扩展”标签 -> 右键点击RepoKing扩展 -> “扩展设置”）。您还可以在这里根据您的偏好更改默认设置。\n\n\t\t\t <br><br>\n\t\t\t 2. 当您要问新问题时，“清除对话”会有所帮助。您可以通过点击右下角的“垃圾桶”图标来开始新的RepoKing对话。\n\n\t\t\t <br><br>\n\t\t\t 3. API成本大约是：<a href=\"https://openai.com/pricing\">GPT3.5是$0.0015/1k个令牌，GPT4是$0.03/1k个令牌</a>。您可以偶尔在<b><a href=\"https://platform.openai.com/account/usage\">使用情况</a></b>处检查您的API令牌使用情况。如果您想减少令牌使用量，请取消选择“当前文件上下文”和/或“存储库上下文”。\n\t\t\t \n\t\t\t <br><br>\n\t\t\t 4. 在：<b><a href=\"https://www.google.com\">Beta List Form</a></b>上注册RepoKing更新\n\t\t\t \n\t\t\t <br><br>您实际上是用普通英语编写代码，所以不要把这看作是魔法。相反，您需要为正确的问题提供正确的上下文。我会尽力找到正确的信息并回答您的请求/问题。享受吧！\n\t\t\t"},{"type":"prompt","value":"<h4><b>you</b>:</h4>\n告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计","role":"user","text":"告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计","fullPrompt":"You are an AI programming assistant. \nYour responses should be concise, helpful, and logical and stay relevant to user's [prompt] and [code selected].\nIf the user asks for code or technical questions, you must provide code suggestions and adhere to technical information. Most likely, assume user wants code output in [language], unless the question is generic.\n\n请使用中文回答。\n\n\n[prompt]:告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计\n[language]:code-runner-output\n\n\n You can refer to this context for bigger picture. The [code selected] above is part of a repository. These are some relevant [snippets] from that repository:[```[snippet 1] (filepath: doc\\项目介绍.md):\n```\n// obsidian://open?vault=Phoenix0906_2024-02-26&file=%E8%AE%A4%E7%9F%A5%E7%AE%A1%E7%90%86%2Fmatrix%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\r\n\r\nrix项目介绍\r\n - 项目介绍\r\n - 这个项目是一个综合性的虚拟物品交易平台，专注于类似 CSGO 游戏内物品的买卖。它允许用户浏览、购买、出售游戏内的道具，如枪支和皮肤。此外，平台还引入了盲盒开箱功能，用户可以购买盲盒并打开以获得随机道具。其他关键功能包括充值提现系统和用户账户管理，确保交易的便捷性和安全性。前端采用 React 构建，后端使用 Node.js，数据库选择根据需求而定，整个平台设计注重用户体验和实时数据更新。\r\n - 我现在要替该平台加入盲盒开箱功能，告诉我步骤。\r\n - 要在该平台加入盲盒开箱功能，可以按以下步骤进行：\r\n 设计盲盒数据模型：\r\n 首先需要设计和确定盲盒的数据结构。例如，是否每个盲盒都有固定或随机的价值范围，包含哪些类型的物品等。\r\n 更新后端API：\r\n 增加一个新的数据库模型来存储盲盒信息。\r\n 创建相关的API接口，比如购买盲盒、打开盲盒等接口。\r\n 更新前端界面：\r\n 在现有的交易平台基础上，添加盲盒的购买和开箱界面，以及展示开箱结果的页面。\r\n 实现开箱逻辑：\r\n 根据设计的规则，实现随机选择盲盒内物品的逻辑。\r\n 测试：\r\n 完成以上步骤后，对新增功能进行充分测试，确保无误后发布。\n```;\n\n[snippet 2] (filepath: server\\routes\\userRoutes.js):\n```\nexpiresIn: 10000 }, (err, token) => {\r\n if (err) throw err;\r\n res.status(200).json({\r\n token,\r\n });\r\n });\r\n } catch (error) {\r\n res.status(500).json({\r\n msg: error.message\r\n })\r\n }\r\n});\r\n\r\n// server/routes/userRoutes.js 中获取用户所有物品详情的接口\r\nrouter.get('/:userId/items', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId;\r\n const user = await User.findById(userId)\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user.items);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: \"An error occurred while fetching user's items.\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.id);\r\n //req.logUser(user); // 使用中间件方法打印用户信息\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user);\r\n } catch (error) {\r\n res.status(500).json({ error: \"Failed to retrieve user\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/secure-api\", auth, async (req, res) => {\r\n try {\r\n res.json({\r\n msg :\n```;\n\n[snippet 3] (filepath: server\\test\\addTestItems.js):\n```\nconst axios = require('axios'); // 引入 axios\r\n\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000';\r\n\r\n// 随机生成物品名称和稀有度\r\nconst generateRandomItem = (index) => {\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const rarity = rarityTypes[Math.floor(Math.random() * rarityTypes.length)];\r\n const wear = wearTypes[Math.floor(Math.random() * wearTypes.length)];\r\n const knife = knifeTypes[Math.floor(Math.random() * knifeTypes.length)];\r\n const finish = finishTypes[Math.floor(Math.random() * finishTypes.length)];\r\n \r\n return { itemName: `物品${index}`, rarity, wear, knife, finish };\r\n };\r\n// 创建100个随机示例物品\r\nconst sampleItems = Array.from({ length: 100 }, (_, index) => generateRandomItem(index + 1));\r\n\r\nconst addItemsToDatabase = async () => {\r\n try {\r\n const response = await axios.post(`${SERVER_URL}/api/items/batchAdd`, sampleItems); // 修改请求的URL\n```;\n\n[snippet 4] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\n// 生成随机物品数据并添加到服务器的函数，返回新物品的ID\r\nasync function addNewItem() {\r\n // 随机生成物品数据，取自 [snippet 5]\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const itemData = {\r\n itemName: `${knifeTypes[Math.floor(Math.random() * knifeTypes.length)]} | ${finishTypes[Math.floor(Math.random() * finishTypes.length)]}`,\r\n rarity: rarityTypes[Math.floor(Math.random() * rarityTypes.length)],\r\n wear: wearTypes[Math.floor(Math.random() * wearTypes.length)],\r\n // 其他字段根据需要添加\r\n };\r\n \r\n // 调用添加物品的API\r\n const response = await axios.post(`${SERVER_URL}/api/items/add`, itemData);\r\n return response.data.item._id; // 假定响应体中返回了新创建的物品信息\r\n }\r\n\r\n // 为每个盲盒生成物品并构造盲盒数据的函数\r\nasync function generateBlindBoxData(index) {\r\n let itemIds = [];\r\n for (let i = 0; i < 3; i++) { // 假设每个盲盒包含3个物品\n```;\n\n[snippet 5] (filepath: client\\src\\components\\UserProfile.js):\n```\nsessionStorage.getItem('auth_token');\r\n\r\n const response = await axios.get(SERVER_URL+\"/users/profile/\" + getUserId(auth_token), {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n setUser(response.data);\r\n } catch (error) {\r\n console.error('获取用户信息报错',error.response);\r\n }\r\n };\r\n\r\n // 获取用户物品信息的函数\r\n // client/src/components/UserProfile.js 中获取用户物品信息的部分\r\n const getUserItems = async () => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n // 更新请求路径以匹配服务端路由\r\n const response = await axios.get(`${SERVER_URL}/users/${getUserId(auth_token)}/items`, {\r\n headers: { 'auth-token': auth_token },\r\n });\r\n\r\n if(response.status === 200) {\r\n setItems(response.data); // 假设 setUserItems 会更新状态以展示物品列表\r\n }\r\n } catch (error) {\r\n console.error('获取用户物品信息失败', error.response);\r\n }\r\n };\r\n\r\n useEffect(() => {\r\n\r\n getUser();\r\n getUserItems();\r\n }, []); // 添加 getUser 为依赖项\r\n\r\n return (\r\n <div>\r\n {user && (\r\n <div>\r\n <h1>用户名: {user.username}</h1>\r\n {/* 展示用户余额 */}\r\n <p>账户余额: {user.currency?.value || 0}</p>\r\n\r\n {/* 充值输入和按钮 */}\r\n <input type=\"number\"\n```;\n\n[snippet 6] (filepath: README.md):\n```\n# Counter-Strike Item Trading Application\r\n\r\n## Description\r\nA full-stack web application that enable traders to create new trade listings and make offers on existing trade listings.\r\nOffers a comprehensive set of features including posting trades, accepting/declining incoming offers, viewing prior trading history, \r\ncompleted trade activity, and item filters.\r\n\r\n## Technologies Used\r\n- React.js\r\n- Node.js\r\n- Express.js\r\n- MongoDB\r\n\r\n## Methodology\r\n\r\n## Demonstration\n```;\n\n[snippet 7] (filepath: server\\routes\\itemRoutes.js):\n```\n// server/routes/itemRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Item = require('../schemas/Item'); // 确保路径正确\r\n\r\n// 添加物品的API\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const { itemName, rarity, wear, knife, finish } = req.body;\r\n //console.log('测试-添加物品',req.body)\r\n const newItem = new Item({ itemName, rarity, wear, knife, finish });\r\n await newItem.save();\r\n res.json({ success: true, item: newItem });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加物品的路由\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const items = req.body; // 假设前端发送的是一个物品数组\r\n // 使用 mongoose 的 insertMany 方法批量插入数据\r\n await Item.insertMany(items);\r\n res.status(200).json({ success: true, message: \"批量添加成功\" });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 8] (filepath: server\\server.js):\n```\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst user = require(\"./routes/userRoutes\");\r\nconst trade = require(\"./routes/tradeRoutes\");\r\nconst offer = require(\"./routes/offerRoutes\");\r\nconst currency = require(\"./routes/currencyRoutes\"); // 新增\r\nconst boxRoutes = require('./routes/boxRoutes');\r\nconst itemRoutes = require('./routes/itemRoutes'); \r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\napp.use(cors())\r\n\r\n// const MONGOURI = \"mongodb://csgoAdmin:pswd123@localhost:27017/csgo_trading_app\";\r\nconst MONGOURI = \"mongodb+srv://roegin:tideland@alexmongodb.wfchfom.mongodb.net/buff\";//\"mongodb://db:27017/csgo_trading_app\";\r\n// 具体添加此处\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\napp.get('/headers', (req, res) => {\r\n res.send(req.headers);\r\n});\r\n*/\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: false}));\r\n\r\napp.use(\"/users\", user);\r\napp.use(\"/trades\", trade);\r\napp.use(\"/offers\", offer);\r\napp.use(\"/currency\", currency); // 新增\r\napp.use('/api/boxes', boxRoutes); // 使用/api作为基础路径\r\napp.use('/api/items',\n```;\n\n[snippet 9] (filepath: server\\test\\addBlindBoxesToServer.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\nconst { generateBlindBoxData } = require('./generateBlindBoxData');\r\n\r\n\r\n\r\n// 向服务器批量添加盲盒的函数\r\nasync function addBlindBoxesToServer() {\r\n let blindBoxes = [];\r\n for (let i = 0; i < 10; i++) {\r\n console.log('generateBlindBoxData');\r\n const blindBoxData = await generateBlindBoxData(i + 1); // 异步获取盲盒数据\r\n blindBoxes.push(blindBoxData);\r\n }\r\n \r\n try {\r\n console.log('url', `${SERVER_URL}/api/boxes/batchAdd`);\r\n const response = await axios.post(`${SERVER_URL}/api/boxes/batchAdd`, blindBoxes);\r\n console.log('批量添加盲盒成功', response.data);\r\n } catch (error) {\r\n console.error('批量添加盲盒失败:', error.message);\r\n }\r\n }\r\n\r\naddBlindBoxesToServer();\n```;\n\n[snippet 10] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nimport React, {useReducer} from 'react';\r\nimport AddItem from \"./itemList/AddItem\";\r\nimport ItemList from \"./itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport {toast} from 'react-toastify';\r\nimport '../../styles/components/Creation.css'\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function Creation() {\r\n // Initialize two separate states and dispatch functions for each list\r\n const [haveItems, dispatchHaveItems] = useReducer(itemsReducer, []);\r\n const [wantItems, dispatchWantItems] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postTrade = () => {\r\n const haveItemsFormatted =\n```;\n\n[snippet 11] (filepath: server\\test\\register.js):\n```\nconst axios = require('axios'); // 如果你在浏览器环境下，不需要这一行\r\n\r\nasync function registerUser(username, password) {\r\n try {\r\n const response = await axios.post(SERVER_URL+'/users/register', { // 修改为你自己的服务器地址\r\n username,\r\n password\r\n });\r\n\r\n console.log(response.data.msg); // \"User created successfully\"\r\n } catch (error) {\r\n console.error(`Error: ${error.response.data.msg}`); // \"User already exists\" 或其他错误信息\r\n }\r\n}\r\n\r\n\r\n// 使用你自己的用户名和密码调用这个函数\r\nregisterUser('wangbuai', '1234');\n```;\n\n[snippet 12] (filepath: server\\routes\\boxRoutes.js):\n```\nitems: { $each: selectedBox.items } } }, // 使用 $each 将数组中的每个元素都添加到用户的 items 字段\r\n { new: true }\r\n ).exec();\r\n\r\n // 响应成功信息，可以选择返回给客户端更多信息（例如盲盒中包含的具体物品）\r\n res.json({ success: true, message: \"盲盒开箱成功\", items: selectedBox.items });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 添加单个盲盒接口\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const blindBox = new BlindBox(req.body);\r\n await blindBox.save();\r\n res.status(201).json({ message: \"盲盒添加成功\", blindBox });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加盲盒接口\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const blindBoxes = req.body; // 预期是一个盲盒数组\r\n const result = await BlindBox.insertMany(blindBoxes);\r\n res.status(201).json({ message: \"批量添加盲盒成功\", result });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 13] (filepath: client\\src\\config.js):\n```\nlet SERVER_URL;\r\n\r\n\r\n\r\nif (process.env.BUff_ENV === 'development') {\r\n SERVER_URL = process.env.REACT_APP_DEV_SERVER_URL || \"http://localhost:4000\";\r\n console.log('SERVER_URL-development',SERVER_URL,process.env.REACT_APP_DEV_SERVER_URL,process.env.BUff_ENV)\r\n}else{\r\n SERVER_URL = process.env.REACT_APP_PROD_SERVER_URL || \"http://alex.shinestu.com:4000\";\r\n console.log('SERVER_URL-product',SERVER_URL,process.env.REACT_APP_PROD_SERVER_URL,process.env.BUff_ENV)\r\n}\r\n\r\nconsole.log('SERVER_URL',SERVER_URL,process.env.BUff_ENV)\r\n\r\nexport { SERVER_URL }; //一到两周上连,四月上旬能开出武器 //厚黑学 /资治通鉴\n```;\n\n[snippet 14] (filepath: server\\server.js):\n```\nitemRoutes);\r\n\r\nconst User = require(\"./schemas/User\");\r\nconst Trade = require(\"./schemas/Trade\");\r\nconst Offer = require(\"./schemas/Offer\");\r\nconst Item = require(\"./schemas/Item\");\r\nconst BlindBox = require(\"./schemas/BlindBox\");\r\n\r\n\r\nconst PORT = 4000;\r\n\r\nmongoose.connect(MONGOURI)\r\n .then(() => {\r\n console.log(\"Connected to MDB\");\r\n app.listen(PORT, () => {\r\n console.log(`Node is running on port ${PORT}`);\r\n });\r\n })\r\n .catch((error) => {\r\n console.log(error);\r\n });\r\n\r\n\r\nconsole.log('服务器启动 3.')\n```;\n\n[snippet 15] (filepath: client\\src\\pages\\Offers.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {IncomingOffers, OutgoingOffers} from \"../components/offers/Offer\";\r\nimport {getUserId, currentTime} from \"../utilities/Utilities\";\r\nimport '../styles/pages/Offers.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Offers() {\r\n const [offerData, setOfferData] = useState({\r\n tradeOffers: [],\r\n associatedTrades: [],\r\n });\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n useEffect(() => {\r\n\r\n if (!auth_token) {\r\n return;\r\n }\r\n\r\n fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`)\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the new data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => console.error('Error fetching data:', error));\r\n });\r\n\r\n // Function to update the offer status and fetch updated data\r\n const handleDeclineOffer = (offerId) => {\r\n // Make a network request to update the offer status in the database\r\n fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 16] (filepath: server\\routes\\boxRoutes.js):\n```\n// server/routes/boxRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst authMiddleware = require('../middleware/auth'); // 调整路径以匹配你的项目结构\r\nconst BlindBox = require('../schemas/BlindBox');\r\nconst User = require('../schemas/User'); // 调整路径以匹配你的项目结构\r\nconst Item = require(\"../schemas/Item\");\r\n\r\n// server/routes/boxRoutes.js\r\nrouter.post('/openbox',authMiddleware, async (req, res) => {\r\n try {\r\n // 假设所有盲盒都有统一格式存储在BlindBox模型中\r\n const blindBoxes = await BlindBox.find({});\r\n const randomIndex = Math.floor(Math.random() * blindBoxes.length);\r\n const selectedBox = blindBoxes[randomIndex];\r\n\r\n // 从选中的盲盒中随机抽取一个物品\r\n const items = selectedBox.items; // 假设items是存储item ObjectId的数组\r\n const selectedItemIndex = Math.floor(Math.random() * items.length);\r\n // server/routes/boxRoutes.js 中 openbox 接口的修改\r\n const selectedItem = await Item.findById(items[selectedItemIndex]).exec(); // 确保 Item 已经导入\r\n\r\n //console.log('req.user',req.user)\r\n const userId = req.user.id; // 或其他方式获取当前用户ID\r\n\r\n // 更新用户物品列表，将盲盒中的所有物品添加至用户\r\n await User.findByIdAndUpdate(\r\n userId, \r\n { $push: {\n```;\n\n[snippet 17] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nimport React, {useReducer, useState} from 'react';\r\nimport AddItem from \"../create/itemList/AddItem\";\r\nimport ItemList from \"../create/itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/MakeOfferForm.css'\r\nimport {toast} from 'react-toastify';\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function MakeOfferForm({tradeData}) {\r\n const [forItems, setForItems] = useState(tradeData.have);\r\n const [forItemsExc, setForItemsExc] = useState([]);\r\n const [haveItems, dispatch] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postOffer = () => {\r\n const\n```;\n\n[snippet 18] (filepath: server\\routes\\userRoutes.js):\n```\nconst express = require(\"express\");\r\nconst auth = require(\"../middleware/auth\");\r\nconst User = require(\"../schemas/User\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cors = require('cors');\r\nconst Currency = require(\"../schemas/Currency\");\r\nconst router = express.Router();\r\nrouter.use(cors());\r\n\r\nfunction logUserMiddleware(req, res, next) {\r\n req.logUser = function(user) {\r\n console.log('测试-user', user);\r\n }\r\n next();\r\n }\r\n\r\n router.use(logUserMiddleware);\r\n\r\n router.post('/recharge/:userId', auth, async (req, res) => {\r\n const userId = req.params.userId;\r\n const { rechargeValue } = req.body;\r\n //let rechargeValueNum = parseFloat(rechargeValue);\r\n \r\n // 这里应该根据你的需求来设置过滤条件\r\n if (true) {\r\n try {\r\n let user = await User.findById(userId).populate('currency');\r\n \r\n // 检查用户是否已有对应的 Currency 文档\r\n if (!user.currency) {\r\n // 如果没有，创建一个新的 Currency 文档并保存\r\n const newCurrency = new Currency({ value: 0, name: 'usd' });\r\n await newCurrency.save();\r\n \r\n // 将新创建的 Currency 文档的 _id 赋值给 user 的 currency 字段\r\n user.currency = newCurrency._id;\r\n\r\n // Save the user document back to the\n```;\n\n[snippet 19] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nhaveItems.map(({id, ...rest}) => rest);\r\n const wantItemsFormatted = wantItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/trades/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n userId: getUserId(auth_token),\r\n have: haveItemsFormatted,\r\n want: wantItemsFormatted\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearItemLists();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n function handleAddItemToList(itemObject, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const dispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItemFromList(itemId, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const\n```;\n\n[snippet 20] (filepath: server\\routes\\userRoutes.js):\n```\ndatabase\r\n await user.save();\r\n }else {\r\n // 获取Currency对象，更新它，然后保存\r\n let currency = await Currency.findById(user.currency._id);\r\n // Parse currency value and recharge value into floats before adding\r\n currency.value = parseFloat(currency.value) + parseFloat(rechargeValue);\r\n await currency.save();\r\n \r\n // 更新用户文档中的currency字段\r\n user = await User.findByIdAndUpdate(userId, {currency: currency._id}, {new:true}).populate('currency');\r\n }\r\n \r\n \r\n res.json({ message: 'Recharge successful', value: user.currency.value });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while recharging.' });\r\n }\r\n } else {\r\n res.status(403).json({ error: 'User is not allowed to recharge.' });\r\n }\r\n });\r\n\r\n router.get('/profile/:userId', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId; // 从URL获取用户ID\r\n console.log('/profile请求-userId',userId)\r\n\r\n const user = await User.findById(userId)\r\n .populate('currency') // 已存在的填充，用于获取货币详情\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n\r\n res.json(user);\r\n } catch (error)\n```;\n\n[snippet 21] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nhaveItemsFormatted = haveItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/offers/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n tradeId: tradeData._id,\r\n userId: getUserId(auth_token),\r\n offered: haveItemsFormatted,\r\n for: forItems\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearOffer();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n })\r\n }\r\n\r\n function clearOffer() {\r\n dispatch({\r\n type: 'cleared'\r\n });\r\n\r\n setForItems(tradeData.have);\r\n setForItemsExc([]);\r\n }\r\n\r\n function handleAddItemToList(itemObject) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItem(itemId) {\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\n```;\n\n[snippet 22] (filepath: server\\test\\addTestItems.js):\n```\nconsole.log('批量添加成功:', response.data);\r\n } catch (error) {\r\n if (error.response) {\r\n // 请求已发出，服务器响应状态码不在 2xx 范围内\r\n console.error('添加失败:', error.response.data);\r\n } else if (error.request) {\r\n // 请求已发出但未收到响应\r\n console.error('服务器未响应:', error.request);\r\n } else {\r\n // 发送请求时出现了某些问题\r\n console.error('请求错误:', error.message);\r\n }\r\n }\r\n};\r\n\r\naddItemsToDatabase();\r\n\r\n// Note: 这个脚本应该在 Node.js 环境中运行。确保你的环境中已经安装了 axios。\n```;\n\n[snippet 23] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\ndispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n function clearItemLists() {\r\n dispatchHaveItems({\r\n type: 'cleared'\r\n });\r\n\r\n dispatchWantItems({\r\n type: 'cleared'\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\r\n e.preventDefault();\r\n\r\n if (auth_token) {\r\n postTrade();\r\n\r\n toast.success('Trade created!');\r\n } else {\r\n toast.error('Please log in to create a trade.');\r\n };\r\n };\r\n\r\n return (\r\n <div className=\"creation-container\">\r\n <form onSubmit={handleSubmit}>\r\n <h2>Create Trade Offer</h2>\r\n <fieldset>\r\n <legend><b>Have</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'haveItems')}/>\r\n <div className=\"have-header\"><i>You have ...</i></div>\r\n <ItemList items={haveItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'haveItems')}/>\r\n </fieldset>\r\n\r\n <div className=\"swap\">&#8645;</div>\r\n\r\n <fieldset>\r\n <legend><b>Want</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'wantItems')}/>\r\n <div className=\"want-header\"><i>You want\n```;\n\n[snippet 24] (filepath: client\\src\\components\\UserProfile.js):\n```\nvalue={rechargeAmount} onChange={(e) => setRechargeAmount(e.target.value)} />\r\n <button onClick={() => recharge(rechargeAmount)}>充值</button>\r\n </div>\r\n )}\r\n <h2>我的物品列表</h2>\r\n <ul>\r\n {items.map((item, index) => (\r\n <li key={index}>{item.itemName} - {item.description}</li> // 使用 itemName 和 description 替代 itemId\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n};\r\n\r\nexport default UserProfile;\n```;\n\n[snippet 25] (filepath: client\\src\\pages\\Index.jsx):\n```\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport Filter from \"../components/index/Filter\";\r\nimport Trades from \"../components/index/Trades\";\r\nimport Activity from \"../components/index/Activity\";\r\nimport '../styles/pages/Index.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Index() {\r\n const [data, setData] = useState([]);\r\n const [filteredData, setFilteredData] = useState([]);\r\n const [offerData, setOfferData] = useState([]);\r\n const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\r\n const hasRendered = useRef(false);\r\n const hasRenderedOffers = useRef(false);\r\n\r\n useEffect(() => {\r\n let events = null;\r\n\r\n if (!hasRendered.current) {\r\n events = new EventSource(SERVER_URL+'/trades/all');\r\n\r\n events.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setData(parsedData);\r\n };\r\n\r\n hasRendered.current = true;\r\n }\r\n\r\n return () => {\r\n if (events) {\r\n events.close();\r\n hasRendered.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n let offerEvents = null;\r\n\r\n if\n```;\n\n[snippet 26] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport MakeOfferForm from '../components/makeoffer/MakeOfferForm';\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function MakeOffer() {\r\n const {_id} = useParams();\r\n const [tradeData, setTradeData] = useState({});\r\n const [loading, setLoading] = useState(true);\r\n const [error, setError] = useState(null);\r\n\r\n useEffect(() => {\r\n fetch(SERVER_URL+`/trades/${_id}`)\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Network response was not ok');\r\n }\r\n return response.json();\r\n })\r\n .then((tradeDataArray) => {\r\n if (Array.isArray(tradeDataArray) && tradeDataArray.length > 0) {\r\n setTradeData(tradeDataArray[0]);\r\n setLoading(false);\r\n } else {\r\n setError(new Error('Invalid data format.'));\r\n setLoading(false);\r\n }\r\n })\r\n .catch((error) => {\r\n setError(error);\r\n setLoading(false);\r\n });\r\n }, [_id]);\r\n\r\n return (\r\n <div>\r\n {loading ? (\n```;\n\n[snippet 27] (filepath: server\\routes\\offerRoutes.js):\n```\n(error) {\r\n console.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nfunction sendEventsToAll(newOffer) {\r\n offerClients.forEach(offerClient => offerClient.response.write(`data: ${JSON.stringify(newOffer)}\\n\\n`))\r\n}\r\n\r\nrouter.get('/:userId', async(req, res) => {\r\n const userId = req.params.userId;\r\n\r\n try {\r\n const trades = await Trade.find({ userId: userId });\r\n const tradeOffers = [];\r\n const associatedTrades = [];\r\n\r\n for (const trade of trades) {\r\n const offers = await Offer.find({ _id: { $in: trade.offers } });\r\n tradeOffers.push({ trade, offers });\r\n }\r\n\r\n const offers = await Offer.find({ userId: userId });\r\n for (const offer of offers) {\r\n const trade = await Trade.findOne({ _id: offer.tradeId });\r\n associatedTrades.push({ offer, trade });\r\n }\r\n\r\n const combinedData = {\r\n tradeOffers: tradeOffers,\r\n associatedTrades: associatedTrades,\r\n };\r\n\r\n res.json(combinedData);\r\n\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post('/new', auth, async(req, res) => {\r\n const newOffer = req.body;\r\n\r\n try {\r\n const\n```;\n\n[snippet 28] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst itemId = await addNewItem(); // 创建物品并获取ID\r\n itemIds.push(itemId);\r\n }\r\n \r\n return {\r\n //id: index,\r\n items: itemIds, // 盲盒包含的物品ID数组\r\n // 可以添加更多盲盒属性\r\n };\r\n }\r\n\r\n module.exports = { generateBlindBoxData };\n```;\n\n[snippet 29] (filepath: server\\routes\\tradeRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require(\"../schemas/Trade\");\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nlet clients = [];\r\n\r\nrouter.get('/status', (request, response) => response.json({ clients: clients.length }));\r\n\r\nrouter.get('/all', eventsHandler);\r\n\r\nasync function eventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const tradeData = await Trade.find({}).lean().exec();\r\n\r\n const tradeEventData = `data: ${JSON.stringify(tradeData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(tradeEventData);\r\n\r\n const clientId = Date.now();\r\n\r\n const newClient = {\r\n id: clientId,\r\n response\r\n };\r\n\r\n clients.push(newClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${clientId} Connection closed`);\r\n clients = clients.filter(client => client.id !== clientId);\r\n });\r\n } catch (error) {\n```;\n\n[snippet 30] (filepath: server\\routes\\offerRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require('../schemas/Trade');\r\nconst Offer = require('../schemas/Offer');\r\nconst User = require(\"../schemas/User\");\r\n\r\nconst router = express.Router();\r\n\r\nlet offerClients = [];\r\n\r\nrouter.get('/all', offerEventsHandler);\r\n\r\nasync function offerEventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const offerData = await Offer.find({}).lean().exec();\r\n\r\n const offerEventData = `data: ${JSON.stringify(offerData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(offerEventData);\r\n\r\n const offerClientId = Date.now();\r\n\r\n const newOfferClient = {\r\n id: offerClientId,\r\n response\r\n };\r\n\r\n offerClients.push(newOfferClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${offerClientId} Connection closed`);\r\n offerClients = offerClients.filter(offerClient => offerClient.id !== offerClientId);\r\n });\r\n } catch\n```;\n\n[snippet 31] (filepath: server\\test\\testCors.js):\n```\nconst axios = require('axios');\r\n\r\n// Please replace with your SERVER_URL\r\nconst SERVER_URL = \"http://alex.shinestu.com:4000\";\r\n\r\naxios.get(SERVER_URL + '/headers')\r\n .then(response => {\r\n console.log(\"Headers:\", response.data);\r\n })\r\n .catch(error => {\r\n console.error(\"Error:\", error);\r\n });\n```;\n\n[snippet 32] (filepath: client\\src\\components\\UserProfile.js):\n```\n// client\\src\\components\\UserProfile.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {getUserId} from \"../utilities/Utilities\";\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst UserProfile = () => {\r\n const [user, setUser] = useState(null);\r\n const [items, setItems] = useState([]);\r\n\r\n \r\n\r\n // Define rechargeAmount and setRechargeAmount\r\n const [rechargeAmount, setRechargeAmount] = useState(0)\r\n const recharge = async (amount) => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n const response = await axios.post(SERVER_URL+\"/users/recharge/\" + getUserId(auth_token), { rechargeValue: amount }, {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n if(response.data.message === 'Recharge successful') {\r\n console.log('测试-充值成功')\r\n setUser(prevUser => ({...prevUser, currency: { value: response.data.value }}));\r\n getUser();\r\n }\r\n } catch (error) {\r\n console.error('充值失败',error.response);\r\n }\r\n };\r\n\r\n // Get user info\r\n const getUser = async () => {\r\n try {\r\n const auth_token =\n```;\n\n[snippet 33] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ne.preventDefault();\r\n\r\n if (auth_token) {\r\n postOffer();\r\n\r\n toast.success('Offer sent!');\r\n } else {\r\n toast.error('Please log in to make offer.');\r\n }\r\n }\r\n\r\n function handleAddBtn(itemId) {\r\n const includedItem = forItemsExc.find(item => item._id === itemId);\r\n setForItems([...forItems, includedItem]);\r\n\r\n const newForExcArray = forItemsExc.filter(item => item._id !== itemId);\r\n setForItemsExc(newForExcArray);\r\n }\r\n\r\n function handleDeleteBtn(itemId) {\r\n const excludedItem = forItems.find(item => item._id === itemId);\r\n setForItemsExc([...forItemsExc, excludedItem]);\r\n\r\n const newForArray = forItems.filter(item => item._id !== itemId);\r\n setForItems(newForArray);\r\n }\r\n\r\n return (\r\n <div>\r\n <div className=\"trade-offer-container\">\r\n <h2>[H]ave: </h2>\r\n <ul>\r\n {tradeData.have.map((item, index) => (\r\n <li key={index}>\r\n {`${item.knife} | ${item.finish} (${item.wear})`}\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <h2>[W]ant: </h2>\r\n <ul>\r\n {tradeData.want.map((item, index) => (\r\n <li key={index}>\r\n {item.knife} | {item.finish} ({item.wear})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div\n```;\n\n[snippet 34] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"accepted\",\r\n acceptedAt: currentTime()\r\n })\r\n });\r\n\r\n if (!offerResponse.ok) {\r\n throw new Error('Offer update request failed.');\r\n }\r\n\r\n // Fetch updated offer data and set it in your state\r\n const newDataResponse = await fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n if (!newDataResponse.ok) {\r\n throw new Error('Fetching updated offer data failed.');\r\n }\r\n\r\n const newData = await newDataResponse.json();\r\n setOfferData(newData);\r\n } catch (error) {\r\n console.error(\"Error: \", error);\r\n }\r\n };\r\n\r\n return (\r\n <div className=\"offer-grid-container\">\r\n <div className=\"incoming-tab\">\r\n <IncomingOffers data={offerData.tradeOffers} onDeclineOffer={handleDeclineOffer}\r\n onAcceptOffer={handleAcceptOffer}/>\r\n </div>\r\n <div className=\"outgoing-tab\">\r\n <OutgoingOffers data={offerData.associatedTrades}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 35] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nrouter.get('/:_id', async(req, res) => {\r\n const id = req.params._id;\r\n\r\n try {\r\n const trade = await Trade.find({_id: id});\r\n res.json(trade);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.'})\r\n }\r\n});\r\n\r\nfunction sendEventsToAll(newData) {\r\n clients.forEach(client => client.response.write(`data: ${JSON.stringify(newData)}\\n\\n`))\r\n}\r\n\r\nrouter.post('/new', auth, addTrade);\r\n\r\nasync function addTrade(request, response, next) {\r\n const newTrade = request.body;\r\n\r\n try {\r\n const tradeDocument = new Trade(newTrade);\r\n const savedTrade = await tradeDocument.save();\r\n\r\n const tradeId = savedTrade._id;\r\n\r\n const userId = newTrade.userId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdTrades: tradeId } });\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n response.json(savedTrade);\r\n } catch (error) {\n```;\n\n[snippet 36] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"declined\"\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n // After successfully updating the status, fetch the updated data\r\n return fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n })\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the updated data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n const handleAcceptOffer = async (tradeId, offerId) => {\r\n try {\r\n const tradeResponse = await fetch(SERVER_URL+`/trades/update/${tradeId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n acceptedOffer: offerId,\r\n tradeStatus: \"inactive\"\r\n })\r\n });\r\n\r\n if (!tradeResponse.ok) {\r\n throw new Error('Trade update request failed.');\r\n }\r\n\r\n const offerResponse = await fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 37] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\nimport React, {useState,useContext} from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\nimport { Navigate } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nexport default function BlindBox() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n const [isLoading, setIsLoading] = useState(false);\r\n // client/src/pages/BlindBox.jsx\r\n const [openedItem, setOpenedItem] = useState(null);\r\n \r\n const openBox = async () => {\r\n setIsLoading(true);\r\n try {\r\n const response = await fetch(`${SERVER_URL}/api/boxes/openbox`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': sessionStorage.getItem('auth_token'),\r\n },\r\n });\r\n const data = await response.json();\r\n if (response.ok) {\r\n setOpenedItem(data.item); // 保存开出的物品信息\r\n toast.success(`恭喜你获得了：${data.item.itemName}`);\r\n } else {\r\n toast.error(data.message);\r\n }\r\n } catch (error) {\r\n console.error(error);\r\n toast.error('网络错误，请稍后再试');\r\n } finally {\r\n setIsLoading(false);\r\n }\r\n };\r\n // 如果用户未登录，则重定向到登录页面\r\n if\n```;\n\n[snippet 38] (filepath: server\\routes\\userRoutes.js):\n```\n'Secure Api Tested'\r\n });\r\n } catch (e) {\r\n res.send({ msg: \"Error in Fetching user\" });\r\n }\r\n});\r\n\r\nconsole.log('/profile请求路由设置')\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 39] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nclassName=\"down-arrow\">&darr;</div>\r\n\r\n <div className=\"your-offer-container\">\r\n <form onSubmit={handleSubmit}>\r\n\r\n <h2>Your offer: </h2>\r\n <fieldset>\r\n <legend><b>Offer</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item)}/>\r\n\r\n <div className=\"have-header\"><i>You are offering ...</i></div>\r\n\r\n <ItemList items={haveItems} onDeleteItem={(itemId) => handleDeleteItem(itemId)}/>\r\n\r\n </fieldset>\r\n <div className=\"offer-for-items\">\r\n <h2>For:</h2>\r\n <ul>\r\n {forItems.length > 0 ? (\r\n forItems.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} ({item.wear})\r\n {forItems.length > 1 ? (\r\n <button className=\"delete-btn\"\r\n onClick={() => handleDeleteBtn(item._id)}> - </button>\r\n ) : null}\r\n </li>\r\n ))\r\n ) : null}\r\n </ul>\r\n </div>\r\n\r\n {forItemsExc.length > 0 ? (\r\n <div classname=\"offer-exc-items\">\r\n <h2>Excluded:</h2>\r\n <ul>\r\n {forItemsExc.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} {item.wear}\r\n <button className=\"add-btn\" onClick={() => handleAddBtn(item._id)}> +</button>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n ) : null}\r\n\r\n <button\n```;\n\n[snippet 40] (filepath: client\\src\\App.js):\n```\nelement={<Login/>}/>\r\n <Route path='/register' element={<Register/>}/> {/* 新增 */}\r\n <Route path='offers/:_id' element={<MakeOffer/>}/>\r\n <Route path='/profile' element={<UserProfile/>}/> {/* Add this line */}\r\n <Route\r\n path=\"/blindbox\"\r\n element= {<BlindBox />} />\r\n \r\n </Routes>\r\n </AuthProvider>\r\n </Router>\r\n \r\n );\r\n}\n```;\n\n[snippet 41] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n'application/json'\r\n }\r\n });\r\n \r\n if (response.status !== 200) {\r\n error.innerHTML = response.data.msg;\r\n } else {\r\n sessionStorage.setItem('auth_token', response.data.token);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n authContext.login();\r\n console.log('测试-authContext',authContext)\r\n redirect(response.data.token);\r\n }\r\n } catch (err) {\r\n if (err.response) {\r\n // 当响应状态码超出2xx范围时执行\r\n console.log(err.response.data);\r\n error.innerHTML = err.response.data.msg;\r\n } else if (err.request) {\r\n // 请求已发出但未收到响应时执行\r\n console.log(err.request);\r\n } else {\r\n // 在设置请求时触发了某些问题时执行\r\n console.log('Error', err.message);\r\n }\r\n }\r\n };\r\n\r\n const navigate = useNavigate();\r\n\r\n async function redirect(token) {\r\n const decoded = jwtDecode(token);\r\n const userId = decoded.user.id;\r\n\r\n const userResponse = await fetch(`${SERVER_URL}/users/${userId}`, {\r\n method: 'GET',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n }\r\n });\r\n\r\n if (userResponse.status === 200) {\r\n navigate('/');\r\n } else {\r\n console.log('Error retrieving data.')\r\n }\r\n }\r\n\r\n return (\r\n <div className=\"login-form-container\">\n```;\n\n[snippet 42] (filepath: client\\src\\objects\\commonObjects.js):\n```\nexport const itemsData = {\r\n wears: ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'],\r\n knives: [\r\n 'Bayonet', 'Bowie Knife', 'Butterfly Knife', 'Classic Knife',\r\n 'Falchion Knife', 'Flip Knife', 'Gut Knife', 'Huntsman Knife',\r\n 'Karambit', 'M9 Bayonet', 'Navaja Knife', 'Nomad Knife',\r\n 'Paracord Knife', 'Shadow Daggers', 'Skeleton Knife',\r\n 'Stiletto Knife', 'Survival Knife', 'Talon Knife', 'Ursus Knife'\r\n ],\r\n finishes: [\r\n \"Vanilla\", \"Safari Mesh\", \"Urban Masked\", \"Scorched\", \"Boreal Forest\", \"Stained\",\r\n \"Blue Steel\", \"Night\", \"Forest DDPAT\", \"Crimson Web\", \"Slaughter\", \"Fade\", \"Rust Coat\",\r\n \"Ultraviolet\", \"Damascus Steel\", \"Tiger Tooth\", \"Doppler (Phase 1)\", \"Doppler (Phase 2)\",\r\n \"Doppler (Phase 3)\", \"Doppler (Phase 4)\", \"Doppler (Ruby)\", \"Doppler (Sapphire)\",\r\n \"Doppler (Black Pearl)\", \"Marble Fade\", \"Freehand\", \"Bright Water\", \"Black Laminate\",\r\n \"Autotronic\", \"Lore\", \"Gamma Doppler (Phase 1)\", \"Gamma Doppler (Phase 2)\",\r\n \"Gamma Doppler (Phase 3)\", \"Gamma Doppler (Phase 4)\", \"Gamma Doppler (Emerald)\",\r\n \"Case Hardened\"\r\n ]\r\n};\r\n\r\nexport const wearDictionary = {\r\n 'Factory\n```;\n\n[snippet 43] (filepath: server\\schemas\\Item.js):\n```\n// server/schemas/Item.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst ItemSchema = new mongoose.Schema({\r\n itemName: String,\r\n rarity: String,\r\n // 新增或确认其他相关字段\r\n wear: String,\r\n knife: String,\r\n finish: String,\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Item\", ItemSchema);\n```;\n\n[snippet 44] (filepath: client\\src\\context\\AuthContext.js):\n```\n// client\\src\\context\\AuthContext.js\r\nimport { createContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthContext = createContext({\r\n isAuthenticated: false, // 提供一个初始值\r\n login: () => {},\r\n logout: () => {},\r\n registerUser: () => Promise.resolve(),\r\n});\r\n\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{ registerUser }}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default AuthContext;\n```;\n\n[snippet 45] (filepath: client\\src\\context\\AuthProvider.js):\n```\n// client\\src\\context\\AuthProvider.js\r\nimport React, { useState } from 'react';\r\nimport AuthContext from \"./AuthContext\";\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthProvider = ({children}) => {\r\n const [isAuthenticated, setIsAuthenticated] = useState(\r\n sessionStorage.getItem('isAuthenticated') === 'true'\r\n );\r\n\r\n const login = () => {\r\n setIsAuthenticated(true);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n };\r\n\r\n const logout = () => {\r\n setIsAuthenticated(false);\r\n sessionStorage.setItem('isAuthenticated', 'false');\r\n // 清除其他相关sessionStorage项，比如auth-token等\r\n sessionStorage.removeItem('auth_token');\r\n };\r\n\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n return res\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{isAuthenticated, login, logout, registerUser}}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default\n```;\n\n[snippet 46] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"outgoing-component\">\r\n <h2>Outgoing Offers &uarr;</h2>\r\n\r\n {data.map((entry) => (\r\n <div key={entry.offer._id} className=\"outgoing-item\">\r\n <div className=\"offered\">\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>You Offered:</b></span>\r\n <span className=\"status\"><b>status:</b> <i>{entry.offer.status}</i></span>\r\n </div>\r\n <ul>\r\n {entry.offer.offered.map((offerItem) => (\r\n <li key={offerItem._id}>{`${offerItem.knife} ${offerItem.finish} (${convertWear(offerItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>For:</b></span>\r\n </div>\r\n\r\n <ul>\r\n {entry.offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n <ul>\r\n {entry.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <span\n```;\n\n[snippet 47] (filepath: server\\schemas\\User.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst UserSchema = mongoose.Schema({\r\n username: {\r\n type: String,\r\n required: true\r\n },\r\n password: {\r\n type: String,\r\n required: true\r\n },\r\n createdTrades: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n }],\r\n createdOffers: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }],\r\n // 新增\r\n currency: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Currency\"\r\n },\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n\r\n});\r\n\r\nmodule.exports = mongoose.model(\"User\", UserSchema);\n```;\n\n[snippet 48] (filepath: client\\src\\objects\\commonObjects.js):\n```\nNew': 'FN',\r\n 'Minimal Wear': 'MW',\r\n 'Field-Tested': 'FT',\r\n 'Well-Worn': 'WW',\r\n 'Battle-Scarred': 'BS'\r\n};\n```;\n\n[snippet 49] (filepath: client\\src\\pages\\Index.jsx):\n```\n(!hasRenderedOffers.current) {\r\n offerEvents = new EventSource(SERVER_URL+'/offers/all');\r\n\r\n offerEvents.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setOfferData((offerData) => offerData.concat(parsedData));\r\n };\r\n\r\n hasRenderedOffers.current = true;\r\n }\r\n\r\n return () => {\r\n if (offerEvents) {\r\n offerEvents.close();\r\n hasRenderedOffers.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n if (selectedCheckboxes.length === 0) {\r\n setFilteredData(data);\r\n return;\r\n }\r\n\r\n const filteredItems = data.filter((trade) => {\r\n const haveItems = trade.have;\r\n const wantItems = trade.want;\r\n\r\n return (\r\n haveItems.some((haveItem) => selectedCheckboxes.includes(haveItem.knife)) ||\r\n wantItems.some((wantItem) => selectedCheckboxes.includes(wantItem.knife))\r\n );\r\n });\r\n\r\n setFilteredData(filteredItems);\r\n }, [selectedCheckboxes, data]);\r\n\r\n const handleCheckboxChange = (selectedItems) => {\r\n setSelectedCheckboxes(selectedItems);\r\n };\r\n\r\n return (\r\n <div className=\"grid-container\">\r\n <div className=\"left-sidebar\">\r\n <Filter\n```;\n\n[snippet 50] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error('Error saving trade to MongoDB:', error);\r\n response.status(500).end('Internal Server Error');\r\n }\r\n}\r\n\r\nrouter.post('/update/:_id', auth, updateTrade);\r\n\r\nasync function updateTrade(request, response, next) {\r\n const tradeId = request.params._id;\r\n const tradeUpdate = request.body;\r\n\r\n try {\r\n const offerId = tradeUpdate.acceptedOffer;\r\n const newTradeStatus = tradeUpdate.tradeStatus;\r\n\r\n const updatedTrade = await Trade.findByIdAndUpdate(tradeId, { acceptedOffer: offerId, status: newTradeStatus }, { new: true });\r\n\r\n if (!updatedTrade) {\r\n return response.status(404).json({ message: 'Trade or Offer not found.' });\r\n }\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n return response.status(200).json({ message: 'Trade and Offer updated successfully', updatedTrade });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 51] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\n<p>Loading...</p>\r\n ) : error ? (\r\n <p>Error: {error.message}</p>\r\n ) : (\r\n <div className=\"offer-tab\">\r\n <MakeOfferForm tradeData={tradeData}/>\r\n </div>\r\n )}\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border:\"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 52] (filepath: client\\src\\App.js):\n```\n// client\\src\\App.js\r\nimport {BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport React, { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext';\r\nimport Navbar from './components/Navbar';\r\nimport Index from './pages/Index';\r\nimport Offers from \"./pages/Offers\";\r\nimport Create from \"./pages/Create\";\r\nimport Login from \"./pages/Login\";\r\nimport Register from \"./components/Register\";\r\nimport MakeOffer from \"./pages/MakeOffer\";\r\nimport AuthProvider from \"./context/AuthProvider\";\r\nimport UserProfile from \"./components/UserProfile\"; // Import the new component\r\n\r\nimport BlindBox from \"./pages/BlindBox\"; // 引入盲盒组件\r\n\r\nimport { withAuth } from './AuthGuard';\r\n\r\nexport default function App() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n console.log('isAuthenticated',isAuthenticated)\r\n return (\r\n\r\n <Router>\r\n <AuthProvider>\r\n <Navbar/>\r\n <Routes>\r\n <Route path='/' exact element={<Index/>}/>\r\n <Route path='/offers' element={<Offers/>}/>\r\n <Route path='/create' element={<Create/>}/>\r\n <Route path='/login'\n```;\n\n[snippet 53] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\nimport React, {useEffect, useContext} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport AuthContext from \"../../context/AuthContext\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport '../../styles/components/LoginForm.css'\r\nimport axios from 'axios'; // 确保已经引入axios\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function LoginForm() {\r\n const authContext = useContext(AuthContext);\r\n\r\n useEffect(() => {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n if (auth_token !== null) {\r\n console.log('Auth token present');\r\n redirect(auth_token);\r\n } else {\r\n console.log('No Auth token present');\r\n }\r\n }, [])\r\n\r\n const handleSubmit = async (e) => {\r\n e.preventDefault();\r\n \r\n const username = document.getElementById('username').value;\r\n const password = document.getElementById('password').value;\r\n let error = document.getElementById(\"error-text\");\r\n \r\n const requestBody = {\r\n username,\r\n password\r\n }\r\n \r\n try {\r\n const response = await axios.post(SERVER_URL+\"/users/login\", requestBody, {\r\n headers: {\r\n \"Content-Type\":\n```;\n\n[snippet 54] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"label\"><b>[W]</b>ant</span>\r\n <ul>\r\n {entry.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n </div>\r\n ))}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 55] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\n(!isAuthenticated) {\r\n return <Navigate replace to=\"/login\" />;\r\n }\r\n \r\n return (\r\n <div>\r\n {openedItem && (\r\n <div>恭喜你获得了：{openedItem.itemName}</div>\r\n )}\r\n <h2>盲盒开箱</h2>\r\n <button disabled={isLoading} onClick={openBox}>\r\n {isLoading ? '正在开箱...' : '打开盲盒'}\r\n </button>\r\n </div>\r\n );\r\n }\n```;\n\n[snippet 56] (filepath: server\\schemas\\Trade.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst TradeSchema = mongoose.Schema({\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n have: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n want: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n offers: [\r\n {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"active\", \"inactive\"],\r\n default: \"active\"\r\n },\r\n acceptedOffer: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\",\r\n default: null\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Trade\", TradeSchema);\n```;\n\n[snippet 57] (filepath: client\\src\\components\\Navbar.jsx):\n```\n{\r\n authContext.isAuthenticated ?\r\n (\r\n <>\r\n <NavLink to=\"/profile\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>个人中心</NavLink>\r\n <NavLink to=\"/login\" className=\"log-link\" onClick={handleLogout}>登出</NavLink>\r\n </>\r\n ) :\r\n (\r\n <>\r\n <NavLink to=\"/login\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>登录</NavLink>\r\n <NavLink to=\"/register\" className=\"log-link\" style={{backgroundColor: 'lightgreen', borderRadius: '5px', marginLeft: '10px'}}>注册</NavLink>\r\n </>\r\n )\r\n }\r\n </div>\r\n </header>\r\n );\r\n}\n```;\n\n[snippet 58] (filepath: server\\routes\\offerRoutes.js):\n```\nofferDocument = new Offer(newOffer);\r\n await offerDocument.save();\r\n\r\n const offerId = offerDocument._id;\r\n const userId = newOffer.userId;\r\n const tradeId = newOffer.tradeId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdOffers: offerId } });\r\n await Trade.findByIdAndUpdate(tradeId, { $push: { offers: offerId }});\r\n\r\n res.status(201).json({ message: 'Offer created successfully' });\r\n } catch (error) {\r\n console.error('Error saving offer to MongoDb:', error);\r\n res.status(500).end('Internal Server Error');\r\n }\r\n});\r\n\r\nrouter.post('/update/:_id', auth, updateOffer);\r\n\r\nasync function updateOffer(request, response, next) {\r\n const offerId = request.params._id;\r\n const offerUpdate = request.body;\r\n\r\n try {\r\n const newStatus = offerUpdate.status;\r\n\r\n let updatedOffer;\r\n\r\n if(newStatus === \"accepted\") {\r\n const newAcceptedAt = offerUpdate.acceptedAt;\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status: newStatus,\r\n acceptedAt: newAcceptedAt\r\n }, { new: true });\r\n } else if(newStatus === \"declined\") {\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status:\n```;\n\n[snippet 59] (filepath: client\\src\\components\\Register.js):\n```\n// client\\src\\components\\Register.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nconst Register = () => {\r\n const { registerUser } = useContext(AuthContext);\r\n const [username, setUsername] = useState('');\r\n const [password, setPassword] = useState('');\r\n const [message, setMessage] = useState(''); // 新增\r\n\r\nconst register = async () => {\r\n try {\r\n const response = await registerUser(username, password);\r\n\r\n if (response.status === 200) {\r\n setMessage(response.data.msg);\r\n }\r\n } catch (error) {\r\n console.log('error',error)\r\n // 检查 error 对象是否包含 response 属性\r\n if(error.response){\r\n setMessage(error.response.data.msg); // 如果服务器返回了错误信息，则显示\r\n } else {\r\n console.log(error)\r\n setMessage('An error occurred.'); // 否则显示一般错误信息\r\n }\r\n }\r\n};\r\n\r\n return (\r\n <div>\r\n <input type=\"text\" placeholder=\"用户名\" onChange={(e) => setUsername(e.target.value)} />\r\n <input type=\"password\" placeholder=\"密码\" onChange={(e) => setPassword(e.target.value)} />\r\n <button onClick={register}>注册</button>\r\n {/* 新增：显示消息 */}\r\n {message && <div>{message}</div>}\r\n </div>\n```;\n\n[snippet 60] (filepath: server\\routes\\userRoutes.js):\n```\n{\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post(\"/register\", async(req, res) => {\r\n const {username, password} = req.body;\r\n\r\n try {\r\n let user = await User.findOne({username});\r\n if(user) {\r\n return res.status(400).json({\r\n msg:\"User already exists\"\r\n });\r\n }\r\n user = new User({\r\n username,\r\n password\r\n });\r\n const s = await bcrypt.genSalt(10);\r\n user.password = await bcrypt.hash(password, s);\r\n\r\n await user.save();\r\n\r\n res.status(200).json({\r\n msg: \"User created successfully\"\r\n });\r\n } catch(error) {\r\n res.status(500).json({\r\n msg: error.message\r\n });\r\n }\r\n});\r\n\r\nrouter.post(\"/login\", async (req, res) => {\r\n const { username, password } = req.body;\r\n\r\n try {\r\n let user = await User.findOne({ username: username });\r\n\r\n if(!user) {\r\n return res.status(400).json({\r\n msg: \"Invalid username\"\r\n });\r\n }\r\n\r\n const flag = await bcrypt.compare(password, user.password);\r\n if(!flag) {\r\n return res.status(400).json({\r\n msg: \"Invalid password\"\r\n });\r\n }\r\n\r\n const payload = {\r\n user: {\r\n id: user.id\r\n }\r\n };\r\n\r\n jwt.sign(payload, 'secret-key', {\n```;\n\n[snippet 61] (filepath: server\\schemas\\Offer.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst OfferSchema = mongoose.Schema({\r\n tradeId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n },\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n offered: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n for: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"pending\", \"accepted\", \"declined\"],\r\n default: \"pending\"\r\n },\r\n acceptedAt: {\r\n type: String,\r\n default: null\r\n }\r\n})\r\n\r\nmodule.exports = mongoose.model(\"Offer\", OfferSchema);\n```;\n\n[snippet 62] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\ndata */}\r\n <ul>\r\n {offer.offered.map((offeredItem) => (\r\n <li key={offeredItem._id}>{`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>For:</b></span>\r\n {/* Render the 'offer.for' data */}\r\n <ul>\r\n {offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n offer.status === \"pending\" ? (\r\n <div className=\"button-container\">\r\n <button className=\"action\"\r\n id=\"accept-btn\"\r\n onClick={() => onAcceptOffer(offer.tradeId, offer._id)}\r\n >Accept\r\n </button>\r\n <button\r\n className=\"action\"\r\n id=\"decline-btn\"\r\n onClick={() => onDeclineOffer(offer._id)} // Call the parent's onDeclineOffer function\r\n >\r\n Decline\r\n </button>\r\n </div>\r\n ) : (\r\n <div className=\"offer-status\">\r\n {offer.status === \"declined\" ? (\r\n <span><i>Trade Declined</i></span>\r\n ) : (\r\n <span><i>Trade Accepted</i></span>\r\n )}\r\n </div>\r\n )\r\n }\r\n </div>\r\n ))\r\n )}\r\n </div>\r\n );\r\n}\r\n\r\nexport function OutgoingOffers({data}) {\r\n return (\r\n <div\n```;\n\n[snippet 63] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nimport React from 'react';\r\nimport '../../styles/components/Activity.css'\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\n\r\nexport default function Activity({data}) {\r\n\r\n const acceptedData = data.filter((item) => item.status === 'accepted');\r\n\r\n return (\r\n <div className=\"activity\">\r\n <header>\r\n <h2>Activity</h2>\r\n </header>\r\n\r\n <table className=\"activity-table\">\r\n <thead>\r\n <th className=\"time-header\">Time</th>\r\n <th className=\"trade-header\" colSpan={3}>Trade</th>\r\n </thead>\r\n\r\n <tbody>\r\n {acceptedData.map((offer) => (\r\n <tr key={offer._id}>\r\n <td className=\"time-data\">{offer.acceptedAt}</td>\r\n\r\n <td className=\"trade-data\">\r\n {offer.offered.map((offeredItem, index, array) => (\r\n <span key={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}), `) :\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}) `)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n\r\n <td>&#x2194;</td>\r\n\r\n <td className=\"trade-data\">\r\n\r\n {offer.for.map((acceptedItem, index, array) => (\r\n <span\n```;\n\n[snippet 64] (filepath: server\\routes\\currencyRoutes.js):\n```\n// server\\routes\\currencyRoutes.js\r\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Currency = require('../schemas/Currency');\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/:userId', auth, async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.userId).populate('currency');\r\n res.json(user.currency);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 65] (filepath: client\\src\\context\\AuthProvider.js):\n```\nAuthProvider;\n```;\n\n[snippet 66] (filepath: client\\src\\utilities\\Utilities.js):\n```\nimport jwtDecode from \"jwt-decode\";\r\nimport {wearDictionary} from \"../objects/commonObjects\";\r\n\r\nexport function convertWear(wear) {\r\n return (wearDictionary[wear]);\r\n}\r\n\r\nexport function getUserId(auth_token) {\r\n const decoded = jwtDecode(auth_token);\r\n return decoded.user.id;\r\n}\r\n\r\nexport function renderOptions(options) {\r\n return options.map((option, index) => (\r\n <option key={index}>{option}</option>\r\n ));\r\n}\r\n\r\nexport function currentTime() {\r\n const now = new Date();\r\n const hours = now.getHours();\r\n const minutes = now.getMinutes();\r\n const timeFormat = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n return timeFormat;\r\n}\n```;\n\n[snippet 67] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Offer.css'\r\n\r\nexport function IncomingOffers({data, onDeclineOffer, onAcceptOffer}) {\r\n return (\r\n <div className=\"incoming-component\">\r\n <h2>Incoming Offers &darr;</h2>\r\n\r\n {data.flatMap((item) =>\r\n item.offers.map((offer) => (\r\n <div key={offer._id} className=\"incoming-item\">\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n {/* Render the 'item.trade.have' data */}\r\n <ul>\r\n {item.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>[W]</b>ant</span>\r\n {/* Render the 'item.trade.want' data */}\r\n <ul>\r\n {item.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n <div className=\"offered\">\r\n <span className=\"label\"><b>{`${offer.userId} Offered:`}</b></span>\r\n {/* Render the 'offer.offered'\n```;\n\n[snippet 68] (filepath: server\\routes\\offerRoutes.js):\n```\nnewStatus\r\n }, { new: true });\r\n }\r\n\r\n if (!updatedOffer) {\r\n return response.status(404).json({ message: 'Offer not found' });\r\n }\r\n\r\n sendEventsToAll(updatedOffer);\r\n\r\n return response.status(200).json({ message: 'Offer updated successfully', updatedOffer });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 69] (filepath: client\\src\\components\\Navbar.jsx):\n```\nimport React, {useContext} from 'react';\r\nimport {NavLink, useNavigate} from 'react-router-dom';\r\nimport AuthContext from \"../context/AuthContext\";\r\nimport '../styles/components/Navbar.css';\r\n\r\nexport default function Navbar() {\r\n const authContext = useContext(AuthContext);\r\n const navigate = useNavigate();\r\n\r\n const handleLogout = () => {\r\n sessionStorage.clear();\r\n authContext.logout();\r\n navigate('/login');\r\n };\r\n\r\n return (\r\n <header className=\"navbar\">\r\n <div className=\"navbar-logo\">\r\n <h1>BUFF</h1>\r\n </div>\r\n <nav className=\"navbar-menu\">\r\n <ul>\r\n <li>\r\n <NavLink to=\"/\" activeClassName=\"active-link\" className=\"navbar-link\" exact>\r\n Trades\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/offers\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Offers\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/create\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Create\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/blindbox\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n 盲盒\r\n </NavLink>\r\n </li>\r\n \r\n </ul>\r\n </nav>\r\n <div className=\"navbar-login-logout\">\n```;\n\n[snippet 70] (filepath: client\\README.md):\n```\n`eject`, you can't go back!**\r\n\r\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\r\n\r\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\r\n\r\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\r\n\r\n## Learn More\r\n\r\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\r\n\r\nTo learn React, check out the [React documentation](https://reactjs.org/).\r\n\r\n### Code Splitting\r\n\r\nThis section has moved here:\n```;\n\n[snippet 71] (filepath: client\\src\\components\\index\\Trades.jsx):\n```\nimport React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Trades.css';\r\n\r\nexport default function Trades({data}) {\r\n\r\n const gridItems = data.map((trade, index) => (\r\n <div key={trade._id} className=\"trade-grid-item\">\r\n\r\n <div className=\"trade-list\">\r\n <div><b>[H]</b>ave</div>\r\n <ul>\r\n {trade.have.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <div><b>[W]</b>ant</div>\r\n <ul>\r\n {trade.want.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n (trade.status === \"active\") ?\r\n (\r\n <NavLink to={`/offers/${trade._id}`} key={trade._id} className=\"navlink-offer-btn\">\r\n <div className=\"offerBtn\">Make Offer</div>\r\n </NavLink>\r\n ) :\r\n (<div className=\"completed\">Completed</div>)\r\n }\r\n </div>\r\n ));\r\n\r\n return (\r\n <div className=\"trade-grid-container\">\r\n {gridItems}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 72] (filepath: client\\src\\components\\create\\itemList\\ItemList.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../../utilities/Utilities\";\r\nimport '../../../styles/components/ItemList.css';\r\n\r\nexport default function ItemList({items, onDeleteItem}) {\r\n return (\r\n <ul className=\"item-list\">\r\n {items.map((item) => (\r\n <li key={item.id}>\r\n <Item item={item} onDelete={onDeleteItem}/>\r\n </li>\r\n ))}\r\n </ul>\r\n );\r\n}\r\n\r\nfunction Item({item, onDelete}) {\r\n let itemContent;\r\n\r\n itemContent = (\r\n <>\r\n {`${item.knife} ${item.finish} (${convertWear(item.wear)})`}\r\n </>\r\n );\r\n\r\n return (\r\n <label>\r\n {itemContent}\r\n <button className=\"delete-button\" onClick={() => onDelete(item.id)}>X</button>\r\n </label>\r\n );\r\n}\n```;\n\n[snippet 73] (filepath: client\\README.md):\n```\n# Getting Started with Create React App\r\n\r\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\r\n\r\n## Available Scripts\r\n\r\nIn the project directory, you can run:\r\n\r\n### `npm start`\r\n\r\nRuns the app in the development mode.\\\r\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\r\n\r\nThe page will reload when you make changes.\\\r\nYou may also see any lint errors in the console.\r\n\r\n### `npm test`\r\n\r\nLaunches the test runner in the interactive watch mode.\\\r\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\r\n\r\n### `npm run build`\r\n\r\nBuilds the app for production to the `build` folder.\\\r\nIt correctly bundles React in production mode and optimizes the build for the best performance.\r\n\r\nThe build is minified and the filenames include the hashes.\\\r\nYour app is ready to be deployed!\r\n\r\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\r\n\r\n### `npm run eject`\r\n\r\n**Note: this is a one-way operation. Once you\n```;\n\n[snippet 74] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\n...</i></div>\r\n <ItemList items={wantItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'wantItems')}/>\r\n </fieldset>\r\n\r\n <button type=\"submit\" id=\"submitBtn\">Create</button>\r\n </form>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 75] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\r\n\r\n### Analyzing the Bundle Size\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\r\n\r\n### Making a Progressive Web App\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\r\n\r\n### Advanced Configuration\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\r\n\r\n### Deployment\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\r\n\r\n### `npm run build` fails to minify\r\n\r\nThis section has moved here:\n```;\n\n[snippet 76] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nkey={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)}),`) :\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)})`)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n </tr>\r\n ))}\r\n </tbody>\r\n </table>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 77] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\ne.preventDefault();\r\n setWearText('');\r\n setKnifeText('');\r\n setFinishText('');\r\n onAddItem({\r\n wear: wearText,\r\n knife: knifeText,\r\n finish: finishText\r\n });\r\n }}>Add\r\n </button>\r\n </>\r\n );\r\n}\n```;\n\n[snippet 78] (filepath: client\\src\\pages\\Index.jsx):\n```\nselectedCount={selectedCheckboxes.length}\r\n onCheckboxChange={handleCheckboxChange}/>\r\n </div>\r\n <div className=\"content\">\r\n <Trades data={filteredData}/>\r\n </div>\r\n <div className=\"right-sidebar\">\r\n <Activity data={offerData}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 79] (filepath: client\\src\\AuthGuard.js):\n```\n// AuthGuard.js 示例\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext'; // 确保导入正确的上下文\r\n\r\nexport function withAuth(Component) {\r\n console.log('withAuth')\r\n return (props) => {\r\n console.log('authguard检查')\r\n const navigate = useNavigate();\r\n const authContext = useContext(AuthContext); // 使用AuthContext\r\n\r\n if (!authContext.isAuthenticated) { // 判断是否登录\r\n console.log('未登录触发authguard')\r\n navigate('/login');\r\n return null;\r\n }\r\n\r\n return <Component {...props} />;\r\n };\r\n}\n```;\n\n[snippet 80] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\nimport React, {useState} from 'react';\r\nimport {itemsData} from \"../../../objects/commonObjects\";\r\nimport {renderOptions} from \"../../../utilities/Utilities\";\r\n\r\nexport default function AddItem({onAddItem}) {\r\n const [wearText, setWearText] = useState('');\r\n const [knifeText, setKnifeText] = useState('');\r\n const [finishText, setFinishText] = useState('');\r\n\r\n return (\r\n <>\r\n <label>\r\n Wear\r\n <input value={wearText} type=\"text\" list=\"wearOptions\"\r\n onChange={(e) => setWearText(e.target.value)}/>\r\n <datalist id=\"wearOptions\">{renderOptions(itemsData.wears)}</datalist>\r\n </label>\r\n <label>\r\n Knife\r\n <input value={knifeText} type=\"text\" list=\"knifeOptions\"\r\n onChange={(e) => setKnifeText(e.target.value)}/>\r\n <datalist id=\"knifeOptions\">{renderOptions(itemsData.knives)}</datalist>\r\n </label>\r\n <label>\r\n Finish\r\n <input value={finishText} type=\"text\" list=\"finishOptions\"\r\n onChange={(e) => setFinishText(e.target.value)}/>\r\n <datalist id=\"finishOptions\">{renderOptions(itemsData.finishes)}</datalist>\r\n </label>\r\n\r\n <button onClick={(e) => {\n```;\n\n[snippet 81] (filepath: client\\src\\index.js):\n```\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n <React.StrictMode>\r\n <App />\r\n </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\n```;\n\n[snippet 82] (filepath: server\\schemas\\Currency.js):\n```\n// server\\schemas\\Currency.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst CurrencySchema = mongoose.Schema({\r\n name: {\r\n type: String,\r\n required: true\r\n },\r\n value: {\r\n type: Number,\r\n required: true\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Currency\", CurrencySchema);\n```;\n\n[snippet 83] (filepath: server\\middleware\\auth.js):\n```\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nmodule.exports = function(req, res, next) {\r\n const token = req.header(\"auth-token\");\r\n if (!token){\r\n return res.status(401).json({ msg: \"No token in header\" });\r\n }\r\n try {\r\n const decoded = jwt.verify(token, 'secret-key');\r\n req.user = decoded.user;\r\n next();\r\n } catch (err) {\r\n res.status(500).json({\r\n msg : err.message\r\n });\r\n }\r\n};\n```;\n\n[snippet 84] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nhtmlFor={`item${index}`}>{item}</label>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 85] (filepath: server\\schemas\\BlindBox.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst BlindBoxlindBoxSchema = new mongoose.Schema({\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n });\r\n\r\n module.exports = mongoose.model(\"BlindBox\", BlindBoxlindBoxSchema);\n```;\n\n[snippet 86] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ntype=\"submit\" id=\"submitOfferBtn\">Make Offer</button>\r\n </form>\r\n </div>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 87] (filepath: client\\src\\components\\Register.js):\n```\n);\r\n};\r\n\r\nexport default Register;\n```;\n\n[snippet 88] (filepath: client\\src\\reportWebVitals.js):\n```\nconst reportWebVitals = onPerfEntry => {\r\n if (onPerfEntry && onPerfEntry instanceof Function) {\r\n import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n getCLS(onPerfEntry);\r\n getFID(onPerfEntry);\r\n getFCP(onPerfEntry);\r\n getLCP(onPerfEntry);\r\n getTTFB(onPerfEntry);\r\n });\r\n }\r\n};\r\n\r\nexport default reportWebVitals;\n```;\n\n[snippet 89] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n<h2>Login</h2>\r\n <form onSubmit={handleSubmit}>\r\n <div className=\"login-elements\">\r\n <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"/>\r\n <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"/>\r\n <div className=\"error\" id=\"error-text\"></div>\r\n </div>\r\n <button className=\"login-button\">Log In</button>\r\n </form>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 90] (filepath: client\\src\\pages\\Create.jsx):\n```\nimport React from 'react';\r\nimport Creation from \"../components/create/Creation\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Create() {\r\n return (\r\n <div className=\"create\">\r\n <Creation/>\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border: \"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 91] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n```;\n\n[snippet 92] (filepath: client\\src\\App.test.js):\n```\nimport { render, screen } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n render(<App />);\r\n const linkElement = screen.getByText(/learn react/i);\r\n expect(linkElement).toBeInTheDocument();\r\n});\n```;\n\n[snippet 93] (filepath: client\\src\\pages\\Login.jsx):\n```\nimport React from 'react';\r\nimport LoginForm from \"../components/login/LoginForm\";\r\n\r\nexport default function Login() {\r\n return (\r\n <div className=\"login\">\r\n <LoginForm/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 94] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {itemsData} from \"../../objects/commonObjects\";\r\nimport '../../styles/components/Filter.css';\r\n\r\nexport default function Filter({selectedCount, onCheckboxChange}) {\r\n const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n useEffect(() => {\r\n onCheckboxChange(selectedItems);\r\n }, [selectedItems, onCheckboxChange]);\r\n\r\n const handleCheckboxChange = (index) => {\r\n const selectedItem = itemsData.knives[index];\r\n setSelectedItems((prevSelectedItems) => {\r\n if (prevSelectedItems.includes(selectedItem)) {\r\n return prevSelectedItems.filter(item => item !== selectedItem);\r\n } else {\r\n return [...prevSelectedItems, selectedItem];\r\n }\r\n });\r\n };\r\n\r\n return (\r\n <div className=\"filter\">\r\n <header>\r\n {\r\n (selectedCount > 0) ?\r\n (<h2>Filter ({selectedCount}) </h2>) :\r\n (<h2>Filter </h2>)\r\n }\r\n </header>\r\n\r\n <ul>\r\n {itemsData.knives.map((item, index) => (\r\n <li key={index}>\r\n <input\r\n type=\"checkbox\"\r\n className=\"item-checkbox\"\r\n onChange={() => handleCheckboxChange(index)}\r\n />\r\n <label\n```;\n\n[snippet 95] (filepath: client\\src\\setupTests.js):\n```\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\r\n// allows you to do things like:\r\n// expect(element).toHaveTextContent(/react/i)\r\n// learn more: https://github.com/testing-library/jest-dom\r\nimport '@testing-library/jest-dom';\n``````]","isSelected":true},{"type":"response","value":"<h4><b>repoKing</b>:</h4>\nIt seems like you've provided a large amount of code and file paths but have not specified a clear question or prompt for me to address. Could you please provide more specific details on what you need help with?\n<sub>Tokens used: 32234 (P:32192+C:42) - ¥2.31</sub>","role":"assistant","text":"It seems like you've provided a large amount of code and file paths but have not specified a clear question or prompt for me to address. Could you please provide more specific details on what you need help with?\n<sub>Tokens used: 32234 (P:32192+C:42) - ¥2.31</sub>"},{"type":"prompt","value":"<h4><b>you</b>:</h4>\n告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计","role":"user","text":"告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计","fullPrompt":"You are an AI programming assistant. \nYour responses should be concise, helpful, and logical and stay relevant to user's [prompt] and [code selected].\nIf the user asks for code or technical questions, you must provide code suggestions and adhere to technical information. Most likely, assume user wants code output in [language], unless the question is generic.\n\n请使用中文回答。\n\n\n[prompt]:告诉我一下，如果我现在需要对接到某个射击游戏的服务器，将这个平台并实现交易功能，我需要的api给我完整列表。因为 Api我要告诉别人如何设计\n[language]:code-runner-output\n\n\n You can refer to this context for bigger picture. The [code selected] above is part of a repository. These are some relevant [snippets] from that repository:[```[snippet 1] (filepath: doc\\项目介绍.md):\n```\n// obsidian://open?vault=Phoenix0906_2024-02-26&file=%E8%AE%A4%E7%9F%A5%E7%AE%A1%E7%90%86%2Fmatrix%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\r\n\r\nrix项目介绍\r\n - 项目介绍\r\n - 这个项目是一个综合性的虚拟物品交易平台，专注于类似 CSGO 游戏内物品的买卖。它允许用户浏览、购买、出售游戏内的道具，如枪支和皮肤。此外，平台还引入了盲盒开箱功能，用户可以购买盲盒并打开以获得随机道具。其他关键功能包括充值提现系统和用户账户管理，确保交易的便捷性和安全性。前端采用 React 构建，后端使用 Node.js，数据库选择根据需求而定，整个平台设计注重用户体验和实时数据更新。\r\n - 我现在要替该平台加入盲盒开箱功能，告诉我步骤。\r\n - 要在该平台加入盲盒开箱功能，可以按以下步骤进行：\r\n 设计盲盒数据模型：\r\n 首先需要设计和确定盲盒的数据结构。例如，是否每个盲盒都有固定或随机的价值范围，包含哪些类型的物品等。\r\n 更新后端API：\r\n 增加一个新的数据库模型来存储盲盒信息。\r\n 创建相关的API接口，比如购买盲盒、打开盲盒等接口。\r\n 更新前端界面：\r\n 在现有的交易平台基础上，添加盲盒的购买和开箱界面，以及展示开箱结果的页面。\r\n 实现开箱逻辑：\r\n 根据设计的规则，实现随机选择盲盒内物品的逻辑。\r\n 测试：\r\n 完成以上步骤后，对新增功能进行充分测试，确保无误后发布。\n```;\n\n[snippet 2] (filepath: server\\routes\\userRoutes.js):\n```\nexpiresIn: 10000 }, (err, token) => {\r\n if (err) throw err;\r\n res.status(200).json({\r\n token,\r\n });\r\n });\r\n } catch (error) {\r\n res.status(500).json({\r\n msg: error.message\r\n })\r\n }\r\n});\r\n\r\n// server/routes/userRoutes.js 中获取用户所有物品详情的接口\r\nrouter.get('/:userId/items', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId;\r\n const user = await User.findById(userId)\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user.items);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: \"An error occurred while fetching user's items.\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.id);\r\n //req.logUser(user); // 使用中间件方法打印用户信息\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user);\r\n } catch (error) {\r\n res.status(500).json({ error: \"Failed to retrieve user\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/secure-api\", auth, async (req, res) => {\r\n try {\r\n res.json({\r\n msg :\n```;\n\n[snippet 3] (filepath: server\\test\\addTestItems.js):\n```\nconst axios = require('axios'); // 引入 axios\r\n\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000';\r\n\r\n// 随机生成物品名称和稀有度\r\nconst generateRandomItem = (index) => {\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const rarity = rarityTypes[Math.floor(Math.random() * rarityTypes.length)];\r\n const wear = wearTypes[Math.floor(Math.random() * wearTypes.length)];\r\n const knife = knifeTypes[Math.floor(Math.random() * knifeTypes.length)];\r\n const finish = finishTypes[Math.floor(Math.random() * finishTypes.length)];\r\n \r\n return { itemName: `物品${index}`, rarity, wear, knife, finish };\r\n };\r\n// 创建100个随机示例物品\r\nconst sampleItems = Array.from({ length: 100 }, (_, index) => generateRandomItem(index + 1));\r\n\r\nconst addItemsToDatabase = async () => {\r\n try {\r\n const response = await axios.post(`${SERVER_URL}/api/items/batchAdd`, sampleItems); // 修改请求的URL\n```;\n\n[snippet 4] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\n// 生成随机物品数据并添加到服务器的函数，返回新物品的ID\r\nasync function addNewItem() {\r\n // 随机生成物品数据，取自 [snippet 5]\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const itemData = {\r\n itemName: `${knifeTypes[Math.floor(Math.random() * knifeTypes.length)]} | ${finishTypes[Math.floor(Math.random() * finishTypes.length)]}`,\r\n rarity: rarityTypes[Math.floor(Math.random() * rarityTypes.length)],\r\n wear: wearTypes[Math.floor(Math.random() * wearTypes.length)],\r\n // 其他字段根据需要添加\r\n };\r\n \r\n // 调用添加物品的API\r\n const response = await axios.post(`${SERVER_URL}/api/items/add`, itemData);\r\n return response.data.item._id; // 假定响应体中返回了新创建的物品信息\r\n }\r\n\r\n // 为每个盲盒生成物品并构造盲盒数据的函数\r\nasync function generateBlindBoxData(index) {\r\n let itemIds = [];\r\n for (let i = 0; i < 3; i++) { // 假设每个盲盒包含3个物品\n```;\n\n[snippet 5] (filepath: client\\src\\components\\UserProfile.js):\n```\nsessionStorage.getItem('auth_token');\r\n\r\n const response = await axios.get(SERVER_URL+\"/users/profile/\" + getUserId(auth_token), {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n setUser(response.data);\r\n } catch (error) {\r\n console.error('获取用户信息报错',error.response);\r\n }\r\n };\r\n\r\n // 获取用户物品信息的函数\r\n // client/src/components/UserProfile.js 中获取用户物品信息的部分\r\n const getUserItems = async () => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n // 更新请求路径以匹配服务端路由\r\n const response = await axios.get(`${SERVER_URL}/users/${getUserId(auth_token)}/items`, {\r\n headers: { 'auth-token': auth_token },\r\n });\r\n\r\n if(response.status === 200) {\r\n setItems(response.data); // 假设 setUserItems 会更新状态以展示物品列表\r\n }\r\n } catch (error) {\r\n console.error('获取用户物品信息失败', error.response);\r\n }\r\n };\r\n\r\n useEffect(() => {\r\n\r\n getUser();\r\n getUserItems();\r\n }, []); // 添加 getUser 为依赖项\r\n\r\n return (\r\n <div>\r\n {user && (\r\n <div>\r\n <h1>用户名: {user.username}</h1>\r\n {/* 展示用户余额 */}\r\n <p>账户余额: {user.currency?.value || 0}</p>\r\n\r\n {/* 充值输入和按钮 */}\r\n <input type=\"number\"\n```;\n\n[snippet 6] (filepath: README.md):\n```\n# Counter-Strike Item Trading Application\r\n\r\n## Description\r\nA full-stack web application that enable traders to create new trade listings and make offers on existing trade listings.\r\nOffers a comprehensive set of features including posting trades, accepting/declining incoming offers, viewing prior trading history, \r\ncompleted trade activity, and item filters.\r\n\r\n## Technologies Used\r\n- React.js\r\n- Node.js\r\n- Express.js\r\n- MongoDB\r\n\r\n## Methodology\r\n\r\n## Demonstration\n```;\n\n[snippet 7] (filepath: server\\routes\\itemRoutes.js):\n```\n// server/routes/itemRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Item = require('../schemas/Item'); // 确保路径正确\r\n\r\n// 添加物品的API\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const { itemName, rarity, wear, knife, finish } = req.body;\r\n //console.log('测试-添加物品',req.body)\r\n const newItem = new Item({ itemName, rarity, wear, knife, finish });\r\n await newItem.save();\r\n res.json({ success: true, item: newItem });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加物品的路由\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const items = req.body; // 假设前端发送的是一个物品数组\r\n // 使用 mongoose 的 insertMany 方法批量插入数据\r\n await Item.insertMany(items);\r\n res.status(200).json({ success: true, message: \"批量添加成功\" });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 8] (filepath: server\\server.js):\n```\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst user = require(\"./routes/userRoutes\");\r\nconst trade = require(\"./routes/tradeRoutes\");\r\nconst offer = require(\"./routes/offerRoutes\");\r\nconst currency = require(\"./routes/currencyRoutes\"); // 新增\r\nconst boxRoutes = require('./routes/boxRoutes');\r\nconst itemRoutes = require('./routes/itemRoutes'); \r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\napp.use(cors())\r\n\r\n// const MONGOURI = \"mongodb://csgoAdmin:pswd123@localhost:27017/csgo_trading_app\";\r\nconst MONGOURI = \"mongodb+srv://roegin:tideland@alexmongodb.wfchfom.mongodb.net/buff\";//\"mongodb://db:27017/csgo_trading_app\";\r\n// 具体添加此处\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\napp.get('/headers', (req, res) => {\r\n res.send(req.headers);\r\n});\r\n*/\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: false}));\r\n\r\napp.use(\"/users\", user);\r\napp.use(\"/trades\", trade);\r\napp.use(\"/offers\", offer);\r\napp.use(\"/currency\", currency); // 新增\r\napp.use('/api/boxes', boxRoutes); // 使用/api作为基础路径\r\napp.use('/api/items',\n```;\n\n[snippet 9] (filepath: server\\test\\addBlindBoxesToServer.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\nconst { generateBlindBoxData } = require('./generateBlindBoxData');\r\n\r\n\r\n\r\n// 向服务器批量添加盲盒的函数\r\nasync function addBlindBoxesToServer() {\r\n let blindBoxes = [];\r\n for (let i = 0; i < 10; i++) {\r\n console.log('generateBlindBoxData');\r\n const blindBoxData = await generateBlindBoxData(i + 1); // 异步获取盲盒数据\r\n blindBoxes.push(blindBoxData);\r\n }\r\n \r\n try {\r\n console.log('url', `${SERVER_URL}/api/boxes/batchAdd`);\r\n const response = await axios.post(`${SERVER_URL}/api/boxes/batchAdd`, blindBoxes);\r\n console.log('批量添加盲盒成功', response.data);\r\n } catch (error) {\r\n console.error('批量添加盲盒失败:', error.message);\r\n }\r\n }\r\n\r\naddBlindBoxesToServer();\n```;\n\n[snippet 10] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nimport React, {useReducer} from 'react';\r\nimport AddItem from \"./itemList/AddItem\";\r\nimport ItemList from \"./itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport {toast} from 'react-toastify';\r\nimport '../../styles/components/Creation.css'\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function Creation() {\r\n // Initialize two separate states and dispatch functions for each list\r\n const [haveItems, dispatchHaveItems] = useReducer(itemsReducer, []);\r\n const [wantItems, dispatchWantItems] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postTrade = () => {\r\n const haveItemsFormatted =\n```;\n\n[snippet 11] (filepath: server\\test\\register.js):\n```\nconst axios = require('axios'); // 如果你在浏览器环境下，不需要这一行\r\n\r\nasync function registerUser(username, password) {\r\n try {\r\n const response = await axios.post(SERVER_URL+'/users/register', { // 修改为你自己的服务器地址\r\n username,\r\n password\r\n });\r\n\r\n console.log(response.data.msg); // \"User created successfully\"\r\n } catch (error) {\r\n console.error(`Error: ${error.response.data.msg}`); // \"User already exists\" 或其他错误信息\r\n }\r\n}\r\n\r\n\r\n// 使用你自己的用户名和密码调用这个函数\r\nregisterUser('wangbuai', '1234');\n```;\n\n[snippet 12] (filepath: server\\routes\\boxRoutes.js):\n```\nitems: { $each: selectedBox.items } } }, // 使用 $each 将数组中的每个元素都添加到用户的 items 字段\r\n { new: true }\r\n ).exec();\r\n\r\n // 响应成功信息，可以选择返回给客户端更多信息（例如盲盒中包含的具体物品）\r\n res.json({ success: true, message: \"盲盒开箱成功\", items: selectedBox.items });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 添加单个盲盒接口\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const blindBox = new BlindBox(req.body);\r\n await blindBox.save();\r\n res.status(201).json({ message: \"盲盒添加成功\", blindBox });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加盲盒接口\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const blindBoxes = req.body; // 预期是一个盲盒数组\r\n const result = await BlindBox.insertMany(blindBoxes);\r\n res.status(201).json({ message: \"批量添加盲盒成功\", result });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 13] (filepath: client\\src\\config.js):\n```\nlet SERVER_URL;\r\n\r\n\r\n\r\nif (process.env.BUff_ENV === 'development') {\r\n SERVER_URL = process.env.REACT_APP_DEV_SERVER_URL || \"http://localhost:4000\";\r\n console.log('SERVER_URL-development',SERVER_URL,process.env.REACT_APP_DEV_SERVER_URL,process.env.BUff_ENV)\r\n}else{\r\n SERVER_URL = process.env.REACT_APP_PROD_SERVER_URL || \"http://alex.shinestu.com:4000\";\r\n console.log('SERVER_URL-product',SERVER_URL,process.env.REACT_APP_PROD_SERVER_URL,process.env.BUff_ENV)\r\n}\r\n\r\nconsole.log('SERVER_URL',SERVER_URL,process.env.BUff_ENV)\r\n\r\nexport { SERVER_URL }; //一到两周上连,四月上旬能开出武器 //厚黑学 /资治通鉴\n```;\n\n[snippet 14] (filepath: server\\server.js):\n```\nitemRoutes);\r\n\r\nconst User = require(\"./schemas/User\");\r\nconst Trade = require(\"./schemas/Trade\");\r\nconst Offer = require(\"./schemas/Offer\");\r\nconst Item = require(\"./schemas/Item\");\r\nconst BlindBox = require(\"./schemas/BlindBox\");\r\n\r\n\r\nconst PORT = 4000;\r\n\r\nmongoose.connect(MONGOURI)\r\n .then(() => {\r\n console.log(\"Connected to MDB\");\r\n app.listen(PORT, () => {\r\n console.log(`Node is running on port ${PORT}`);\r\n });\r\n })\r\n .catch((error) => {\r\n console.log(error);\r\n });\r\n\r\n\r\nconsole.log('服务器启动 3.')\n```;\n\n[snippet 15] (filepath: client\\src\\pages\\Offers.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {IncomingOffers, OutgoingOffers} from \"../components/offers/Offer\";\r\nimport {getUserId, currentTime} from \"../utilities/Utilities\";\r\nimport '../styles/pages/Offers.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Offers() {\r\n const [offerData, setOfferData] = useState({\r\n tradeOffers: [],\r\n associatedTrades: [],\r\n });\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n useEffect(() => {\r\n\r\n if (!auth_token) {\r\n return;\r\n }\r\n\r\n fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`)\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the new data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => console.error('Error fetching data:', error));\r\n });\r\n\r\n // Function to update the offer status and fetch updated data\r\n const handleDeclineOffer = (offerId) => {\r\n // Make a network request to update the offer status in the database\r\n fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 16] (filepath: server\\routes\\boxRoutes.js):\n```\n// server/routes/boxRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst authMiddleware = require('../middleware/auth'); // 调整路径以匹配你的项目结构\r\nconst BlindBox = require('../schemas/BlindBox');\r\nconst User = require('../schemas/User'); // 调整路径以匹配你的项目结构\r\nconst Item = require(\"../schemas/Item\");\r\n\r\n// server/routes/boxRoutes.js\r\nrouter.post('/openbox',authMiddleware, async (req, res) => {\r\n try {\r\n // 假设所有盲盒都有统一格式存储在BlindBox模型中\r\n const blindBoxes = await BlindBox.find({});\r\n const randomIndex = Math.floor(Math.random() * blindBoxes.length);\r\n const selectedBox = blindBoxes[randomIndex];\r\n\r\n // 从选中的盲盒中随机抽取一个物品\r\n const items = selectedBox.items; // 假设items是存储item ObjectId的数组\r\n const selectedItemIndex = Math.floor(Math.random() * items.length);\r\n // server/routes/boxRoutes.js 中 openbox 接口的修改\r\n const selectedItem = await Item.findById(items[selectedItemIndex]).exec(); // 确保 Item 已经导入\r\n\r\n //console.log('req.user',req.user)\r\n const userId = req.user.id; // 或其他方式获取当前用户ID\r\n\r\n // 更新用户物品列表，将盲盒中的所有物品添加至用户\r\n await User.findByIdAndUpdate(\r\n userId, \r\n { $push: {\n```;\n\n[snippet 17] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nimport React, {useReducer, useState} from 'react';\r\nimport AddItem from \"../create/itemList/AddItem\";\r\nimport ItemList from \"../create/itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/MakeOfferForm.css'\r\nimport {toast} from 'react-toastify';\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function MakeOfferForm({tradeData}) {\r\n const [forItems, setForItems] = useState(tradeData.have);\r\n const [forItemsExc, setForItemsExc] = useState([]);\r\n const [haveItems, dispatch] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postOffer = () => {\r\n const\n```;\n\n[snippet 18] (filepath: server\\routes\\userRoutes.js):\n```\nconst express = require(\"express\");\r\nconst auth = require(\"../middleware/auth\");\r\nconst User = require(\"../schemas/User\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cors = require('cors');\r\nconst Currency = require(\"../schemas/Currency\");\r\nconst router = express.Router();\r\nrouter.use(cors());\r\n\r\nfunction logUserMiddleware(req, res, next) {\r\n req.logUser = function(user) {\r\n console.log('测试-user', user);\r\n }\r\n next();\r\n }\r\n\r\n router.use(logUserMiddleware);\r\n\r\n router.post('/recharge/:userId', auth, async (req, res) => {\r\n const userId = req.params.userId;\r\n const { rechargeValue } = req.body;\r\n //let rechargeValueNum = parseFloat(rechargeValue);\r\n \r\n // 这里应该根据你的需求来设置过滤条件\r\n if (true) {\r\n try {\r\n let user = await User.findById(userId).populate('currency');\r\n \r\n // 检查用户是否已有对应的 Currency 文档\r\n if (!user.currency) {\r\n // 如果没有，创建一个新的 Currency 文档并保存\r\n const newCurrency = new Currency({ value: 0, name: 'usd' });\r\n await newCurrency.save();\r\n \r\n // 将新创建的 Currency 文档的 _id 赋值给 user 的 currency 字段\r\n user.currency = newCurrency._id;\r\n\r\n // Save the user document back to the\n```;\n\n[snippet 19] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nhaveItems.map(({id, ...rest}) => rest);\r\n const wantItemsFormatted = wantItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/trades/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n userId: getUserId(auth_token),\r\n have: haveItemsFormatted,\r\n want: wantItemsFormatted\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearItemLists();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n function handleAddItemToList(itemObject, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const dispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItemFromList(itemId, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const\n```;\n\n[snippet 20] (filepath: server\\routes\\userRoutes.js):\n```\ndatabase\r\n await user.save();\r\n }else {\r\n // 获取Currency对象，更新它，然后保存\r\n let currency = await Currency.findById(user.currency._id);\r\n // Parse currency value and recharge value into floats before adding\r\n currency.value = parseFloat(currency.value) + parseFloat(rechargeValue);\r\n await currency.save();\r\n \r\n // 更新用户文档中的currency字段\r\n user = await User.findByIdAndUpdate(userId, {currency: currency._id}, {new:true}).populate('currency');\r\n }\r\n \r\n \r\n res.json({ message: 'Recharge successful', value: user.currency.value });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while recharging.' });\r\n }\r\n } else {\r\n res.status(403).json({ error: 'User is not allowed to recharge.' });\r\n }\r\n });\r\n\r\n router.get('/profile/:userId', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId; // 从URL获取用户ID\r\n console.log('/profile请求-userId',userId)\r\n\r\n const user = await User.findById(userId)\r\n .populate('currency') // 已存在的填充，用于获取货币详情\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n\r\n res.json(user);\r\n } catch (error)\n```;\n\n[snippet 21] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nhaveItemsFormatted = haveItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/offers/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n tradeId: tradeData._id,\r\n userId: getUserId(auth_token),\r\n offered: haveItemsFormatted,\r\n for: forItems\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearOffer();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n })\r\n }\r\n\r\n function clearOffer() {\r\n dispatch({\r\n type: 'cleared'\r\n });\r\n\r\n setForItems(tradeData.have);\r\n setForItemsExc([]);\r\n }\r\n\r\n function handleAddItemToList(itemObject) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItem(itemId) {\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\n```;\n\n[snippet 22] (filepath: server\\test\\addTestItems.js):\n```\nconsole.log('批量添加成功:', response.data);\r\n } catch (error) {\r\n if (error.response) {\r\n // 请求已发出，服务器响应状态码不在 2xx 范围内\r\n console.error('添加失败:', error.response.data);\r\n } else if (error.request) {\r\n // 请求已发出但未收到响应\r\n console.error('服务器未响应:', error.request);\r\n } else {\r\n // 发送请求时出现了某些问题\r\n console.error('请求错误:', error.message);\r\n }\r\n }\r\n};\r\n\r\naddItemsToDatabase();\r\n\r\n// Note: 这个脚本应该在 Node.js 环境中运行。确保你的环境中已经安装了 axios。\n```;\n\n[snippet 23] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\ndispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n function clearItemLists() {\r\n dispatchHaveItems({\r\n type: 'cleared'\r\n });\r\n\r\n dispatchWantItems({\r\n type: 'cleared'\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\r\n e.preventDefault();\r\n\r\n if (auth_token) {\r\n postTrade();\r\n\r\n toast.success('Trade created!');\r\n } else {\r\n toast.error('Please log in to create a trade.');\r\n };\r\n };\r\n\r\n return (\r\n <div className=\"creation-container\">\r\n <form onSubmit={handleSubmit}>\r\n <h2>Create Trade Offer</h2>\r\n <fieldset>\r\n <legend><b>Have</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'haveItems')}/>\r\n <div className=\"have-header\"><i>You have ...</i></div>\r\n <ItemList items={haveItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'haveItems')}/>\r\n </fieldset>\r\n\r\n <div className=\"swap\">&#8645;</div>\r\n\r\n <fieldset>\r\n <legend><b>Want</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'wantItems')}/>\r\n <div className=\"want-header\"><i>You want\n```;\n\n[snippet 24] (filepath: client\\src\\components\\UserProfile.js):\n```\nvalue={rechargeAmount} onChange={(e) => setRechargeAmount(e.target.value)} />\r\n <button onClick={() => recharge(rechargeAmount)}>充值</button>\r\n </div>\r\n )}\r\n <h2>我的物品列表</h2>\r\n <ul>\r\n {items.map((item, index) => (\r\n <li key={index}>{item.itemName} - {item.description}</li> // 使用 itemName 和 description 替代 itemId\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n};\r\n\r\nexport default UserProfile;\n```;\n\n[snippet 25] (filepath: client\\src\\pages\\Index.jsx):\n```\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport Filter from \"../components/index/Filter\";\r\nimport Trades from \"../components/index/Trades\";\r\nimport Activity from \"../components/index/Activity\";\r\nimport '../styles/pages/Index.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Index() {\r\n const [data, setData] = useState([]);\r\n const [filteredData, setFilteredData] = useState([]);\r\n const [offerData, setOfferData] = useState([]);\r\n const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\r\n const hasRendered = useRef(false);\r\n const hasRenderedOffers = useRef(false);\r\n\r\n useEffect(() => {\r\n let events = null;\r\n\r\n if (!hasRendered.current) {\r\n events = new EventSource(SERVER_URL+'/trades/all');\r\n\r\n events.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setData(parsedData);\r\n };\r\n\r\n hasRendered.current = true;\r\n }\r\n\r\n return () => {\r\n if (events) {\r\n events.close();\r\n hasRendered.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n let offerEvents = null;\r\n\r\n if\n```;\n\n[snippet 26] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport MakeOfferForm from '../components/makeoffer/MakeOfferForm';\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function MakeOffer() {\r\n const {_id} = useParams();\r\n const [tradeData, setTradeData] = useState({});\r\n const [loading, setLoading] = useState(true);\r\n const [error, setError] = useState(null);\r\n\r\n useEffect(() => {\r\n fetch(SERVER_URL+`/trades/${_id}`)\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Network response was not ok');\r\n }\r\n return response.json();\r\n })\r\n .then((tradeDataArray) => {\r\n if (Array.isArray(tradeDataArray) && tradeDataArray.length > 0) {\r\n setTradeData(tradeDataArray[0]);\r\n setLoading(false);\r\n } else {\r\n setError(new Error('Invalid data format.'));\r\n setLoading(false);\r\n }\r\n })\r\n .catch((error) => {\r\n setError(error);\r\n setLoading(false);\r\n });\r\n }, [_id]);\r\n\r\n return (\r\n <div>\r\n {loading ? (\n```;\n\n[snippet 27] (filepath: server\\routes\\offerRoutes.js):\n```\n(error) {\r\n console.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nfunction sendEventsToAll(newOffer) {\r\n offerClients.forEach(offerClient => offerClient.response.write(`data: ${JSON.stringify(newOffer)}\\n\\n`))\r\n}\r\n\r\nrouter.get('/:userId', async(req, res) => {\r\n const userId = req.params.userId;\r\n\r\n try {\r\n const trades = await Trade.find({ userId: userId });\r\n const tradeOffers = [];\r\n const associatedTrades = [];\r\n\r\n for (const trade of trades) {\r\n const offers = await Offer.find({ _id: { $in: trade.offers } });\r\n tradeOffers.push({ trade, offers });\r\n }\r\n\r\n const offers = await Offer.find({ userId: userId });\r\n for (const offer of offers) {\r\n const trade = await Trade.findOne({ _id: offer.tradeId });\r\n associatedTrades.push({ offer, trade });\r\n }\r\n\r\n const combinedData = {\r\n tradeOffers: tradeOffers,\r\n associatedTrades: associatedTrades,\r\n };\r\n\r\n res.json(combinedData);\r\n\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post('/new', auth, async(req, res) => {\r\n const newOffer = req.body;\r\n\r\n try {\r\n const\n```;\n\n[snippet 28] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst itemId = await addNewItem(); // 创建物品并获取ID\r\n itemIds.push(itemId);\r\n }\r\n \r\n return {\r\n //id: index,\r\n items: itemIds, // 盲盒包含的物品ID数组\r\n // 可以添加更多盲盒属性\r\n };\r\n }\r\n\r\n module.exports = { generateBlindBoxData };\n```;\n\n[snippet 29] (filepath: server\\routes\\tradeRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require(\"../schemas/Trade\");\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nlet clients = [];\r\n\r\nrouter.get('/status', (request, response) => response.json({ clients: clients.length }));\r\n\r\nrouter.get('/all', eventsHandler);\r\n\r\nasync function eventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const tradeData = await Trade.find({}).lean().exec();\r\n\r\n const tradeEventData = `data: ${JSON.stringify(tradeData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(tradeEventData);\r\n\r\n const clientId = Date.now();\r\n\r\n const newClient = {\r\n id: clientId,\r\n response\r\n };\r\n\r\n clients.push(newClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${clientId} Connection closed`);\r\n clients = clients.filter(client => client.id !== clientId);\r\n });\r\n } catch (error) {\n```;\n\n[snippet 30] (filepath: server\\routes\\offerRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require('../schemas/Trade');\r\nconst Offer = require('../schemas/Offer');\r\nconst User = require(\"../schemas/User\");\r\n\r\nconst router = express.Router();\r\n\r\nlet offerClients = [];\r\n\r\nrouter.get('/all', offerEventsHandler);\r\n\r\nasync function offerEventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const offerData = await Offer.find({}).lean().exec();\r\n\r\n const offerEventData = `data: ${JSON.stringify(offerData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(offerEventData);\r\n\r\n const offerClientId = Date.now();\r\n\r\n const newOfferClient = {\r\n id: offerClientId,\r\n response\r\n };\r\n\r\n offerClients.push(newOfferClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${offerClientId} Connection closed`);\r\n offerClients = offerClients.filter(offerClient => offerClient.id !== offerClientId);\r\n });\r\n } catch\n```;\n\n[snippet 31] (filepath: server\\test\\testCors.js):\n```\nconst axios = require('axios');\r\n\r\n// Please replace with your SERVER_URL\r\nconst SERVER_URL = \"http://alex.shinestu.com:4000\";\r\n\r\naxios.get(SERVER_URL + '/headers')\r\n .then(response => {\r\n console.log(\"Headers:\", response.data);\r\n })\r\n .catch(error => {\r\n console.error(\"Error:\", error);\r\n });\n```;\n\n[snippet 32] (filepath: client\\src\\components\\UserProfile.js):\n```\n// client\\src\\components\\UserProfile.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {getUserId} from \"../utilities/Utilities\";\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst UserProfile = () => {\r\n const [user, setUser] = useState(null);\r\n const [items, setItems] = useState([]);\r\n\r\n \r\n\r\n // Define rechargeAmount and setRechargeAmount\r\n const [rechargeAmount, setRechargeAmount] = useState(0)\r\n const recharge = async (amount) => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n const response = await axios.post(SERVER_URL+\"/users/recharge/\" + getUserId(auth_token), { rechargeValue: amount }, {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n if(response.data.message === 'Recharge successful') {\r\n console.log('测试-充值成功')\r\n setUser(prevUser => ({...prevUser, currency: { value: response.data.value }}));\r\n getUser();\r\n }\r\n } catch (error) {\r\n console.error('充值失败',error.response);\r\n }\r\n };\r\n\r\n // Get user info\r\n const getUser = async () => {\r\n try {\r\n const auth_token =\n```;\n\n[snippet 33] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ne.preventDefault();\r\n\r\n if (auth_token) {\r\n postOffer();\r\n\r\n toast.success('Offer sent!');\r\n } else {\r\n toast.error('Please log in to make offer.');\r\n }\r\n }\r\n\r\n function handleAddBtn(itemId) {\r\n const includedItem = forItemsExc.find(item => item._id === itemId);\r\n setForItems([...forItems, includedItem]);\r\n\r\n const newForExcArray = forItemsExc.filter(item => item._id !== itemId);\r\n setForItemsExc(newForExcArray);\r\n }\r\n\r\n function handleDeleteBtn(itemId) {\r\n const excludedItem = forItems.find(item => item._id === itemId);\r\n setForItemsExc([...forItemsExc, excludedItem]);\r\n\r\n const newForArray = forItems.filter(item => item._id !== itemId);\r\n setForItems(newForArray);\r\n }\r\n\r\n return (\r\n <div>\r\n <div className=\"trade-offer-container\">\r\n <h2>[H]ave: </h2>\r\n <ul>\r\n {tradeData.have.map((item, index) => (\r\n <li key={index}>\r\n {`${item.knife} | ${item.finish} (${item.wear})`}\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <h2>[W]ant: </h2>\r\n <ul>\r\n {tradeData.want.map((item, index) => (\r\n <li key={index}>\r\n {item.knife} | {item.finish} ({item.wear})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div\n```;\n\n[snippet 34] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"accepted\",\r\n acceptedAt: currentTime()\r\n })\r\n });\r\n\r\n if (!offerResponse.ok) {\r\n throw new Error('Offer update request failed.');\r\n }\r\n\r\n // Fetch updated offer data and set it in your state\r\n const newDataResponse = await fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n if (!newDataResponse.ok) {\r\n throw new Error('Fetching updated offer data failed.');\r\n }\r\n\r\n const newData = await newDataResponse.json();\r\n setOfferData(newData);\r\n } catch (error) {\r\n console.error(\"Error: \", error);\r\n }\r\n };\r\n\r\n return (\r\n <div className=\"offer-grid-container\">\r\n <div className=\"incoming-tab\">\r\n <IncomingOffers data={offerData.tradeOffers} onDeclineOffer={handleDeclineOffer}\r\n onAcceptOffer={handleAcceptOffer}/>\r\n </div>\r\n <div className=\"outgoing-tab\">\r\n <OutgoingOffers data={offerData.associatedTrades}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 35] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nrouter.get('/:_id', async(req, res) => {\r\n const id = req.params._id;\r\n\r\n try {\r\n const trade = await Trade.find({_id: id});\r\n res.json(trade);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.'})\r\n }\r\n});\r\n\r\nfunction sendEventsToAll(newData) {\r\n clients.forEach(client => client.response.write(`data: ${JSON.stringify(newData)}\\n\\n`))\r\n}\r\n\r\nrouter.post('/new', auth, addTrade);\r\n\r\nasync function addTrade(request, response, next) {\r\n const newTrade = request.body;\r\n\r\n try {\r\n const tradeDocument = new Trade(newTrade);\r\n const savedTrade = await tradeDocument.save();\r\n\r\n const tradeId = savedTrade._id;\r\n\r\n const userId = newTrade.userId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdTrades: tradeId } });\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n response.json(savedTrade);\r\n } catch (error) {\n```;\n\n[snippet 36] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"declined\"\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n // After successfully updating the status, fetch the updated data\r\n return fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n })\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the updated data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n const handleAcceptOffer = async (tradeId, offerId) => {\r\n try {\r\n const tradeResponse = await fetch(SERVER_URL+`/trades/update/${tradeId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n acceptedOffer: offerId,\r\n tradeStatus: \"inactive\"\r\n })\r\n });\r\n\r\n if (!tradeResponse.ok) {\r\n throw new Error('Trade update request failed.');\r\n }\r\n\r\n const offerResponse = await fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 37] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\nimport React, {useState,useContext} from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\nimport { Navigate } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nexport default function BlindBox() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n const [isLoading, setIsLoading] = useState(false);\r\n // client/src/pages/BlindBox.jsx\r\n const [openedItem, setOpenedItem] = useState(null);\r\n \r\n const openBox = async () => {\r\n setIsLoading(true);\r\n try {\r\n const response = await fetch(`${SERVER_URL}/api/boxes/openbox`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': sessionStorage.getItem('auth_token'),\r\n },\r\n });\r\n const data = await response.json();\r\n if (response.ok) {\r\n setOpenedItem(data.item); // 保存开出的物品信息\r\n toast.success(`恭喜你获得了：${data.item.itemName}`);\r\n } else {\r\n toast.error(data.message);\r\n }\r\n } catch (error) {\r\n console.error(error);\r\n toast.error('网络错误，请稍后再试');\r\n } finally {\r\n setIsLoading(false);\r\n }\r\n };\r\n // 如果用户未登录，则重定向到登录页面\r\n if\n```;\n\n[snippet 38] (filepath: server\\routes\\userRoutes.js):\n```\n'Secure Api Tested'\r\n });\r\n } catch (e) {\r\n res.send({ msg: \"Error in Fetching user\" });\r\n }\r\n});\r\n\r\nconsole.log('/profile请求路由设置')\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 39] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nclassName=\"down-arrow\">&darr;</div>\r\n\r\n <div className=\"your-offer-container\">\r\n <form onSubmit={handleSubmit}>\r\n\r\n <h2>Your offer: </h2>\r\n <fieldset>\r\n <legend><b>Offer</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item)}/>\r\n\r\n <div className=\"have-header\"><i>You are offering ...</i></div>\r\n\r\n <ItemList items={haveItems} onDeleteItem={(itemId) => handleDeleteItem(itemId)}/>\r\n\r\n </fieldset>\r\n <div className=\"offer-for-items\">\r\n <h2>For:</h2>\r\n <ul>\r\n {forItems.length > 0 ? (\r\n forItems.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} ({item.wear})\r\n {forItems.length > 1 ? (\r\n <button className=\"delete-btn\"\r\n onClick={() => handleDeleteBtn(item._id)}> - </button>\r\n ) : null}\r\n </li>\r\n ))\r\n ) : null}\r\n </ul>\r\n </div>\r\n\r\n {forItemsExc.length > 0 ? (\r\n <div classname=\"offer-exc-items\">\r\n <h2>Excluded:</h2>\r\n <ul>\r\n {forItemsExc.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} {item.wear}\r\n <button className=\"add-btn\" onClick={() => handleAddBtn(item._id)}> +</button>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n ) : null}\r\n\r\n <button\n```;\n\n[snippet 40] (filepath: client\\src\\App.js):\n```\nelement={<Login/>}/>\r\n <Route path='/register' element={<Register/>}/> {/* 新增 */}\r\n <Route path='offers/:_id' element={<MakeOffer/>}/>\r\n <Route path='/profile' element={<UserProfile/>}/> {/* Add this line */}\r\n <Route\r\n path=\"/blindbox\"\r\n element= {<BlindBox />} />\r\n \r\n </Routes>\r\n </AuthProvider>\r\n </Router>\r\n \r\n );\r\n}\n```;\n\n[snippet 41] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n'application/json'\r\n }\r\n });\r\n \r\n if (response.status !== 200) {\r\n error.innerHTML = response.data.msg;\r\n } else {\r\n sessionStorage.setItem('auth_token', response.data.token);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n authContext.login();\r\n console.log('测试-authContext',authContext)\r\n redirect(response.data.token);\r\n }\r\n } catch (err) {\r\n if (err.response) {\r\n // 当响应状态码超出2xx范围时执行\r\n console.log(err.response.data);\r\n error.innerHTML = err.response.data.msg;\r\n } else if (err.request) {\r\n // 请求已发出但未收到响应时执行\r\n console.log(err.request);\r\n } else {\r\n // 在设置请求时触发了某些问题时执行\r\n console.log('Error', err.message);\r\n }\r\n }\r\n };\r\n\r\n const navigate = useNavigate();\r\n\r\n async function redirect(token) {\r\n const decoded = jwtDecode(token);\r\n const userId = decoded.user.id;\r\n\r\n const userResponse = await fetch(`${SERVER_URL}/users/${userId}`, {\r\n method: 'GET',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n }\r\n });\r\n\r\n if (userResponse.status === 200) {\r\n navigate('/');\r\n } else {\r\n console.log('Error retrieving data.')\r\n }\r\n }\r\n\r\n return (\r\n <div className=\"login-form-container\">\n```;\n\n[snippet 42] (filepath: client\\src\\objects\\commonObjects.js):\n```\nexport const itemsData = {\r\n wears: ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'],\r\n knives: [\r\n 'Bayonet', 'Bowie Knife', 'Butterfly Knife', 'Classic Knife',\r\n 'Falchion Knife', 'Flip Knife', 'Gut Knife', 'Huntsman Knife',\r\n 'Karambit', 'M9 Bayonet', 'Navaja Knife', 'Nomad Knife',\r\n 'Paracord Knife', 'Shadow Daggers', 'Skeleton Knife',\r\n 'Stiletto Knife', 'Survival Knife', 'Talon Knife', 'Ursus Knife'\r\n ],\r\n finishes: [\r\n \"Vanilla\", \"Safari Mesh\", \"Urban Masked\", \"Scorched\", \"Boreal Forest\", \"Stained\",\r\n \"Blue Steel\", \"Night\", \"Forest DDPAT\", \"Crimson Web\", \"Slaughter\", \"Fade\", \"Rust Coat\",\r\n \"Ultraviolet\", \"Damascus Steel\", \"Tiger Tooth\", \"Doppler (Phase 1)\", \"Doppler (Phase 2)\",\r\n \"Doppler (Phase 3)\", \"Doppler (Phase 4)\", \"Doppler (Ruby)\", \"Doppler (Sapphire)\",\r\n \"Doppler (Black Pearl)\", \"Marble Fade\", \"Freehand\", \"Bright Water\", \"Black Laminate\",\r\n \"Autotronic\", \"Lore\", \"Gamma Doppler (Phase 1)\", \"Gamma Doppler (Phase 2)\",\r\n \"Gamma Doppler (Phase 3)\", \"Gamma Doppler (Phase 4)\", \"Gamma Doppler (Emerald)\",\r\n \"Case Hardened\"\r\n ]\r\n};\r\n\r\nexport const wearDictionary = {\r\n 'Factory\n```;\n\n[snippet 43] (filepath: server\\schemas\\Item.js):\n```\n// server/schemas/Item.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst ItemSchema = new mongoose.Schema({\r\n itemName: String,\r\n rarity: String,\r\n // 新增或确认其他相关字段\r\n wear: String,\r\n knife: String,\r\n finish: String,\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Item\", ItemSchema);\n```;\n\n[snippet 44] (filepath: client\\src\\context\\AuthContext.js):\n```\n// client\\src\\context\\AuthContext.js\r\nimport { createContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthContext = createContext({\r\n isAuthenticated: false, // 提供一个初始值\r\n login: () => {},\r\n logout: () => {},\r\n registerUser: () => Promise.resolve(),\r\n});\r\n\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{ registerUser }}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default AuthContext;\n```;\n\n[snippet 45] (filepath: client\\src\\context\\AuthProvider.js):\n```\n// client\\src\\context\\AuthProvider.js\r\nimport React, { useState } from 'react';\r\nimport AuthContext from \"./AuthContext\";\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthProvider = ({children}) => {\r\n const [isAuthenticated, setIsAuthenticated] = useState(\r\n sessionStorage.getItem('isAuthenticated') === 'true'\r\n );\r\n\r\n const login = () => {\r\n setIsAuthenticated(true);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n };\r\n\r\n const logout = () => {\r\n setIsAuthenticated(false);\r\n sessionStorage.setItem('isAuthenticated', 'false');\r\n // 清除其他相关sessionStorage项，比如auth-token等\r\n sessionStorage.removeItem('auth_token');\r\n };\r\n\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n return res\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{isAuthenticated, login, logout, registerUser}}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default\n```;\n\n[snippet 46] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"outgoing-component\">\r\n <h2>Outgoing Offers &uarr;</h2>\r\n\r\n {data.map((entry) => (\r\n <div key={entry.offer._id} className=\"outgoing-item\">\r\n <div className=\"offered\">\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>You Offered:</b></span>\r\n <span className=\"status\"><b>status:</b> <i>{entry.offer.status}</i></span>\r\n </div>\r\n <ul>\r\n {entry.offer.offered.map((offerItem) => (\r\n <li key={offerItem._id}>{`${offerItem.knife} ${offerItem.finish} (${convertWear(offerItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>For:</b></span>\r\n </div>\r\n\r\n <ul>\r\n {entry.offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n <ul>\r\n {entry.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <span\n```;\n\n[snippet 47] (filepath: server\\schemas\\User.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst UserSchema = mongoose.Schema({\r\n username: {\r\n type: String,\r\n required: true\r\n },\r\n password: {\r\n type: String,\r\n required: true\r\n },\r\n createdTrades: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n }],\r\n createdOffers: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }],\r\n // 新增\r\n currency: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Currency\"\r\n },\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n\r\n});\r\n\r\nmodule.exports = mongoose.model(\"User\", UserSchema);\n```;\n\n[snippet 48] (filepath: client\\src\\objects\\commonObjects.js):\n```\nNew': 'FN',\r\n 'Minimal Wear': 'MW',\r\n 'Field-Tested': 'FT',\r\n 'Well-Worn': 'WW',\r\n 'Battle-Scarred': 'BS'\r\n};\n```;\n\n[snippet 49] (filepath: client\\src\\pages\\Index.jsx):\n```\n(!hasRenderedOffers.current) {\r\n offerEvents = new EventSource(SERVER_URL+'/offers/all');\r\n\r\n offerEvents.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setOfferData((offerData) => offerData.concat(parsedData));\r\n };\r\n\r\n hasRenderedOffers.current = true;\r\n }\r\n\r\n return () => {\r\n if (offerEvents) {\r\n offerEvents.close();\r\n hasRenderedOffers.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n if (selectedCheckboxes.length === 0) {\r\n setFilteredData(data);\r\n return;\r\n }\r\n\r\n const filteredItems = data.filter((trade) => {\r\n const haveItems = trade.have;\r\n const wantItems = trade.want;\r\n\r\n return (\r\n haveItems.some((haveItem) => selectedCheckboxes.includes(haveItem.knife)) ||\r\n wantItems.some((wantItem) => selectedCheckboxes.includes(wantItem.knife))\r\n );\r\n });\r\n\r\n setFilteredData(filteredItems);\r\n }, [selectedCheckboxes, data]);\r\n\r\n const handleCheckboxChange = (selectedItems) => {\r\n setSelectedCheckboxes(selectedItems);\r\n };\r\n\r\n return (\r\n <div className=\"grid-container\">\r\n <div className=\"left-sidebar\">\r\n <Filter\n```;\n\n[snippet 50] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error('Error saving trade to MongoDB:', error);\r\n response.status(500).end('Internal Server Error');\r\n }\r\n}\r\n\r\nrouter.post('/update/:_id', auth, updateTrade);\r\n\r\nasync function updateTrade(request, response, next) {\r\n const tradeId = request.params._id;\r\n const tradeUpdate = request.body;\r\n\r\n try {\r\n const offerId = tradeUpdate.acceptedOffer;\r\n const newTradeStatus = tradeUpdate.tradeStatus;\r\n\r\n const updatedTrade = await Trade.findByIdAndUpdate(tradeId, { acceptedOffer: offerId, status: newTradeStatus }, { new: true });\r\n\r\n if (!updatedTrade) {\r\n return response.status(404).json({ message: 'Trade or Offer not found.' });\r\n }\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n return response.status(200).json({ message: 'Trade and Offer updated successfully', updatedTrade });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 51] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\n<p>Loading...</p>\r\n ) : error ? (\r\n <p>Error: {error.message}</p>\r\n ) : (\r\n <div className=\"offer-tab\">\r\n <MakeOfferForm tradeData={tradeData}/>\r\n </div>\r\n )}\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border:\"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 52] (filepath: client\\src\\App.js):\n```\n// client\\src\\App.js\r\nimport {BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport React, { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext';\r\nimport Navbar from './components/Navbar';\r\nimport Index from './pages/Index';\r\nimport Offers from \"./pages/Offers\";\r\nimport Create from \"./pages/Create\";\r\nimport Login from \"./pages/Login\";\r\nimport Register from \"./components/Register\";\r\nimport MakeOffer from \"./pages/MakeOffer\";\r\nimport AuthProvider from \"./context/AuthProvider\";\r\nimport UserProfile from \"./components/UserProfile\"; // Import the new component\r\n\r\nimport BlindBox from \"./pages/BlindBox\"; // 引入盲盒组件\r\n\r\nimport { withAuth } from './AuthGuard';\r\n\r\nexport default function App() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n console.log('isAuthenticated',isAuthenticated)\r\n return (\r\n\r\n <Router>\r\n <AuthProvider>\r\n <Navbar/>\r\n <Routes>\r\n <Route path='/' exact element={<Index/>}/>\r\n <Route path='/offers' element={<Offers/>}/>\r\n <Route path='/create' element={<Create/>}/>\r\n <Route path='/login'\n```;\n\n[snippet 53] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\nimport React, {useEffect, useContext} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport AuthContext from \"../../context/AuthContext\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport '../../styles/components/LoginForm.css'\r\nimport axios from 'axios'; // 确保已经引入axios\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function LoginForm() {\r\n const authContext = useContext(AuthContext);\r\n\r\n useEffect(() => {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n if (auth_token !== null) {\r\n console.log('Auth token present');\r\n redirect(auth_token);\r\n } else {\r\n console.log('No Auth token present');\r\n }\r\n }, [])\r\n\r\n const handleSubmit = async (e) => {\r\n e.preventDefault();\r\n \r\n const username = document.getElementById('username').value;\r\n const password = document.getElementById('password').value;\r\n let error = document.getElementById(\"error-text\");\r\n \r\n const requestBody = {\r\n username,\r\n password\r\n }\r\n \r\n try {\r\n const response = await axios.post(SERVER_URL+\"/users/login\", requestBody, {\r\n headers: {\r\n \"Content-Type\":\n```;\n\n[snippet 54] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"label\"><b>[W]</b>ant</span>\r\n <ul>\r\n {entry.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n </div>\r\n ))}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 55] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\n(!isAuthenticated) {\r\n return <Navigate replace to=\"/login\" />;\r\n }\r\n \r\n return (\r\n <div>\r\n {openedItem && (\r\n <div>恭喜你获得了：{openedItem.itemName}</div>\r\n )}\r\n <h2>盲盒开箱</h2>\r\n <button disabled={isLoading} onClick={openBox}>\r\n {isLoading ? '正在开箱...' : '打开盲盒'}\r\n </button>\r\n </div>\r\n );\r\n }\n```;\n\n[snippet 56] (filepath: server\\schemas\\Trade.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst TradeSchema = mongoose.Schema({\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n have: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n want: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n offers: [\r\n {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"active\", \"inactive\"],\r\n default: \"active\"\r\n },\r\n acceptedOffer: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\",\r\n default: null\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Trade\", TradeSchema);\n```;\n\n[snippet 57] (filepath: client\\src\\components\\Navbar.jsx):\n```\n{\r\n authContext.isAuthenticated ?\r\n (\r\n <>\r\n <NavLink to=\"/profile\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>个人中心</NavLink>\r\n <NavLink to=\"/login\" className=\"log-link\" onClick={handleLogout}>登出</NavLink>\r\n </>\r\n ) :\r\n (\r\n <>\r\n <NavLink to=\"/login\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>登录</NavLink>\r\n <NavLink to=\"/register\" className=\"log-link\" style={{backgroundColor: 'lightgreen', borderRadius: '5px', marginLeft: '10px'}}>注册</NavLink>\r\n </>\r\n )\r\n }\r\n </div>\r\n </header>\r\n );\r\n}\n```;\n\n[snippet 58] (filepath: server\\routes\\offerRoutes.js):\n```\nofferDocument = new Offer(newOffer);\r\n await offerDocument.save();\r\n\r\n const offerId = offerDocument._id;\r\n const userId = newOffer.userId;\r\n const tradeId = newOffer.tradeId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdOffers: offerId } });\r\n await Trade.findByIdAndUpdate(tradeId, { $push: { offers: offerId }});\r\n\r\n res.status(201).json({ message: 'Offer created successfully' });\r\n } catch (error) {\r\n console.error('Error saving offer to MongoDb:', error);\r\n res.status(500).end('Internal Server Error');\r\n }\r\n});\r\n\r\nrouter.post('/update/:_id', auth, updateOffer);\r\n\r\nasync function updateOffer(request, response, next) {\r\n const offerId = request.params._id;\r\n const offerUpdate = request.body;\r\n\r\n try {\r\n const newStatus = offerUpdate.status;\r\n\r\n let updatedOffer;\r\n\r\n if(newStatus === \"accepted\") {\r\n const newAcceptedAt = offerUpdate.acceptedAt;\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status: newStatus,\r\n acceptedAt: newAcceptedAt\r\n }, { new: true });\r\n } else if(newStatus === \"declined\") {\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status:\n```;\n\n[snippet 59] (filepath: client\\src\\components\\Register.js):\n```\n// client\\src\\components\\Register.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nconst Register = () => {\r\n const { registerUser } = useContext(AuthContext);\r\n const [username, setUsername] = useState('');\r\n const [password, setPassword] = useState('');\r\n const [message, setMessage] = useState(''); // 新增\r\n\r\nconst register = async () => {\r\n try {\r\n const response = await registerUser(username, password);\r\n\r\n if (response.status === 200) {\r\n setMessage(response.data.msg);\r\n }\r\n } catch (error) {\r\n console.log('error',error)\r\n // 检查 error 对象是否包含 response 属性\r\n if(error.response){\r\n setMessage(error.response.data.msg); // 如果服务器返回了错误信息，则显示\r\n } else {\r\n console.log(error)\r\n setMessage('An error occurred.'); // 否则显示一般错误信息\r\n }\r\n }\r\n};\r\n\r\n return (\r\n <div>\r\n <input type=\"text\" placeholder=\"用户名\" onChange={(e) => setUsername(e.target.value)} />\r\n <input type=\"password\" placeholder=\"密码\" onChange={(e) => setPassword(e.target.value)} />\r\n <button onClick={register}>注册</button>\r\n {/* 新增：显示消息 */}\r\n {message && <div>{message}</div>}\r\n </div>\n```;\n\n[snippet 60] (filepath: server\\routes\\userRoutes.js):\n```\n{\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post(\"/register\", async(req, res) => {\r\n const {username, password} = req.body;\r\n\r\n try {\r\n let user = await User.findOne({username});\r\n if(user) {\r\n return res.status(400).json({\r\n msg:\"User already exists\"\r\n });\r\n }\r\n user = new User({\r\n username,\r\n password\r\n });\r\n const s = await bcrypt.genSalt(10);\r\n user.password = await bcrypt.hash(password, s);\r\n\r\n await user.save();\r\n\r\n res.status(200).json({\r\n msg: \"User created successfully\"\r\n });\r\n } catch(error) {\r\n res.status(500).json({\r\n msg: error.message\r\n });\r\n }\r\n});\r\n\r\nrouter.post(\"/login\", async (req, res) => {\r\n const { username, password } = req.body;\r\n\r\n try {\r\n let user = await User.findOne({ username: username });\r\n\r\n if(!user) {\r\n return res.status(400).json({\r\n msg: \"Invalid username\"\r\n });\r\n }\r\n\r\n const flag = await bcrypt.compare(password, user.password);\r\n if(!flag) {\r\n return res.status(400).json({\r\n msg: \"Invalid password\"\r\n });\r\n }\r\n\r\n const payload = {\r\n user: {\r\n id: user.id\r\n }\r\n };\r\n\r\n jwt.sign(payload, 'secret-key', {\n```;\n\n[snippet 61] (filepath: server\\schemas\\Offer.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst OfferSchema = mongoose.Schema({\r\n tradeId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n },\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n offered: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n for: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"pending\", \"accepted\", \"declined\"],\r\n default: \"pending\"\r\n },\r\n acceptedAt: {\r\n type: String,\r\n default: null\r\n }\r\n})\r\n\r\nmodule.exports = mongoose.model(\"Offer\", OfferSchema);\n```;\n\n[snippet 62] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\ndata */}\r\n <ul>\r\n {offer.offered.map((offeredItem) => (\r\n <li key={offeredItem._id}>{`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>For:</b></span>\r\n {/* Render the 'offer.for' data */}\r\n <ul>\r\n {offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n offer.status === \"pending\" ? (\r\n <div className=\"button-container\">\r\n <button className=\"action\"\r\n id=\"accept-btn\"\r\n onClick={() => onAcceptOffer(offer.tradeId, offer._id)}\r\n >Accept\r\n </button>\r\n <button\r\n className=\"action\"\r\n id=\"decline-btn\"\r\n onClick={() => onDeclineOffer(offer._id)} // Call the parent's onDeclineOffer function\r\n >\r\n Decline\r\n </button>\r\n </div>\r\n ) : (\r\n <div className=\"offer-status\">\r\n {offer.status === \"declined\" ? (\r\n <span><i>Trade Declined</i></span>\r\n ) : (\r\n <span><i>Trade Accepted</i></span>\r\n )}\r\n </div>\r\n )\r\n }\r\n </div>\r\n ))\r\n )}\r\n </div>\r\n );\r\n}\r\n\r\nexport function OutgoingOffers({data}) {\r\n return (\r\n <div\n```;\n\n[snippet 63] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nimport React from 'react';\r\nimport '../../styles/components/Activity.css'\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\n\r\nexport default function Activity({data}) {\r\n\r\n const acceptedData = data.filter((item) => item.status === 'accepted');\r\n\r\n return (\r\n <div className=\"activity\">\r\n <header>\r\n <h2>Activity</h2>\r\n </header>\r\n\r\n <table className=\"activity-table\">\r\n <thead>\r\n <th className=\"time-header\">Time</th>\r\n <th className=\"trade-header\" colSpan={3}>Trade</th>\r\n </thead>\r\n\r\n <tbody>\r\n {acceptedData.map((offer) => (\r\n <tr key={offer._id}>\r\n <td className=\"time-data\">{offer.acceptedAt}</td>\r\n\r\n <td className=\"trade-data\">\r\n {offer.offered.map((offeredItem, index, array) => (\r\n <span key={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}), `) :\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}) `)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n\r\n <td>&#x2194;</td>\r\n\r\n <td className=\"trade-data\">\r\n\r\n {offer.for.map((acceptedItem, index, array) => (\r\n <span\n```;\n\n[snippet 64] (filepath: server\\routes\\currencyRoutes.js):\n```\n// server\\routes\\currencyRoutes.js\r\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Currency = require('../schemas/Currency');\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/:userId', auth, async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.userId).populate('currency');\r\n res.json(user.currency);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 65] (filepath: client\\src\\context\\AuthProvider.js):\n```\nAuthProvider;\n```;\n\n[snippet 66] (filepath: client\\src\\utilities\\Utilities.js):\n```\nimport jwtDecode from \"jwt-decode\";\r\nimport {wearDictionary} from \"../objects/commonObjects\";\r\n\r\nexport function convertWear(wear) {\r\n return (wearDictionary[wear]);\r\n}\r\n\r\nexport function getUserId(auth_token) {\r\n const decoded = jwtDecode(auth_token);\r\n return decoded.user.id;\r\n}\r\n\r\nexport function renderOptions(options) {\r\n return options.map((option, index) => (\r\n <option key={index}>{option}</option>\r\n ));\r\n}\r\n\r\nexport function currentTime() {\r\n const now = new Date();\r\n const hours = now.getHours();\r\n const minutes = now.getMinutes();\r\n const timeFormat = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n return timeFormat;\r\n}\n```;\n\n[snippet 67] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Offer.css'\r\n\r\nexport function IncomingOffers({data, onDeclineOffer, onAcceptOffer}) {\r\n return (\r\n <div className=\"incoming-component\">\r\n <h2>Incoming Offers &darr;</h2>\r\n\r\n {data.flatMap((item) =>\r\n item.offers.map((offer) => (\r\n <div key={offer._id} className=\"incoming-item\">\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n {/* Render the 'item.trade.have' data */}\r\n <ul>\r\n {item.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>[W]</b>ant</span>\r\n {/* Render the 'item.trade.want' data */}\r\n <ul>\r\n {item.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n <div className=\"offered\">\r\n <span className=\"label\"><b>{`${offer.userId} Offered:`}</b></span>\r\n {/* Render the 'offer.offered'\n```;\n\n[snippet 68] (filepath: server\\routes\\offerRoutes.js):\n```\nnewStatus\r\n }, { new: true });\r\n }\r\n\r\n if (!updatedOffer) {\r\n return response.status(404).json({ message: 'Offer not found' });\r\n }\r\n\r\n sendEventsToAll(updatedOffer);\r\n\r\n return response.status(200).json({ message: 'Offer updated successfully', updatedOffer });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 69] (filepath: client\\src\\components\\Navbar.jsx):\n```\nimport React, {useContext} from 'react';\r\nimport {NavLink, useNavigate} from 'react-router-dom';\r\nimport AuthContext from \"../context/AuthContext\";\r\nimport '../styles/components/Navbar.css';\r\n\r\nexport default function Navbar() {\r\n const authContext = useContext(AuthContext);\r\n const navigate = useNavigate();\r\n\r\n const handleLogout = () => {\r\n sessionStorage.clear();\r\n authContext.logout();\r\n navigate('/login');\r\n };\r\n\r\n return (\r\n <header className=\"navbar\">\r\n <div className=\"navbar-logo\">\r\n <h1>BUFF</h1>\r\n </div>\r\n <nav className=\"navbar-menu\">\r\n <ul>\r\n <li>\r\n <NavLink to=\"/\" activeClassName=\"active-link\" className=\"navbar-link\" exact>\r\n Trades\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/offers\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Offers\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/create\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Create\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/blindbox\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n 盲盒\r\n </NavLink>\r\n </li>\r\n \r\n </ul>\r\n </nav>\r\n <div className=\"navbar-login-logout\">\n```;\n\n[snippet 70] (filepath: client\\README.md):\n```\n`eject`, you can't go back!**\r\n\r\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\r\n\r\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\r\n\r\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\r\n\r\n## Learn More\r\n\r\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\r\n\r\nTo learn React, check out the [React documentation](https://reactjs.org/).\r\n\r\n### Code Splitting\r\n\r\nThis section has moved here:\n```;\n\n[snippet 71] (filepath: client\\src\\components\\index\\Trades.jsx):\n```\nimport React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Trades.css';\r\n\r\nexport default function Trades({data}) {\r\n\r\n const gridItems = data.map((trade, index) => (\r\n <div key={trade._id} className=\"trade-grid-item\">\r\n\r\n <div className=\"trade-list\">\r\n <div><b>[H]</b>ave</div>\r\n <ul>\r\n {trade.have.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <div><b>[W]</b>ant</div>\r\n <ul>\r\n {trade.want.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n (trade.status === \"active\") ?\r\n (\r\n <NavLink to={`/offers/${trade._id}`} key={trade._id} className=\"navlink-offer-btn\">\r\n <div className=\"offerBtn\">Make Offer</div>\r\n </NavLink>\r\n ) :\r\n (<div className=\"completed\">Completed</div>)\r\n }\r\n </div>\r\n ));\r\n\r\n return (\r\n <div className=\"trade-grid-container\">\r\n {gridItems}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 72] (filepath: client\\src\\components\\create\\itemList\\ItemList.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../../utilities/Utilities\";\r\nimport '../../../styles/components/ItemList.css';\r\n\r\nexport default function ItemList({items, onDeleteItem}) {\r\n return (\r\n <ul className=\"item-list\">\r\n {items.map((item) => (\r\n <li key={item.id}>\r\n <Item item={item} onDelete={onDeleteItem}/>\r\n </li>\r\n ))}\r\n </ul>\r\n );\r\n}\r\n\r\nfunction Item({item, onDelete}) {\r\n let itemContent;\r\n\r\n itemContent = (\r\n <>\r\n {`${item.knife} ${item.finish} (${convertWear(item.wear)})`}\r\n </>\r\n );\r\n\r\n return (\r\n <label>\r\n {itemContent}\r\n <button className=\"delete-button\" onClick={() => onDelete(item.id)}>X</button>\r\n </label>\r\n );\r\n}\n```;\n\n[snippet 73] (filepath: client\\README.md):\n```\n# Getting Started with Create React App\r\n\r\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\r\n\r\n## Available Scripts\r\n\r\nIn the project directory, you can run:\r\n\r\n### `npm start`\r\n\r\nRuns the app in the development mode.\\\r\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\r\n\r\nThe page will reload when you make changes.\\\r\nYou may also see any lint errors in the console.\r\n\r\n### `npm test`\r\n\r\nLaunches the test runner in the interactive watch mode.\\\r\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\r\n\r\n### `npm run build`\r\n\r\nBuilds the app for production to the `build` folder.\\\r\nIt correctly bundles React in production mode and optimizes the build for the best performance.\r\n\r\nThe build is minified and the filenames include the hashes.\\\r\nYour app is ready to be deployed!\r\n\r\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\r\n\r\n### `npm run eject`\r\n\r\n**Note: this is a one-way operation. Once you\n```;\n\n[snippet 74] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\n...</i></div>\r\n <ItemList items={wantItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'wantItems')}/>\r\n </fieldset>\r\n\r\n <button type=\"submit\" id=\"submitBtn\">Create</button>\r\n </form>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 75] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\r\n\r\n### Analyzing the Bundle Size\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\r\n\r\n### Making a Progressive Web App\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\r\n\r\n### Advanced Configuration\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\r\n\r\n### Deployment\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\r\n\r\n### `npm run build` fails to minify\r\n\r\nThis section has moved here:\n```;\n\n[snippet 76] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nkey={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)}),`) :\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)})`)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n </tr>\r\n ))}\r\n </tbody>\r\n </table>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 77] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\ne.preventDefault();\r\n setWearText('');\r\n setKnifeText('');\r\n setFinishText('');\r\n onAddItem({\r\n wear: wearText,\r\n knife: knifeText,\r\n finish: finishText\r\n });\r\n }}>Add\r\n </button>\r\n </>\r\n );\r\n}\n```;\n\n[snippet 78] (filepath: client\\src\\pages\\Index.jsx):\n```\nselectedCount={selectedCheckboxes.length}\r\n onCheckboxChange={handleCheckboxChange}/>\r\n </div>\r\n <div className=\"content\">\r\n <Trades data={filteredData}/>\r\n </div>\r\n <div className=\"right-sidebar\">\r\n <Activity data={offerData}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 79] (filepath: client\\src\\AuthGuard.js):\n```\n// AuthGuard.js 示例\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext'; // 确保导入正确的上下文\r\n\r\nexport function withAuth(Component) {\r\n console.log('withAuth')\r\n return (props) => {\r\n console.log('authguard检查')\r\n const navigate = useNavigate();\r\n const authContext = useContext(AuthContext); // 使用AuthContext\r\n\r\n if (!authContext.isAuthenticated) { // 判断是否登录\r\n console.log('未登录触发authguard')\r\n navigate('/login');\r\n return null;\r\n }\r\n\r\n return <Component {...props} />;\r\n };\r\n}\n```;\n\n[snippet 80] (filepath: client\\src\\index.js):\n```\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n <React.StrictMode>\r\n <App />\r\n </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\n```;\n\n[snippet 81] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\nimport React, {useState} from 'react';\r\nimport {itemsData} from \"../../../objects/commonObjects\";\r\nimport {renderOptions} from \"../../../utilities/Utilities\";\r\n\r\nexport default function AddItem({onAddItem}) {\r\n const [wearText, setWearText] = useState('');\r\n const [knifeText, setKnifeText] = useState('');\r\n const [finishText, setFinishText] = useState('');\r\n\r\n return (\r\n <>\r\n <label>\r\n Wear\r\n <input value={wearText} type=\"text\" list=\"wearOptions\"\r\n onChange={(e) => setWearText(e.target.value)}/>\r\n <datalist id=\"wearOptions\">{renderOptions(itemsData.wears)}</datalist>\r\n </label>\r\n <label>\r\n Knife\r\n <input value={knifeText} type=\"text\" list=\"knifeOptions\"\r\n onChange={(e) => setKnifeText(e.target.value)}/>\r\n <datalist id=\"knifeOptions\">{renderOptions(itemsData.knives)}</datalist>\r\n </label>\r\n <label>\r\n Finish\r\n <input value={finishText} type=\"text\" list=\"finishOptions\"\r\n onChange={(e) => setFinishText(e.target.value)}/>\r\n <datalist id=\"finishOptions\">{renderOptions(itemsData.finishes)}</datalist>\r\n </label>\r\n\r\n <button onClick={(e) => {\n```;\n\n[snippet 82] (filepath: server\\schemas\\Currency.js):\n```\n// server\\schemas\\Currency.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst CurrencySchema = mongoose.Schema({\r\n name: {\r\n type: String,\r\n required: true\r\n },\r\n value: {\r\n type: Number,\r\n required: true\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Currency\", CurrencySchema);\n```;\n\n[snippet 83] (filepath: server\\middleware\\auth.js):\n```\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nmodule.exports = function(req, res, next) {\r\n const token = req.header(\"auth-token\");\r\n if (!token){\r\n return res.status(401).json({ msg: \"No token in header\" });\r\n }\r\n try {\r\n const decoded = jwt.verify(token, 'secret-key');\r\n req.user = decoded.user;\r\n next();\r\n } catch (err) {\r\n res.status(500).json({\r\n msg : err.message\r\n });\r\n }\r\n};\n```;\n\n[snippet 84] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nhtmlFor={`item${index}`}>{item}</label>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 85] (filepath: server\\schemas\\BlindBox.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst BlindBoxlindBoxSchema = new mongoose.Schema({\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n });\r\n\r\n module.exports = mongoose.model(\"BlindBox\", BlindBoxlindBoxSchema);\n```;\n\n[snippet 86] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ntype=\"submit\" id=\"submitOfferBtn\">Make Offer</button>\r\n </form>\r\n </div>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 87] (filepath: client\\src\\components\\Register.js):\n```\n);\r\n};\r\n\r\nexport default Register;\n```;\n\n[snippet 88] (filepath: client\\src\\reportWebVitals.js):\n```\nconst reportWebVitals = onPerfEntry => {\r\n if (onPerfEntry && onPerfEntry instanceof Function) {\r\n import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n getCLS(onPerfEntry);\r\n getFID(onPerfEntry);\r\n getFCP(onPerfEntry);\r\n getLCP(onPerfEntry);\r\n getTTFB(onPerfEntry);\r\n });\r\n }\r\n};\r\n\r\nexport default reportWebVitals;\n```;\n\n[snippet 89] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n<h2>Login</h2>\r\n <form onSubmit={handleSubmit}>\r\n <div className=\"login-elements\">\r\n <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"/>\r\n <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"/>\r\n <div className=\"error\" id=\"error-text\"></div>\r\n </div>\r\n <button className=\"login-button\">Log In</button>\r\n </form>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 90] (filepath: client\\src\\pages\\Create.jsx):\n```\nimport React from 'react';\r\nimport Creation from \"../components/create/Creation\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Create() {\r\n return (\r\n <div className=\"create\">\r\n <Creation/>\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border: \"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 91] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n```;\n\n[snippet 92] (filepath: client\\src\\App.test.js):\n```\nimport { render, screen } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n render(<App />);\r\n const linkElement = screen.getByText(/learn react/i);\r\n expect(linkElement).toBeInTheDocument();\r\n});\n```;\n\n[snippet 93] (filepath: client\\src\\pages\\Login.jsx):\n```\nimport React from 'react';\r\nimport LoginForm from \"../components/login/LoginForm\";\r\n\r\nexport default function Login() {\r\n return (\r\n <div className=\"login\">\r\n <LoginForm/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 94] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {itemsData} from \"../../objects/commonObjects\";\r\nimport '../../styles/components/Filter.css';\r\n\r\nexport default function Filter({selectedCount, onCheckboxChange}) {\r\n const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n useEffect(() => {\r\n onCheckboxChange(selectedItems);\r\n }, [selectedItems, onCheckboxChange]);\r\n\r\n const handleCheckboxChange = (index) => {\r\n const selectedItem = itemsData.knives[index];\r\n setSelectedItems((prevSelectedItems) => {\r\n if (prevSelectedItems.includes(selectedItem)) {\r\n return prevSelectedItems.filter(item => item !== selectedItem);\r\n } else {\r\n return [...prevSelectedItems, selectedItem];\r\n }\r\n });\r\n };\r\n\r\n return (\r\n <div className=\"filter\">\r\n <header>\r\n {\r\n (selectedCount > 0) ?\r\n (<h2>Filter ({selectedCount}) </h2>) :\r\n (<h2>Filter </h2>)\r\n }\r\n </header>\r\n\r\n <ul>\r\n {itemsData.knives.map((item, index) => (\r\n <li key={index}>\r\n <input\r\n type=\"checkbox\"\r\n className=\"item-checkbox\"\r\n onChange={() => handleCheckboxChange(index)}\r\n />\r\n <label\n```;\n\n[snippet 95] (filepath: client\\src\\setupTests.js):\n```\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\r\n// allows you to do things like:\r\n// expect(element).toHaveTextContent(/react/i)\r\n// learn more: https://github.com/testing-library/jest-dom\r\nimport '@testing-library/jest-dom';\n``````]"},{"type":"response","value":"<h4><b>repoKing</b>:</h4>\n根据您的需求，您想要构建一个与射击游戏服务器对接并实现交易功能的平台。下面是实现此类平台可能需要的API列表：\n\n1. 用户管理\n   - 注册：`POST /users/register`\n   - 登录：`POST /users/login`\n   - 用户信息获取：`GET /users/profile/:userId`\n   - 充值：`POST /users/recharge/:userId`\n\n2. 物品管理\n   - 获取所有物品：`GET /api/items`\n   - 添加物品：`POST /api/items/add`\n   - 批量添加物品：`POST /api/items/batchAdd`\n   - 获取用户物品详情：`GET /:userId/items`\n\n3. 交易管理\n   - 创建新交易：`POST /trades/new`\n   - 更新交易状态（比如接受或拒绝交易）：`POST /trades/update/:_id`\n   - 获取所有交易信息：`GET /trades/all`\n\n4. 盲盒功能\n   - 添加盲盒：`POST /api/boxes/add`\n   - 批量添加盲盒：`POST /api/boxes/batchAdd`\n   - 开盲盒：`POST /api/boxes/openbox`\n\n5. 报价管理\n   - 创建新报价：`POST /offers/new`\n   - 更新报价状态（比如接受或拒绝报价）：`POST /offers/update/:_id`\n   - 获取所有报价信息：`GET /offers/all`\n\n这些API为基础功能提供了支持。实际上，每个功能点可能还需要更细化的API设计，例如错误处理、数据格式定义、安全性考虑（如认证和授权）、API速率限制等。\n\n请注意，以上API仅为建议，具体设计可能根据项目需求、技术栈和团队偏好有所不同。在实施时，建议详细规划每个API的请求参数、响应结构及其业务逻辑。\n<sub>Tokens used: 65461 (P:64415+C:1046) - ¥4.84</sub>","role":"assistant","text":"根据您的需求，您想要构建一个与射击游戏服务器对接并实现交易功能的平台。下面是实现此类平台可能需要的API列表：\n\n1. 用户管理\n   - 注册：`POST /users/register`\n   - 登录：`POST /users/login`\n   - 用户信息获取：`GET /users/profile/:userId`\n   - 充值：`POST /users/recharge/:userId`\n\n2. 物品管理\n   - 获取所有物品：`GET /api/items`\n   - 添加物品：`POST /api/items/add`\n   - 批量添加物品：`POST /api/items/batchAdd`\n   - 获取用户物品详情：`GET /:userId/items`\n\n3. 交易管理\n   - 创建新交易：`POST /trades/new`\n   - 更新交易状态（比如接受或拒绝交易）：`POST /trades/update/:_id`\n   - 获取所有交易信息：`GET /trades/all`\n\n4. 盲盒功能\n   - 添加盲盒：`POST /api/boxes/add`\n   - 批量添加盲盒：`POST /api/boxes/batchAdd`\n   - 开盲盒：`POST /api/boxes/openbox`\n\n5. 报价管理\n   - 创建新报价：`POST /offers/new`\n   - 更新报价状态（比如接受或拒绝报价）：`POST /offers/update/:_id`\n   - 获取所有报价信息：`GET /offers/all`\n\n这些API为基础功能提供了支持。实际上，每个功能点可能还需要更细化的API设计，例如错误处理、数据格式定义、安全性考虑（如认证和授权）、API速率限制等。\n\n请注意，以上API仅为建议，具体设计可能根据项目需求、技术栈和团队偏好有所不同。在实施时，建议详细规划每个API的请求参数、响应结构及其业务逻辑。\n<sub>Tokens used: 65461 (P:64415+C:1046) - ¥4.84</sub>","isSelected":true},{"type":"prompt","value":"<h4><b>you</b>:</h4>\n说的不是前端和后端服务之间的api，而是我游戏数据和后端的游戏数据和服务器游戏数据之间对接的一批。","role":"user","text":"说的不是前端和后端服务之间的api，而是我游戏数据和后端的游戏数据和服务器游戏数据之间对接的一批。"},{"type":"response","value":"<h4><b>repoKing</b>:</h4>\n根据您的需求，如果需要对接游戏数据和服务器游戏数据之间的交互，您可能需要设计一系列API来实现数据的查询、更新、同步等功能。这里提供一个简化的示例代码（使用Node.js和Express），展示如何设计一个基本的API来获取游戏内物品的信息。\n\n示例代码：\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = 3000;\n\n// 假设有一个用于存储游戏物品的数组\nlet gameItems = [\n    { id: 1, name: '物品A', type: '枪械' },\n    { id: 2, name: '物品B', type: '匕首' }\n];\n\n// 获取所有游戏物品的API\napp.get('/api/gameItems', (req, res) => {\n    res.json(gameItems);\n});\n\n// 根据id获取特定游戏物品的API\napp.get('/api/gameItems/:id', (req, res) => {\n    const itemId = parseInt(req.params.id);\n    const item = gameItems.find(item => item.id === itemId);\n    if (item) {\n        res.json(item);\n    } else {\n        res.status(404).send('物品不存在');\n    }\n});\n\n// 启动服务器\napp.listen(PORT, () => {\n    console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n在上述示例中，我们创建了一个简单的Express应用，并定义了两个路由处理器来响应客户端的请求：\n\n1. `/api/gameItems`：返回游戏内所有物品的列表。\n2. `/api/gameItems/:id`：根据物品的ID返回特定的游戏物品信息。\n\n请注意，这只是一个简化示例，实际应用中，游戏物品的数据可能会存储在数据库中，您可能需要使用数据库查询来获取或更新数据。\n\n此外，如果涉及到复杂","role":"assistant","text":"根据您的需求，如果需要对接游戏数据和服务器游戏数据之间的交互，您可能需要设计一系列API来实现数据的查询、更新、同步等功能。这里提供一个简化的示例代码（使用Node.js和Express），展示如何设计一个基本的API来获取游戏内物品的信息。\n\n示例代码：\n```javascript\nconst express = require('express');\nconst app = express();\nconst PORT = 3000;\n\n// 假设有一个用于存储游戏物品的数组\nlet gameItems = [\n    { id: 1, name: '物品A', type: '枪械' },\n    { id: 2, name: '物品B', type: '匕首' }\n];\n\n// 获取所有游戏物品的API\napp.get('/api/gameItems', (req, res) => {\n    res.json(gameItems);\n});\n\n// 根据id获取特定游戏物品的API\napp.get('/api/gameItems/:id', (req, res) => {\n    const itemId = parseInt(req.params.id);\n    const item = gameItems.find(item => item.id === itemId);\n    if (item) {\n        res.json(item);\n    } else {\n        res.status(404).send('物品不存在');\n    }\n});\n\n// 启动服务器\napp.listen(PORT, () => {\n    console.log(`Server is running on http://localhost:${PORT}`);\n});\n```\n在上述示例中，我们创建了一个简单的Express应用，并定义了两个路由处理器来响应客户端的请求：\n\n1. `/api/gameItems`：返回游戏内所有物品的列表。\n2. `/api/gameItems/:id`：根据物品的ID返回特定的游戏物品信息。\n\n请注意，这只是一个简化示例，实际应用中，游戏物品的数据可能会存储在数据库中，您可能需要使用数据库查询来获取或更新数据。\n\n此外，如果涉及到复杂"},{"type":"prompt","value":"<h4><b>you</b>:</h4>\n说的不是前端和后端服务之间的api，而是我游戏数据和后端的游戏数据和服务器游戏数据之间对接的一批。","role":"user","text":"说的不是前端和后端服务之间的api，而是我游戏数据和后端的游戏数据和服务器游戏数据之间对接的一批。","fullPrompt":"You are an AI programming assistant. \nYour responses should be concise, helpful, and logical and stay relevant to user's [prompt] and [code selected].\nIf the user asks for code or technical questions, you must provide code suggestions and adhere to technical information. Most likely, assume user wants code output in [language], unless the question is generic.\n\n请使用中文回答。\n\n\n[prompt]:说的不是前端和后端服务之间的api，而是我游戏数据和后端的游戏数据和服务器游戏数据之间对接的一批。\n[language]:code-runner-output\n\n\n You can refer to this context for bigger picture. The [code selected] above is part of a repository. These are some relevant [snippets] from that repository:[```[snippet 1] (filepath: server\\test\\addTestItems.js):\n```\nconst axios = require('axios'); // 引入 axios\r\n\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000';\r\n\r\n// 随机生成物品名称和稀有度\r\nconst generateRandomItem = (index) => {\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const rarity = rarityTypes[Math.floor(Math.random() * rarityTypes.length)];\r\n const wear = wearTypes[Math.floor(Math.random() * wearTypes.length)];\r\n const knife = knifeTypes[Math.floor(Math.random() * knifeTypes.length)];\r\n const finish = finishTypes[Math.floor(Math.random() * finishTypes.length)];\r\n \r\n return { itemName: `物品${index}`, rarity, wear, knife, finish };\r\n };\r\n// 创建100个随机示例物品\r\nconst sampleItems = Array.from({ length: 100 }, (_, index) => generateRandomItem(index + 1));\r\n\r\nconst addItemsToDatabase = async () => {\r\n try {\r\n const response = await axios.post(`${SERVER_URL}/api/items/batchAdd`, sampleItems); // 修改请求的URL\n```;\n\n[snippet 2] (filepath: server\\routes\\userRoutes.js):\n```\nexpiresIn: 10000 }, (err, token) => {\r\n if (err) throw err;\r\n res.status(200).json({\r\n token,\r\n });\r\n });\r\n } catch (error) {\r\n res.status(500).json({\r\n msg: error.message\r\n })\r\n }\r\n});\r\n\r\n// server/routes/userRoutes.js 中获取用户所有物品详情的接口\r\nrouter.get('/:userId/items', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId;\r\n const user = await User.findById(userId)\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user.items);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: \"An error occurred while fetching user's items.\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.id);\r\n //req.logUser(user); // 使用中间件方法打印用户信息\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user);\r\n } catch (error) {\r\n res.status(500).json({ error: \"Failed to retrieve user\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/secure-api\", auth, async (req, res) => {\r\n try {\r\n res.json({\r\n msg :\n```;\n\n[snippet 3] (filepath: doc\\项目介绍.md):\n```\n// obsidian://open?vault=Phoenix0906_2024-02-26&file=%E8%AE%A4%E7%9F%A5%E7%AE%A1%E7%90%86%2Fmatrix%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\r\n\r\nrix项目介绍\r\n - 项目介绍\r\n - 这个项目是一个综合性的虚拟物品交易平台，专注于类似 CSGO 游戏内物品的买卖。它允许用户浏览、购买、出售游戏内的道具，如枪支和皮肤。此外，平台还引入了盲盒开箱功能，用户可以购买盲盒并打开以获得随机道具。其他关键功能包括充值提现系统和用户账户管理，确保交易的便捷性和安全性。前端采用 React 构建，后端使用 Node.js，数据库选择根据需求而定，整个平台设计注重用户体验和实时数据更新。\r\n - 我现在要替该平台加入盲盒开箱功能，告诉我步骤。\r\n - 要在该平台加入盲盒开箱功能，可以按以下步骤进行：\r\n 设计盲盒数据模型：\r\n 首先需要设计和确定盲盒的数据结构。例如，是否每个盲盒都有固定或随机的价值范围，包含哪些类型的物品等。\r\n 更新后端API：\r\n 增加一个新的数据库模型来存储盲盒信息。\r\n 创建相关的API接口，比如购买盲盒、打开盲盒等接口。\r\n 更新前端界面：\r\n 在现有的交易平台基础上，添加盲盒的购买和开箱界面，以及展示开箱结果的页面。\r\n 实现开箱逻辑：\r\n 根据设计的规则，实现随机选择盲盒内物品的逻辑。\r\n 测试：\r\n 完成以上步骤后，对新增功能进行充分测试，确保无误后发布。\n```;\n\n[snippet 4] (filepath: server\\test\\addBlindBoxesToServer.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\nconst { generateBlindBoxData } = require('./generateBlindBoxData');\r\n\r\n\r\n\r\n// 向服务器批量添加盲盒的函数\r\nasync function addBlindBoxesToServer() {\r\n let blindBoxes = [];\r\n for (let i = 0; i < 10; i++) {\r\n console.log('generateBlindBoxData');\r\n const blindBoxData = await generateBlindBoxData(i + 1); // 异步获取盲盒数据\r\n blindBoxes.push(blindBoxData);\r\n }\r\n \r\n try {\r\n console.log('url', `${SERVER_URL}/api/boxes/batchAdd`);\r\n const response = await axios.post(`${SERVER_URL}/api/boxes/batchAdd`, blindBoxes);\r\n console.log('批量添加盲盒成功', response.data);\r\n } catch (error) {\r\n console.error('批量添加盲盒失败:', error.message);\r\n }\r\n }\r\n\r\naddBlindBoxesToServer();\n```;\n\n[snippet 5] (filepath: server\\server.js):\n```\nitemRoutes);\r\n\r\nconst User = require(\"./schemas/User\");\r\nconst Trade = require(\"./schemas/Trade\");\r\nconst Offer = require(\"./schemas/Offer\");\r\nconst Item = require(\"./schemas/Item\");\r\nconst BlindBox = require(\"./schemas/BlindBox\");\r\n\r\n\r\nconst PORT = 4000;\r\n\r\nmongoose.connect(MONGOURI)\r\n .then(() => {\r\n console.log(\"Connected to MDB\");\r\n app.listen(PORT, () => {\r\n console.log(`Node is running on port ${PORT}`);\r\n });\r\n })\r\n .catch((error) => {\r\n console.log(error);\r\n });\r\n\r\n\r\nconsole.log('服务器启动 3.')\n```;\n\n[snippet 6] (filepath: server\\routes\\itemRoutes.js):\n```\n// server/routes/itemRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Item = require('../schemas/Item'); // 确保路径正确\r\n\r\n// 添加物品的API\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const { itemName, rarity, wear, knife, finish } = req.body;\r\n //console.log('测试-添加物品',req.body)\r\n const newItem = new Item({ itemName, rarity, wear, knife, finish });\r\n await newItem.save();\r\n res.json({ success: true, item: newItem });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加物品的路由\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const items = req.body; // 假设前端发送的是一个物品数组\r\n // 使用 mongoose 的 insertMany 方法批量插入数据\r\n await Item.insertMany(items);\r\n res.status(200).json({ success: true, message: \"批量添加成功\" });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 7] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\n// 生成随机物品数据并添加到服务器的函数，返回新物品的ID\r\nasync function addNewItem() {\r\n // 随机生成物品数据，取自 [snippet 5]\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const itemData = {\r\n itemName: `${knifeTypes[Math.floor(Math.random() * knifeTypes.length)]} | ${finishTypes[Math.floor(Math.random() * finishTypes.length)]}`,\r\n rarity: rarityTypes[Math.floor(Math.random() * rarityTypes.length)],\r\n wear: wearTypes[Math.floor(Math.random() * wearTypes.length)],\r\n // 其他字段根据需要添加\r\n };\r\n \r\n // 调用添加物品的API\r\n const response = await axios.post(`${SERVER_URL}/api/items/add`, itemData);\r\n return response.data.item._id; // 假定响应体中返回了新创建的物品信息\r\n }\r\n\r\n // 为每个盲盒生成物品并构造盲盒数据的函数\r\nasync function generateBlindBoxData(index) {\r\n let itemIds = [];\r\n for (let i = 0; i < 3; i++) { // 假设每个盲盒包含3个物品\n```;\n\n[snippet 8] (filepath: server\\server.js):\n```\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst user = require(\"./routes/userRoutes\");\r\nconst trade = require(\"./routes/tradeRoutes\");\r\nconst offer = require(\"./routes/offerRoutes\");\r\nconst currency = require(\"./routes/currencyRoutes\"); // 新增\r\nconst boxRoutes = require('./routes/boxRoutes');\r\nconst itemRoutes = require('./routes/itemRoutes'); \r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\napp.use(cors())\r\n\r\n// const MONGOURI = \"mongodb://csgoAdmin:pswd123@localhost:27017/csgo_trading_app\";\r\nconst MONGOURI = \"mongodb+srv://roegin:tideland@alexmongodb.wfchfom.mongodb.net/buff\";//\"mongodb://db:27017/csgo_trading_app\";\r\n// 具体添加此处\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\napp.get('/headers', (req, res) => {\r\n res.send(req.headers);\r\n});\r\n*/\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: false}));\r\n\r\napp.use(\"/users\", user);\r\napp.use(\"/trades\", trade);\r\napp.use(\"/offers\", offer);\r\napp.use(\"/currency\", currency); // 新增\r\napp.use('/api/boxes', boxRoutes); // 使用/api作为基础路径\r\napp.use('/api/items',\n```;\n\n[snippet 9] (filepath: server\\routes\\boxRoutes.js):\n```\nitems: { $each: selectedBox.items } } }, // 使用 $each 将数组中的每个元素都添加到用户的 items 字段\r\n { new: true }\r\n ).exec();\r\n\r\n // 响应成功信息，可以选择返回给客户端更多信息（例如盲盒中包含的具体物品）\r\n res.json({ success: true, message: \"盲盒开箱成功\", items: selectedBox.items });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 添加单个盲盒接口\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const blindBox = new BlindBox(req.body);\r\n await blindBox.save();\r\n res.status(201).json({ message: \"盲盒添加成功\", blindBox });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加盲盒接口\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const blindBoxes = req.body; // 预期是一个盲盒数组\r\n const result = await BlindBox.insertMany(blindBoxes);\r\n res.status(201).json({ message: \"批量添加盲盒成功\", result });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 10] (filepath: client\\src\\config.js):\n```\nlet SERVER_URL;\r\n\r\n\r\n\r\nif (process.env.BUff_ENV === 'development') {\r\n SERVER_URL = process.env.REACT_APP_DEV_SERVER_URL || \"http://localhost:4000\";\r\n console.log('SERVER_URL-development',SERVER_URL,process.env.REACT_APP_DEV_SERVER_URL,process.env.BUff_ENV)\r\n}else{\r\n SERVER_URL = process.env.REACT_APP_PROD_SERVER_URL || \"http://alex.shinestu.com:4000\";\r\n console.log('SERVER_URL-product',SERVER_URL,process.env.REACT_APP_PROD_SERVER_URL,process.env.BUff_ENV)\r\n}\r\n\r\nconsole.log('SERVER_URL',SERVER_URL,process.env.BUff_ENV)\r\n\r\nexport { SERVER_URL }; //一到两周上连,四月上旬能开出武器 //厚黑学 /资治通鉴\n```;\n\n[snippet 11] (filepath: server\\routes\\userRoutes.js):\n```\nconst express = require(\"express\");\r\nconst auth = require(\"../middleware/auth\");\r\nconst User = require(\"../schemas/User\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cors = require('cors');\r\nconst Currency = require(\"../schemas/Currency\");\r\nconst router = express.Router();\r\nrouter.use(cors());\r\n\r\nfunction logUserMiddleware(req, res, next) {\r\n req.logUser = function(user) {\r\n console.log('测试-user', user);\r\n }\r\n next();\r\n }\r\n\r\n router.use(logUserMiddleware);\r\n\r\n router.post('/recharge/:userId', auth, async (req, res) => {\r\n const userId = req.params.userId;\r\n const { rechargeValue } = req.body;\r\n //let rechargeValueNum = parseFloat(rechargeValue);\r\n \r\n // 这里应该根据你的需求来设置过滤条件\r\n if (true) {\r\n try {\r\n let user = await User.findById(userId).populate('currency');\r\n \r\n // 检查用户是否已有对应的 Currency 文档\r\n if (!user.currency) {\r\n // 如果没有，创建一个新的 Currency 文档并保存\r\n const newCurrency = new Currency({ value: 0, name: 'usd' });\r\n await newCurrency.save();\r\n \r\n // 将新创建的 Currency 文档的 _id 赋值给 user 的 currency 字段\r\n user.currency = newCurrency._id;\r\n\r\n // Save the user document back to the\n```;\n\n[snippet 12] (filepath: client\\src\\components\\UserProfile.js):\n```\nsessionStorage.getItem('auth_token');\r\n\r\n const response = await axios.get(SERVER_URL+\"/users/profile/\" + getUserId(auth_token), {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n setUser(response.data);\r\n } catch (error) {\r\n console.error('获取用户信息报错',error.response);\r\n }\r\n };\r\n\r\n // 获取用户物品信息的函数\r\n // client/src/components/UserProfile.js 中获取用户物品信息的部分\r\n const getUserItems = async () => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n // 更新请求路径以匹配服务端路由\r\n const response = await axios.get(`${SERVER_URL}/users/${getUserId(auth_token)}/items`, {\r\n headers: { 'auth-token': auth_token },\r\n });\r\n\r\n if(response.status === 200) {\r\n setItems(response.data); // 假设 setUserItems 会更新状态以展示物品列表\r\n }\r\n } catch (error) {\r\n console.error('获取用户物品信息失败', error.response);\r\n }\r\n };\r\n\r\n useEffect(() => {\r\n\r\n getUser();\r\n getUserItems();\r\n }, []); // 添加 getUser 为依赖项\r\n\r\n return (\r\n <div>\r\n {user && (\r\n <div>\r\n <h1>用户名: {user.username}</h1>\r\n {/* 展示用户余额 */}\r\n <p>账户余额: {user.currency?.value || 0}</p>\r\n\r\n {/* 充值输入和按钮 */}\r\n <input type=\"number\"\n```;\n\n[snippet 13] (filepath: server\\routes\\boxRoutes.js):\n```\n// server/routes/boxRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst authMiddleware = require('../middleware/auth'); // 调整路径以匹配你的项目结构\r\nconst BlindBox = require('../schemas/BlindBox');\r\nconst User = require('../schemas/User'); // 调整路径以匹配你的项目结构\r\nconst Item = require(\"../schemas/Item\");\r\n\r\n// server/routes/boxRoutes.js\r\nrouter.post('/openbox',authMiddleware, async (req, res) => {\r\n try {\r\n // 假设所有盲盒都有统一格式存储在BlindBox模型中\r\n const blindBoxes = await BlindBox.find({});\r\n const randomIndex = Math.floor(Math.random() * blindBoxes.length);\r\n const selectedBox = blindBoxes[randomIndex];\r\n\r\n // 从选中的盲盒中随机抽取一个物品\r\n const items = selectedBox.items; // 假设items是存储item ObjectId的数组\r\n const selectedItemIndex = Math.floor(Math.random() * items.length);\r\n // server/routes/boxRoutes.js 中 openbox 接口的修改\r\n const selectedItem = await Item.findById(items[selectedItemIndex]).exec(); // 确保 Item 已经导入\r\n\r\n //console.log('req.user',req.user)\r\n const userId = req.user.id; // 或其他方式获取当前用户ID\r\n\r\n // 更新用户物品列表，将盲盒中的所有物品添加至用户\r\n await User.findByIdAndUpdate(\r\n userId, \r\n { $push: {\n```;\n\n[snippet 14] (filepath: server\\test\\register.js):\n```\nconst axios = require('axios'); // 如果你在浏览器环境下，不需要这一行\r\n\r\nasync function registerUser(username, password) {\r\n try {\r\n const response = await axios.post(SERVER_URL+'/users/register', { // 修改为你自己的服务器地址\r\n username,\r\n password\r\n });\r\n\r\n console.log(response.data.msg); // \"User created successfully\"\r\n } catch (error) {\r\n console.error(`Error: ${error.response.data.msg}`); // \"User already exists\" 或其他错误信息\r\n }\r\n}\r\n\r\n\r\n// 使用你自己的用户名和密码调用这个函数\r\nregisterUser('wangbuai', '1234');\n```;\n\n[snippet 15] (filepath: server\\test\\addTestItems.js):\n```\nconsole.log('批量添加成功:', response.data);\r\n } catch (error) {\r\n if (error.response) {\r\n // 请求已发出，服务器响应状态码不在 2xx 范围内\r\n console.error('添加失败:', error.response.data);\r\n } else if (error.request) {\r\n // 请求已发出但未收到响应\r\n console.error('服务器未响应:', error.request);\r\n } else {\r\n // 发送请求时出现了某些问题\r\n console.error('请求错误:', error.message);\r\n }\r\n }\r\n};\r\n\r\naddItemsToDatabase();\r\n\r\n// Note: 这个脚本应该在 Node.js 环境中运行。确保你的环境中已经安装了 axios。\n```;\n\n[snippet 16] (filepath: server\\routes\\userRoutes.js):\n```\n'Secure Api Tested'\r\n });\r\n } catch (e) {\r\n res.send({ msg: \"Error in Fetching user\" });\r\n }\r\n});\r\n\r\nconsole.log('/profile请求路由设置')\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 17] (filepath: client\\src\\pages\\Offers.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {IncomingOffers, OutgoingOffers} from \"../components/offers/Offer\";\r\nimport {getUserId, currentTime} from \"../utilities/Utilities\";\r\nimport '../styles/pages/Offers.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Offers() {\r\n const [offerData, setOfferData] = useState({\r\n tradeOffers: [],\r\n associatedTrades: [],\r\n });\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n useEffect(() => {\r\n\r\n if (!auth_token) {\r\n return;\r\n }\r\n\r\n fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`)\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the new data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => console.error('Error fetching data:', error));\r\n });\r\n\r\n // Function to update the offer status and fetch updated data\r\n const handleDeclineOffer = (offerId) => {\r\n // Make a network request to update the offer status in the database\r\n fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 18] (filepath: server\\routes\\userRoutes.js):\n```\ndatabase\r\n await user.save();\r\n }else {\r\n // 获取Currency对象，更新它，然后保存\r\n let currency = await Currency.findById(user.currency._id);\r\n // Parse currency value and recharge value into floats before adding\r\n currency.value = parseFloat(currency.value) + parseFloat(rechargeValue);\r\n await currency.save();\r\n \r\n // 更新用户文档中的currency字段\r\n user = await User.findByIdAndUpdate(userId, {currency: currency._id}, {new:true}).populate('currency');\r\n }\r\n \r\n \r\n res.json({ message: 'Recharge successful', value: user.currency.value });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while recharging.' });\r\n }\r\n } else {\r\n res.status(403).json({ error: 'User is not allowed to recharge.' });\r\n }\r\n });\r\n\r\n router.get('/profile/:userId', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId; // 从URL获取用户ID\r\n console.log('/profile请求-userId',userId)\r\n\r\n const user = await User.findById(userId)\r\n .populate('currency') // 已存在的填充，用于获取货币详情\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n\r\n res.json(user);\r\n } catch (error)\n```;\n\n[snippet 19] (filepath: server\\routes\\tradeRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require(\"../schemas/Trade\");\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nlet clients = [];\r\n\r\nrouter.get('/status', (request, response) => response.json({ clients: clients.length }));\r\n\r\nrouter.get('/all', eventsHandler);\r\n\r\nasync function eventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const tradeData = await Trade.find({}).lean().exec();\r\n\r\n const tradeEventData = `data: ${JSON.stringify(tradeData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(tradeEventData);\r\n\r\n const clientId = Date.now();\r\n\r\n const newClient = {\r\n id: clientId,\r\n response\r\n };\r\n\r\n clients.push(newClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${clientId} Connection closed`);\r\n clients = clients.filter(client => client.id !== clientId);\r\n });\r\n } catch (error) {\n```;\n\n[snippet 20] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nimport React, {useReducer} from 'react';\r\nimport AddItem from \"./itemList/AddItem\";\r\nimport ItemList from \"./itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport {toast} from 'react-toastify';\r\nimport '../../styles/components/Creation.css'\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function Creation() {\r\n // Initialize two separate states and dispatch functions for each list\r\n const [haveItems, dispatchHaveItems] = useReducer(itemsReducer, []);\r\n const [wantItems, dispatchWantItems] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postTrade = () => {\r\n const haveItemsFormatted =\n```;\n\n[snippet 21] (filepath: README.md):\n```\n# Counter-Strike Item Trading Application\r\n\r\n## Description\r\nA full-stack web application that enable traders to create new trade listings and make offers on existing trade listings.\r\nOffers a comprehensive set of features including posting trades, accepting/declining incoming offers, viewing prior trading history, \r\ncompleted trade activity, and item filters.\r\n\r\n## Technologies Used\r\n- React.js\r\n- Node.js\r\n- Express.js\r\n- MongoDB\r\n\r\n## Methodology\r\n\r\n## Demonstration\n```;\n\n[snippet 22] (filepath: server\\routes\\offerRoutes.js):\n```\n(error) {\r\n console.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nfunction sendEventsToAll(newOffer) {\r\n offerClients.forEach(offerClient => offerClient.response.write(`data: ${JSON.stringify(newOffer)}\\n\\n`))\r\n}\r\n\r\nrouter.get('/:userId', async(req, res) => {\r\n const userId = req.params.userId;\r\n\r\n try {\r\n const trades = await Trade.find({ userId: userId });\r\n const tradeOffers = [];\r\n const associatedTrades = [];\r\n\r\n for (const trade of trades) {\r\n const offers = await Offer.find({ _id: { $in: trade.offers } });\r\n tradeOffers.push({ trade, offers });\r\n }\r\n\r\n const offers = await Offer.find({ userId: userId });\r\n for (const offer of offers) {\r\n const trade = await Trade.findOne({ _id: offer.tradeId });\r\n associatedTrades.push({ offer, trade });\r\n }\r\n\r\n const combinedData = {\r\n tradeOffers: tradeOffers,\r\n associatedTrades: associatedTrades,\r\n };\r\n\r\n res.json(combinedData);\r\n\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post('/new', auth, async(req, res) => {\r\n const newOffer = req.body;\r\n\r\n try {\r\n const\n```;\n\n[snippet 23] (filepath: server\\routes\\offerRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require('../schemas/Trade');\r\nconst Offer = require('../schemas/Offer');\r\nconst User = require(\"../schemas/User\");\r\n\r\nconst router = express.Router();\r\n\r\nlet offerClients = [];\r\n\r\nrouter.get('/all', offerEventsHandler);\r\n\r\nasync function offerEventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const offerData = await Offer.find({}).lean().exec();\r\n\r\n const offerEventData = `data: ${JSON.stringify(offerData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(offerEventData);\r\n\r\n const offerClientId = Date.now();\r\n\r\n const newOfferClient = {\r\n id: offerClientId,\r\n response\r\n };\r\n\r\n offerClients.push(newOfferClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${offerClientId} Connection closed`);\r\n offerClients = offerClients.filter(offerClient => offerClient.id !== offerClientId);\r\n });\r\n } catch\n```;\n\n[snippet 24] (filepath: client\\src\\pages\\Index.jsx):\n```\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport Filter from \"../components/index/Filter\";\r\nimport Trades from \"../components/index/Trades\";\r\nimport Activity from \"../components/index/Activity\";\r\nimport '../styles/pages/Index.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Index() {\r\n const [data, setData] = useState([]);\r\n const [filteredData, setFilteredData] = useState([]);\r\n const [offerData, setOfferData] = useState([]);\r\n const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\r\n const hasRendered = useRef(false);\r\n const hasRenderedOffers = useRef(false);\r\n\r\n useEffect(() => {\r\n let events = null;\r\n\r\n if (!hasRendered.current) {\r\n events = new EventSource(SERVER_URL+'/trades/all');\r\n\r\n events.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setData(parsedData);\r\n };\r\n\r\n hasRendered.current = true;\r\n }\r\n\r\n return () => {\r\n if (events) {\r\n events.close();\r\n hasRendered.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n let offerEvents = null;\r\n\r\n if\n```;\n\n[snippet 25] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nrouter.get('/:_id', async(req, res) => {\r\n const id = req.params._id;\r\n\r\n try {\r\n const trade = await Trade.find({_id: id});\r\n res.json(trade);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.'})\r\n }\r\n});\r\n\r\nfunction sendEventsToAll(newData) {\r\n clients.forEach(client => client.response.write(`data: ${JSON.stringify(newData)}\\n\\n`))\r\n}\r\n\r\nrouter.post('/new', auth, addTrade);\r\n\r\nasync function addTrade(request, response, next) {\r\n const newTrade = request.body;\r\n\r\n try {\r\n const tradeDocument = new Trade(newTrade);\r\n const savedTrade = await tradeDocument.save();\r\n\r\n const tradeId = savedTrade._id;\r\n\r\n const userId = newTrade.userId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdTrades: tradeId } });\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n response.json(savedTrade);\r\n } catch (error) {\n```;\n\n[snippet 26] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n'application/json'\r\n }\r\n });\r\n \r\n if (response.status !== 200) {\r\n error.innerHTML = response.data.msg;\r\n } else {\r\n sessionStorage.setItem('auth_token', response.data.token);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n authContext.login();\r\n console.log('测试-authContext',authContext)\r\n redirect(response.data.token);\r\n }\r\n } catch (err) {\r\n if (err.response) {\r\n // 当响应状态码超出2xx范围时执行\r\n console.log(err.response.data);\r\n error.innerHTML = err.response.data.msg;\r\n } else if (err.request) {\r\n // 请求已发出但未收到响应时执行\r\n console.log(err.request);\r\n } else {\r\n // 在设置请求时触发了某些问题时执行\r\n console.log('Error', err.message);\r\n }\r\n }\r\n };\r\n\r\n const navigate = useNavigate();\r\n\r\n async function redirect(token) {\r\n const decoded = jwtDecode(token);\r\n const userId = decoded.user.id;\r\n\r\n const userResponse = await fetch(`${SERVER_URL}/users/${userId}`, {\r\n method: 'GET',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n }\r\n });\r\n\r\n if (userResponse.status === 200) {\r\n navigate('/');\r\n } else {\r\n console.log('Error retrieving data.')\r\n }\r\n }\r\n\r\n return (\r\n <div className=\"login-form-container\">\n```;\n\n[snippet 27] (filepath: server\\routes\\userRoutes.js):\n```\n{\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post(\"/register\", async(req, res) => {\r\n const {username, password} = req.body;\r\n\r\n try {\r\n let user = await User.findOne({username});\r\n if(user) {\r\n return res.status(400).json({\r\n msg:\"User already exists\"\r\n });\r\n }\r\n user = new User({\r\n username,\r\n password\r\n });\r\n const s = await bcrypt.genSalt(10);\r\n user.password = await bcrypt.hash(password, s);\r\n\r\n await user.save();\r\n\r\n res.status(200).json({\r\n msg: \"User created successfully\"\r\n });\r\n } catch(error) {\r\n res.status(500).json({\r\n msg: error.message\r\n });\r\n }\r\n});\r\n\r\nrouter.post(\"/login\", async (req, res) => {\r\n const { username, password } = req.body;\r\n\r\n try {\r\n let user = await User.findOne({ username: username });\r\n\r\n if(!user) {\r\n return res.status(400).json({\r\n msg: \"Invalid username\"\r\n });\r\n }\r\n\r\n const flag = await bcrypt.compare(password, user.password);\r\n if(!flag) {\r\n return res.status(400).json({\r\n msg: \"Invalid password\"\r\n });\r\n }\r\n\r\n const payload = {\r\n user: {\r\n id: user.id\r\n }\r\n };\r\n\r\n jwt.sign(payload, 'secret-key', {\n```;\n\n[snippet 28] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nimport React, {useReducer, useState} from 'react';\r\nimport AddItem from \"../create/itemList/AddItem\";\r\nimport ItemList from \"../create/itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/MakeOfferForm.css'\r\nimport {toast} from 'react-toastify';\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function MakeOfferForm({tradeData}) {\r\n const [forItems, setForItems] = useState(tradeData.have);\r\n const [forItemsExc, setForItemsExc] = useState([]);\r\n const [haveItems, dispatch] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postOffer = () => {\r\n const\n```;\n\n[snippet 29] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport MakeOfferForm from '../components/makeoffer/MakeOfferForm';\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function MakeOffer() {\r\n const {_id} = useParams();\r\n const [tradeData, setTradeData] = useState({});\r\n const [loading, setLoading] = useState(true);\r\n const [error, setError] = useState(null);\r\n\r\n useEffect(() => {\r\n fetch(SERVER_URL+`/trades/${_id}`)\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Network response was not ok');\r\n }\r\n return response.json();\r\n })\r\n .then((tradeDataArray) => {\r\n if (Array.isArray(tradeDataArray) && tradeDataArray.length > 0) {\r\n setTradeData(tradeDataArray[0]);\r\n setLoading(false);\r\n } else {\r\n setError(new Error('Invalid data format.'));\r\n setLoading(false);\r\n }\r\n })\r\n .catch((error) => {\r\n setError(error);\r\n setLoading(false);\r\n });\r\n }, [_id]);\r\n\r\n return (\r\n <div>\r\n {loading ? (\n```;\n\n[snippet 30] (filepath: server\\schemas\\Item.js):\n```\n// server/schemas/Item.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst ItemSchema = new mongoose.Schema({\r\n itemName: String,\r\n rarity: String,\r\n // 新增或确认其他相关字段\r\n wear: String,\r\n knife: String,\r\n finish: String,\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Item\", ItemSchema);\n```;\n\n[snippet 31] (filepath: client\\src\\components\\UserProfile.js):\n```\n// client\\src\\components\\UserProfile.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {getUserId} from \"../utilities/Utilities\";\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst UserProfile = () => {\r\n const [user, setUser] = useState(null);\r\n const [items, setItems] = useState([]);\r\n\r\n \r\n\r\n // Define rechargeAmount and setRechargeAmount\r\n const [rechargeAmount, setRechargeAmount] = useState(0)\r\n const recharge = async (amount) => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n const response = await axios.post(SERVER_URL+\"/users/recharge/\" + getUserId(auth_token), { rechargeValue: amount }, {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n if(response.data.message === 'Recharge successful') {\r\n console.log('测试-充值成功')\r\n setUser(prevUser => ({...prevUser, currency: { value: response.data.value }}));\r\n getUser();\r\n }\r\n } catch (error) {\r\n console.error('充值失败',error.response);\r\n }\r\n };\r\n\r\n // Get user info\r\n const getUser = async () => {\r\n try {\r\n const auth_token =\n```;\n\n[snippet 32] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst itemId = await addNewItem(); // 创建物品并获取ID\r\n itemIds.push(itemId);\r\n }\r\n \r\n return {\r\n //id: index,\r\n items: itemIds, // 盲盒包含的物品ID数组\r\n // 可以添加更多盲盒属性\r\n };\r\n }\r\n\r\n module.exports = { generateBlindBoxData };\n```;\n\n[snippet 33] (filepath: client\\src\\context\\AuthContext.js):\n```\n// client\\src\\context\\AuthContext.js\r\nimport { createContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthContext = createContext({\r\n isAuthenticated: false, // 提供一个初始值\r\n login: () => {},\r\n logout: () => {},\r\n registerUser: () => Promise.resolve(),\r\n});\r\n\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{ registerUser }}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default AuthContext;\n```;\n\n[snippet 34] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\nimport React, {useState,useContext} from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\nimport { Navigate } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nexport default function BlindBox() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n const [isLoading, setIsLoading] = useState(false);\r\n // client/src/pages/BlindBox.jsx\r\n const [openedItem, setOpenedItem] = useState(null);\r\n \r\n const openBox = async () => {\r\n setIsLoading(true);\r\n try {\r\n const response = await fetch(`${SERVER_URL}/api/boxes/openbox`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': sessionStorage.getItem('auth_token'),\r\n },\r\n });\r\n const data = await response.json();\r\n if (response.ok) {\r\n setOpenedItem(data.item); // 保存开出的物品信息\r\n toast.success(`恭喜你获得了：${data.item.itemName}`);\r\n } else {\r\n toast.error(data.message);\r\n }\r\n } catch (error) {\r\n console.error(error);\r\n toast.error('网络错误，请稍后再试');\r\n } finally {\r\n setIsLoading(false);\r\n }\r\n };\r\n // 如果用户未登录，则重定向到登录页面\r\n if\n```;\n\n[snippet 35] (filepath: server\\test\\testCors.js):\n```\nconst axios = require('axios');\r\n\r\n// Please replace with your SERVER_URL\r\nconst SERVER_URL = \"http://alex.shinestu.com:4000\";\r\n\r\naxios.get(SERVER_URL + '/headers')\r\n .then(response => {\r\n console.log(\"Headers:\", response.data);\r\n })\r\n .catch(error => {\r\n console.error(\"Error:\", error);\r\n });\n```;\n\n[snippet 36] (filepath: client\\src\\App.js):\n```\nelement={<Login/>}/>\r\n <Route path='/register' element={<Register/>}/> {/* 新增 */}\r\n <Route path='offers/:_id' element={<MakeOffer/>}/>\r\n <Route path='/profile' element={<UserProfile/>}/> {/* Add this line */}\r\n <Route\r\n path=\"/blindbox\"\r\n element= {<BlindBox />} />\r\n \r\n </Routes>\r\n </AuthProvider>\r\n </Router>\r\n \r\n );\r\n}\n```;\n\n[snippet 37] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nhaveItems.map(({id, ...rest}) => rest);\r\n const wantItemsFormatted = wantItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/trades/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n userId: getUserId(auth_token),\r\n have: haveItemsFormatted,\r\n want: wantItemsFormatted\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearItemLists();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n function handleAddItemToList(itemObject, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const dispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItemFromList(itemId, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const\n```;\n\n[snippet 38] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\nimport React, {useEffect, useContext} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport AuthContext from \"../../context/AuthContext\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport '../../styles/components/LoginForm.css'\r\nimport axios from 'axios'; // 确保已经引入axios\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function LoginForm() {\r\n const authContext = useContext(AuthContext);\r\n\r\n useEffect(() => {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n if (auth_token !== null) {\r\n console.log('Auth token present');\r\n redirect(auth_token);\r\n } else {\r\n console.log('No Auth token present');\r\n }\r\n }, [])\r\n\r\n const handleSubmit = async (e) => {\r\n e.preventDefault();\r\n \r\n const username = document.getElementById('username').value;\r\n const password = document.getElementById('password').value;\r\n let error = document.getElementById(\"error-text\");\r\n \r\n const requestBody = {\r\n username,\r\n password\r\n }\r\n \r\n try {\r\n const response = await axios.post(SERVER_URL+\"/users/login\", requestBody, {\r\n headers: {\r\n \"Content-Type\":\n```;\n\n[snippet 39] (filepath: client\\src\\components\\UserProfile.js):\n```\nvalue={rechargeAmount} onChange={(e) => setRechargeAmount(e.target.value)} />\r\n <button onClick={() => recharge(rechargeAmount)}>充值</button>\r\n </div>\r\n )}\r\n <h2>我的物品列表</h2>\r\n <ul>\r\n {items.map((item, index) => (\r\n <li key={index}>{item.itemName} - {item.description}</li> // 使用 itemName 和 description 替代 itemId\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n};\r\n\r\nexport default UserProfile;\n```;\n\n[snippet 40] (filepath: client\\src\\context\\AuthProvider.js):\n```\n// client\\src\\context\\AuthProvider.js\r\nimport React, { useState } from 'react';\r\nimport AuthContext from \"./AuthContext\";\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthProvider = ({children}) => {\r\n const [isAuthenticated, setIsAuthenticated] = useState(\r\n sessionStorage.getItem('isAuthenticated') === 'true'\r\n );\r\n\r\n const login = () => {\r\n setIsAuthenticated(true);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n };\r\n\r\n const logout = () => {\r\n setIsAuthenticated(false);\r\n sessionStorage.setItem('isAuthenticated', 'false');\r\n // 清除其他相关sessionStorage项，比如auth-token等\r\n sessionStorage.removeItem('auth_token');\r\n };\r\n\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n return res\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{isAuthenticated, login, logout, registerUser}}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default\n```;\n\n[snippet 41] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error('Error saving trade to MongoDB:', error);\r\n response.status(500).end('Internal Server Error');\r\n }\r\n}\r\n\r\nrouter.post('/update/:_id', auth, updateTrade);\r\n\r\nasync function updateTrade(request, response, next) {\r\n const tradeId = request.params._id;\r\n const tradeUpdate = request.body;\r\n\r\n try {\r\n const offerId = tradeUpdate.acceptedOffer;\r\n const newTradeStatus = tradeUpdate.tradeStatus;\r\n\r\n const updatedTrade = await Trade.findByIdAndUpdate(tradeId, { acceptedOffer: offerId, status: newTradeStatus }, { new: true });\r\n\r\n if (!updatedTrade) {\r\n return response.status(404).json({ message: 'Trade or Offer not found.' });\r\n }\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n return response.status(200).json({ message: 'Trade and Offer updated successfully', updatedTrade });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 42] (filepath: client\\src\\components\\Navbar.jsx):\n```\n{\r\n authContext.isAuthenticated ?\r\n (\r\n <>\r\n <NavLink to=\"/profile\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>个人中心</NavLink>\r\n <NavLink to=\"/login\" className=\"log-link\" onClick={handleLogout}>登出</NavLink>\r\n </>\r\n ) :\r\n (\r\n <>\r\n <NavLink to=\"/login\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>登录</NavLink>\r\n <NavLink to=\"/register\" className=\"log-link\" style={{backgroundColor: 'lightgreen', borderRadius: '5px', marginLeft: '10px'}}>注册</NavLink>\r\n </>\r\n )\r\n }\r\n </div>\r\n </header>\r\n );\r\n}\n```;\n\n[snippet 43] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nhaveItemsFormatted = haveItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/offers/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n tradeId: tradeData._id,\r\n userId: getUserId(auth_token),\r\n offered: haveItemsFormatted,\r\n for: forItems\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearOffer();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n })\r\n }\r\n\r\n function clearOffer() {\r\n dispatch({\r\n type: 'cleared'\r\n });\r\n\r\n setForItems(tradeData.have);\r\n setForItemsExc([]);\r\n }\r\n\r\n function handleAddItemToList(itemObject) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItem(itemId) {\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\n```;\n\n[snippet 44] (filepath: client\\src\\App.js):\n```\n// client\\src\\App.js\r\nimport {BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport React, { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext';\r\nimport Navbar from './components/Navbar';\r\nimport Index from './pages/Index';\r\nimport Offers from \"./pages/Offers\";\r\nimport Create from \"./pages/Create\";\r\nimport Login from \"./pages/Login\";\r\nimport Register from \"./components/Register\";\r\nimport MakeOffer from \"./pages/MakeOffer\";\r\nimport AuthProvider from \"./context/AuthProvider\";\r\nimport UserProfile from \"./components/UserProfile\"; // Import the new component\r\n\r\nimport BlindBox from \"./pages/BlindBox\"; // 引入盲盒组件\r\n\r\nimport { withAuth } from './AuthGuard';\r\n\r\nexport default function App() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n console.log('isAuthenticated',isAuthenticated)\r\n return (\r\n\r\n <Router>\r\n <AuthProvider>\r\n <Navbar/>\r\n <Routes>\r\n <Route path='/' exact element={<Index/>}/>\r\n <Route path='/offers' element={<Offers/>}/>\r\n <Route path='/create' element={<Create/>}/>\r\n <Route path='/login'\n```;\n\n[snippet 45] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"outgoing-component\">\r\n <h2>Outgoing Offers &uarr;</h2>\r\n\r\n {data.map((entry) => (\r\n <div key={entry.offer._id} className=\"outgoing-item\">\r\n <div className=\"offered\">\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>You Offered:</b></span>\r\n <span className=\"status\"><b>status:</b> <i>{entry.offer.status}</i></span>\r\n </div>\r\n <ul>\r\n {entry.offer.offered.map((offerItem) => (\r\n <li key={offerItem._id}>{`${offerItem.knife} ${offerItem.finish} (${convertWear(offerItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>For:</b></span>\r\n </div>\r\n\r\n <ul>\r\n {entry.offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n <ul>\r\n {entry.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <span\n```;\n\n[snippet 46] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"accepted\",\r\n acceptedAt: currentTime()\r\n })\r\n });\r\n\r\n if (!offerResponse.ok) {\r\n throw new Error('Offer update request failed.');\r\n }\r\n\r\n // Fetch updated offer data and set it in your state\r\n const newDataResponse = await fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n if (!newDataResponse.ok) {\r\n throw new Error('Fetching updated offer data failed.');\r\n }\r\n\r\n const newData = await newDataResponse.json();\r\n setOfferData(newData);\r\n } catch (error) {\r\n console.error(\"Error: \", error);\r\n }\r\n };\r\n\r\n return (\r\n <div className=\"offer-grid-container\">\r\n <div className=\"incoming-tab\">\r\n <IncomingOffers data={offerData.tradeOffers} onDeclineOffer={handleDeclineOffer}\r\n onAcceptOffer={handleAcceptOffer}/>\r\n </div>\r\n <div className=\"outgoing-tab\">\r\n <OutgoingOffers data={offerData.associatedTrades}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 47] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\ndata */}\r\n <ul>\r\n {offer.offered.map((offeredItem) => (\r\n <li key={offeredItem._id}>{`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>For:</b></span>\r\n {/* Render the 'offer.for' data */}\r\n <ul>\r\n {offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n offer.status === \"pending\" ? (\r\n <div className=\"button-container\">\r\n <button className=\"action\"\r\n id=\"accept-btn\"\r\n onClick={() => onAcceptOffer(offer.tradeId, offer._id)}\r\n >Accept\r\n </button>\r\n <button\r\n className=\"action\"\r\n id=\"decline-btn\"\r\n onClick={() => onDeclineOffer(offer._id)} // Call the parent's onDeclineOffer function\r\n >\r\n Decline\r\n </button>\r\n </div>\r\n ) : (\r\n <div className=\"offer-status\">\r\n {offer.status === \"declined\" ? (\r\n <span><i>Trade Declined</i></span>\r\n ) : (\r\n <span><i>Trade Accepted</i></span>\r\n )}\r\n </div>\r\n )\r\n }\r\n </div>\r\n ))\r\n )}\r\n </div>\r\n );\r\n}\r\n\r\nexport function OutgoingOffers({data}) {\r\n return (\r\n <div\n```;\n\n[snippet 48] (filepath: server\\schemas\\User.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst UserSchema = mongoose.Schema({\r\n username: {\r\n type: String,\r\n required: true\r\n },\r\n password: {\r\n type: String,\r\n required: true\r\n },\r\n createdTrades: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n }],\r\n createdOffers: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }],\r\n // 新增\r\n currency: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Currency\"\r\n },\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n\r\n});\r\n\r\nmodule.exports = mongoose.model(\"User\", UserSchema);\n```;\n\n[snippet 49] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"declined\"\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n // After successfully updating the status, fetch the updated data\r\n return fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n })\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the updated data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n const handleAcceptOffer = async (tradeId, offerId) => {\r\n try {\r\n const tradeResponse = await fetch(SERVER_URL+`/trades/update/${tradeId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n acceptedOffer: offerId,\r\n tradeStatus: \"inactive\"\r\n })\r\n });\r\n\r\n if (!tradeResponse.ok) {\r\n throw new Error('Trade update request failed.');\r\n }\r\n\r\n const offerResponse = await fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 50] (filepath: client\\src\\objects\\commonObjects.js):\n```\nexport const itemsData = {\r\n wears: ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'],\r\n knives: [\r\n 'Bayonet', 'Bowie Knife', 'Butterfly Knife', 'Classic Knife',\r\n 'Falchion Knife', 'Flip Knife', 'Gut Knife', 'Huntsman Knife',\r\n 'Karambit', 'M9 Bayonet', 'Navaja Knife', 'Nomad Knife',\r\n 'Paracord Knife', 'Shadow Daggers', 'Skeleton Knife',\r\n 'Stiletto Knife', 'Survival Knife', 'Talon Knife', 'Ursus Knife'\r\n ],\r\n finishes: [\r\n \"Vanilla\", \"Safari Mesh\", \"Urban Masked\", \"Scorched\", \"Boreal Forest\", \"Stained\",\r\n \"Blue Steel\", \"Night\", \"Forest DDPAT\", \"Crimson Web\", \"Slaughter\", \"Fade\", \"Rust Coat\",\r\n \"Ultraviolet\", \"Damascus Steel\", \"Tiger Tooth\", \"Doppler (Phase 1)\", \"Doppler (Phase 2)\",\r\n \"Doppler (Phase 3)\", \"Doppler (Phase 4)\", \"Doppler (Ruby)\", \"Doppler (Sapphire)\",\r\n \"Doppler (Black Pearl)\", \"Marble Fade\", \"Freehand\", \"Bright Water\", \"Black Laminate\",\r\n \"Autotronic\", \"Lore\", \"Gamma Doppler (Phase 1)\", \"Gamma Doppler (Phase 2)\",\r\n \"Gamma Doppler (Phase 3)\", \"Gamma Doppler (Phase 4)\", \"Gamma Doppler (Emerald)\",\r\n \"Case Hardened\"\r\n ]\r\n};\r\n\r\nexport const wearDictionary = {\r\n 'Factory\n```;\n\n[snippet 51] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ne.preventDefault();\r\n\r\n if (auth_token) {\r\n postOffer();\r\n\r\n toast.success('Offer sent!');\r\n } else {\r\n toast.error('Please log in to make offer.');\r\n }\r\n }\r\n\r\n function handleAddBtn(itemId) {\r\n const includedItem = forItemsExc.find(item => item._id === itemId);\r\n setForItems([...forItems, includedItem]);\r\n\r\n const newForExcArray = forItemsExc.filter(item => item._id !== itemId);\r\n setForItemsExc(newForExcArray);\r\n }\r\n\r\n function handleDeleteBtn(itemId) {\r\n const excludedItem = forItems.find(item => item._id === itemId);\r\n setForItemsExc([...forItemsExc, excludedItem]);\r\n\r\n const newForArray = forItems.filter(item => item._id !== itemId);\r\n setForItems(newForArray);\r\n }\r\n\r\n return (\r\n <div>\r\n <div className=\"trade-offer-container\">\r\n <h2>[H]ave: </h2>\r\n <ul>\r\n {tradeData.have.map((item, index) => (\r\n <li key={index}>\r\n {`${item.knife} | ${item.finish} (${item.wear})`}\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <h2>[W]ant: </h2>\r\n <ul>\r\n {tradeData.want.map((item, index) => (\r\n <li key={index}>\r\n {item.knife} | {item.finish} ({item.wear})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div\n```;\n\n[snippet 52] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nimport React from 'react';\r\nimport '../../styles/components/Activity.css'\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\n\r\nexport default function Activity({data}) {\r\n\r\n const acceptedData = data.filter((item) => item.status === 'accepted');\r\n\r\n return (\r\n <div className=\"activity\">\r\n <header>\r\n <h2>Activity</h2>\r\n </header>\r\n\r\n <table className=\"activity-table\">\r\n <thead>\r\n <th className=\"time-header\">Time</th>\r\n <th className=\"trade-header\" colSpan={3}>Trade</th>\r\n </thead>\r\n\r\n <tbody>\r\n {acceptedData.map((offer) => (\r\n <tr key={offer._id}>\r\n <td className=\"time-data\">{offer.acceptedAt}</td>\r\n\r\n <td className=\"trade-data\">\r\n {offer.offered.map((offeredItem, index, array) => (\r\n <span key={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}), `) :\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}) `)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n\r\n <td>&#x2194;</td>\r\n\r\n <td className=\"trade-data\">\r\n\r\n {offer.for.map((acceptedItem, index, array) => (\r\n <span\n```;\n\n[snippet 53] (filepath: server\\routes\\currencyRoutes.js):\n```\n// server\\routes\\currencyRoutes.js\r\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Currency = require('../schemas/Currency');\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/:userId', auth, async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.userId).populate('currency');\r\n res.json(user.currency);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 54] (filepath: client\\src\\pages\\Index.jsx):\n```\n(!hasRenderedOffers.current) {\r\n offerEvents = new EventSource(SERVER_URL+'/offers/all');\r\n\r\n offerEvents.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setOfferData((offerData) => offerData.concat(parsedData));\r\n };\r\n\r\n hasRenderedOffers.current = true;\r\n }\r\n\r\n return () => {\r\n if (offerEvents) {\r\n offerEvents.close();\r\n hasRenderedOffers.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n if (selectedCheckboxes.length === 0) {\r\n setFilteredData(data);\r\n return;\r\n }\r\n\r\n const filteredItems = data.filter((trade) => {\r\n const haveItems = trade.have;\r\n const wantItems = trade.want;\r\n\r\n return (\r\n haveItems.some((haveItem) => selectedCheckboxes.includes(haveItem.knife)) ||\r\n wantItems.some((wantItem) => selectedCheckboxes.includes(wantItem.knife))\r\n );\r\n });\r\n\r\n setFilteredData(filteredItems);\r\n }, [selectedCheckboxes, data]);\r\n\r\n const handleCheckboxChange = (selectedItems) => {\r\n setSelectedCheckboxes(selectedItems);\r\n };\r\n\r\n return (\r\n <div className=\"grid-container\">\r\n <div className=\"left-sidebar\">\r\n <Filter\n```;\n\n[snippet 55] (filepath: server\\routes\\offerRoutes.js):\n```\nnewStatus\r\n }, { new: true });\r\n }\r\n\r\n if (!updatedOffer) {\r\n return response.status(404).json({ message: 'Offer not found' });\r\n }\r\n\r\n sendEventsToAll(updatedOffer);\r\n\r\n return response.status(200).json({ message: 'Offer updated successfully', updatedOffer });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 56] (filepath: client\\src\\utilities\\Utilities.js):\n```\nimport jwtDecode from \"jwt-decode\";\r\nimport {wearDictionary} from \"../objects/commonObjects\";\r\n\r\nexport function convertWear(wear) {\r\n return (wearDictionary[wear]);\r\n}\r\n\r\nexport function getUserId(auth_token) {\r\n const decoded = jwtDecode(auth_token);\r\n return decoded.user.id;\r\n}\r\n\r\nexport function renderOptions(options) {\r\n return options.map((option, index) => (\r\n <option key={index}>{option}</option>\r\n ));\r\n}\r\n\r\nexport function currentTime() {\r\n const now = new Date();\r\n const hours = now.getHours();\r\n const minutes = now.getMinutes();\r\n const timeFormat = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n return timeFormat;\r\n}\n```;\n\n[snippet 57] (filepath: client\\src\\components\\Register.js):\n```\n// client\\src\\components\\Register.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nconst Register = () => {\r\n const { registerUser } = useContext(AuthContext);\r\n const [username, setUsername] = useState('');\r\n const [password, setPassword] = useState('');\r\n const [message, setMessage] = useState(''); // 新增\r\n\r\nconst register = async () => {\r\n try {\r\n const response = await registerUser(username, password);\r\n\r\n if (response.status === 200) {\r\n setMessage(response.data.msg);\r\n }\r\n } catch (error) {\r\n console.log('error',error)\r\n // 检查 error 对象是否包含 response 属性\r\n if(error.response){\r\n setMessage(error.response.data.msg); // 如果服务器返回了错误信息，则显示\r\n } else {\r\n console.log(error)\r\n setMessage('An error occurred.'); // 否则显示一般错误信息\r\n }\r\n }\r\n};\r\n\r\n return (\r\n <div>\r\n <input type=\"text\" placeholder=\"用户名\" onChange={(e) => setUsername(e.target.value)} />\r\n <input type=\"password\" placeholder=\"密码\" onChange={(e) => setPassword(e.target.value)} />\r\n <button onClick={register}>注册</button>\r\n {/* 新增：显示消息 */}\r\n {message && <div>{message}</div>}\r\n </div>\n```;\n\n[snippet 58] (filepath: server\\schemas\\Trade.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst TradeSchema = mongoose.Schema({\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n have: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n want: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n offers: [\r\n {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"active\", \"inactive\"],\r\n default: \"active\"\r\n },\r\n acceptedOffer: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\",\r\n default: null\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Trade\", TradeSchema);\n```;\n\n[snippet 59] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Offer.css'\r\n\r\nexport function IncomingOffers({data, onDeclineOffer, onAcceptOffer}) {\r\n return (\r\n <div className=\"incoming-component\">\r\n <h2>Incoming Offers &darr;</h2>\r\n\r\n {data.flatMap((item) =>\r\n item.offers.map((offer) => (\r\n <div key={offer._id} className=\"incoming-item\">\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n {/* Render the 'item.trade.have' data */}\r\n <ul>\r\n {item.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>[W]</b>ant</span>\r\n {/* Render the 'item.trade.want' data */}\r\n <ul>\r\n {item.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n <div className=\"offered\">\r\n <span className=\"label\"><b>{`${offer.userId} Offered:`}</b></span>\r\n {/* Render the 'offer.offered'\n```;\n\n[snippet 60] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\n(!isAuthenticated) {\r\n return <Navigate replace to=\"/login\" />;\r\n }\r\n \r\n return (\r\n <div>\r\n {openedItem && (\r\n <div>恭喜你获得了：{openedItem.itemName}</div>\r\n )}\r\n <h2>盲盒开箱</h2>\r\n <button disabled={isLoading} onClick={openBox}>\r\n {isLoading ? '正在开箱...' : '打开盲盒'}\r\n </button>\r\n </div>\r\n );\r\n }\n```;\n\n[snippet 61] (filepath: server\\schemas\\Offer.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst OfferSchema = mongoose.Schema({\r\n tradeId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n },\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n offered: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n for: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"pending\", \"accepted\", \"declined\"],\r\n default: \"pending\"\r\n },\r\n acceptedAt: {\r\n type: String,\r\n default: null\r\n }\r\n})\r\n\r\nmodule.exports = mongoose.model(\"Offer\", OfferSchema);\n```;\n\n[snippet 62] (filepath: server\\routes\\offerRoutes.js):\n```\nofferDocument = new Offer(newOffer);\r\n await offerDocument.save();\r\n\r\n const offerId = offerDocument._id;\r\n const userId = newOffer.userId;\r\n const tradeId = newOffer.tradeId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdOffers: offerId } });\r\n await Trade.findByIdAndUpdate(tradeId, { $push: { offers: offerId }});\r\n\r\n res.status(201).json({ message: 'Offer created successfully' });\r\n } catch (error) {\r\n console.error('Error saving offer to MongoDb:', error);\r\n res.status(500).end('Internal Server Error');\r\n }\r\n});\r\n\r\nrouter.post('/update/:_id', auth, updateOffer);\r\n\r\nasync function updateOffer(request, response, next) {\r\n const offerId = request.params._id;\r\n const offerUpdate = request.body;\r\n\r\n try {\r\n const newStatus = offerUpdate.status;\r\n\r\n let updatedOffer;\r\n\r\n if(newStatus === \"accepted\") {\r\n const newAcceptedAt = offerUpdate.acceptedAt;\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status: newStatus,\r\n acceptedAt: newAcceptedAt\r\n }, { new: true });\r\n } else if(newStatus === \"declined\") {\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status:\n```;\n\n[snippet 63] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\ndispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n function clearItemLists() {\r\n dispatchHaveItems({\r\n type: 'cleared'\r\n });\r\n\r\n dispatchWantItems({\r\n type: 'cleared'\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\r\n e.preventDefault();\r\n\r\n if (auth_token) {\r\n postTrade();\r\n\r\n toast.success('Trade created!');\r\n } else {\r\n toast.error('Please log in to create a trade.');\r\n };\r\n };\r\n\r\n return (\r\n <div className=\"creation-container\">\r\n <form onSubmit={handleSubmit}>\r\n <h2>Create Trade Offer</h2>\r\n <fieldset>\r\n <legend><b>Have</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'haveItems')}/>\r\n <div className=\"have-header\"><i>You have ...</i></div>\r\n <ItemList items={haveItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'haveItems')}/>\r\n </fieldset>\r\n\r\n <div className=\"swap\">&#8645;</div>\r\n\r\n <fieldset>\r\n <legend><b>Want</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'wantItems')}/>\r\n <div className=\"want-header\"><i>You want\n```;\n\n[snippet 64] (filepath: client\\src\\components\\index\\Trades.jsx):\n```\nimport React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Trades.css';\r\n\r\nexport default function Trades({data}) {\r\n\r\n const gridItems = data.map((trade, index) => (\r\n <div key={trade._id} className=\"trade-grid-item\">\r\n\r\n <div className=\"trade-list\">\r\n <div><b>[H]</b>ave</div>\r\n <ul>\r\n {trade.have.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <div><b>[W]</b>ant</div>\r\n <ul>\r\n {trade.want.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n (trade.status === \"active\") ?\r\n (\r\n <NavLink to={`/offers/${trade._id}`} key={trade._id} className=\"navlink-offer-btn\">\r\n <div className=\"offerBtn\">Make Offer</div>\r\n </NavLink>\r\n ) :\r\n (<div className=\"completed\">Completed</div>)\r\n }\r\n </div>\r\n ));\r\n\r\n return (\r\n <div className=\"trade-grid-container\">\r\n {gridItems}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 65] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nclassName=\"down-arrow\">&darr;</div>\r\n\r\n <div className=\"your-offer-container\">\r\n <form onSubmit={handleSubmit}>\r\n\r\n <h2>Your offer: </h2>\r\n <fieldset>\r\n <legend><b>Offer</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item)}/>\r\n\r\n <div className=\"have-header\"><i>You are offering ...</i></div>\r\n\r\n <ItemList items={haveItems} onDeleteItem={(itemId) => handleDeleteItem(itemId)}/>\r\n\r\n </fieldset>\r\n <div className=\"offer-for-items\">\r\n <h2>For:</h2>\r\n <ul>\r\n {forItems.length > 0 ? (\r\n forItems.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} ({item.wear})\r\n {forItems.length > 1 ? (\r\n <button className=\"delete-btn\"\r\n onClick={() => handleDeleteBtn(item._id)}> - </button>\r\n ) : null}\r\n </li>\r\n ))\r\n ) : null}\r\n </ul>\r\n </div>\r\n\r\n {forItemsExc.length > 0 ? (\r\n <div classname=\"offer-exc-items\">\r\n <h2>Excluded:</h2>\r\n <ul>\r\n {forItemsExc.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} {item.wear}\r\n <button className=\"add-btn\" onClick={() => handleAddBtn(item._id)}> +</button>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n ) : null}\r\n\r\n <button\n```;\n\n[snippet 66] (filepath: client\\src\\context\\AuthProvider.js):\n```\nAuthProvider;\n```;\n\n[snippet 67] (filepath: server\\middleware\\auth.js):\n```\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nmodule.exports = function(req, res, next) {\r\n const token = req.header(\"auth-token\");\r\n if (!token){\r\n return res.status(401).json({ msg: \"No token in header\" });\r\n }\r\n try {\r\n const decoded = jwt.verify(token, 'secret-key');\r\n req.user = decoded.user;\r\n next();\r\n } catch (err) {\r\n res.status(500).json({\r\n msg : err.message\r\n });\r\n }\r\n};\n```;\n\n[snippet 68] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\n<p>Loading...</p>\r\n ) : error ? (\r\n <p>Error: {error.message}</p>\r\n ) : (\r\n <div className=\"offer-tab\">\r\n <MakeOfferForm tradeData={tradeData}/>\r\n </div>\r\n )}\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border:\"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 69] (filepath: client\\src\\components\\Navbar.jsx):\n```\nimport React, {useContext} from 'react';\r\nimport {NavLink, useNavigate} from 'react-router-dom';\r\nimport AuthContext from \"../context/AuthContext\";\r\nimport '../styles/components/Navbar.css';\r\n\r\nexport default function Navbar() {\r\n const authContext = useContext(AuthContext);\r\n const navigate = useNavigate();\r\n\r\n const handleLogout = () => {\r\n sessionStorage.clear();\r\n authContext.logout();\r\n navigate('/login');\r\n };\r\n\r\n return (\r\n <header className=\"navbar\">\r\n <div className=\"navbar-logo\">\r\n <h1>BUFF</h1>\r\n </div>\r\n <nav className=\"navbar-menu\">\r\n <ul>\r\n <li>\r\n <NavLink to=\"/\" activeClassName=\"active-link\" className=\"navbar-link\" exact>\r\n Trades\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/offers\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Offers\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/create\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Create\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/blindbox\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n 盲盒\r\n </NavLink>\r\n </li>\r\n \r\n </ul>\r\n </nav>\r\n <div className=\"navbar-login-logout\">\n```;\n\n[snippet 70] (filepath: client\\src\\pages\\Index.jsx):\n```\nselectedCount={selectedCheckboxes.length}\r\n onCheckboxChange={handleCheckboxChange}/>\r\n </div>\r\n <div className=\"content\">\r\n <Trades data={filteredData}/>\r\n </div>\r\n <div className=\"right-sidebar\">\r\n <Activity data={offerData}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 71] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\r\n\r\n### Analyzing the Bundle Size\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\r\n\r\n### Making a Progressive Web App\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\r\n\r\n### Advanced Configuration\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\r\n\r\n### Deployment\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\r\n\r\n### `npm run build` fails to minify\r\n\r\nThis section has moved here:\n```;\n\n[snippet 72] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nkey={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)}),`) :\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)})`)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n </tr>\r\n ))}\r\n </tbody>\r\n </table>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 73] (filepath: client\\src\\AuthGuard.js):\n```\n// AuthGuard.js 示例\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext'; // 确保导入正确的上下文\r\n\r\nexport function withAuth(Component) {\r\n console.log('withAuth')\r\n return (props) => {\r\n console.log('authguard检查')\r\n const navigate = useNavigate();\r\n const authContext = useContext(AuthContext); // 使用AuthContext\r\n\r\n if (!authContext.isAuthenticated) { // 判断是否登录\r\n console.log('未登录触发authguard')\r\n navigate('/login');\r\n return null;\r\n }\r\n\r\n return <Component {...props} />;\r\n };\r\n}\n```;\n\n[snippet 74] (filepath: client\\src\\objects\\commonObjects.js):\n```\nNew': 'FN',\r\n 'Minimal Wear': 'MW',\r\n 'Field-Tested': 'FT',\r\n 'Well-Worn': 'WW',\r\n 'Battle-Scarred': 'BS'\r\n};\n```;\n\n[snippet 75] (filepath: server\\schemas\\Currency.js):\n```\n// server\\schemas\\Currency.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst CurrencySchema = mongoose.Schema({\r\n name: {\r\n type: String,\r\n required: true\r\n },\r\n value: {\r\n type: Number,\r\n required: true\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Currency\", CurrencySchema);\n```;\n\n[snippet 76] (filepath: server\\schemas\\BlindBox.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst BlindBoxlindBoxSchema = new mongoose.Schema({\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n });\r\n\r\n module.exports = mongoose.model(\"BlindBox\", BlindBoxlindBoxSchema);\n```;\n\n[snippet 77] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\ne.preventDefault();\r\n setWearText('');\r\n setKnifeText('');\r\n setFinishText('');\r\n onAddItem({\r\n wear: wearText,\r\n knife: knifeText,\r\n finish: finishText\r\n });\r\n }}>Add\r\n </button>\r\n </>\r\n );\r\n}\n```;\n\n[snippet 78] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n```;\n\n[snippet 79] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"label\"><b>[W]</b>ant</span>\r\n <ul>\r\n {entry.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n </div>\r\n ))}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 80] (filepath: client\\src\\index.js):\n```\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n <React.StrictMode>\r\n <App />\r\n </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\n```;\n\n[snippet 81] (filepath: client\\README.md):\n```\n`eject`, you can't go back!**\r\n\r\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\r\n\r\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\r\n\r\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\r\n\r\n## Learn More\r\n\r\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\r\n\r\nTo learn React, check out the [React documentation](https://reactjs.org/).\r\n\r\n### Code Splitting\r\n\r\nThis section has moved here:\n```;\n\n[snippet 82] (filepath: client\\src\\components\\create\\itemList\\ItemList.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../../utilities/Utilities\";\r\nimport '../../../styles/components/ItemList.css';\r\n\r\nexport default function ItemList({items, onDeleteItem}) {\r\n return (\r\n <ul className=\"item-list\">\r\n {items.map((item) => (\r\n <li key={item.id}>\r\n <Item item={item} onDelete={onDeleteItem}/>\r\n </li>\r\n ))}\r\n </ul>\r\n );\r\n}\r\n\r\nfunction Item({item, onDelete}) {\r\n let itemContent;\r\n\r\n itemContent = (\r\n <>\r\n {`${item.knife} ${item.finish} (${convertWear(item.wear)})`}\r\n </>\r\n );\r\n\r\n return (\r\n <label>\r\n {itemContent}\r\n <button className=\"delete-button\" onClick={() => onDelete(item.id)}>X</button>\r\n </label>\r\n );\r\n}\n```;\n\n[snippet 83] (filepath: client\\src\\components\\Register.js):\n```\n);\r\n};\r\n\r\nexport default Register;\n```;\n\n[snippet 84] (filepath: client\\src\\reportWebVitals.js):\n```\nconst reportWebVitals = onPerfEntry => {\r\n if (onPerfEntry && onPerfEntry instanceof Function) {\r\n import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n getCLS(onPerfEntry);\r\n getFID(onPerfEntry);\r\n getFCP(onPerfEntry);\r\n getLCP(onPerfEntry);\r\n getTTFB(onPerfEntry);\r\n });\r\n }\r\n};\r\n\r\nexport default reportWebVitals;\n```;\n\n[snippet 85] (filepath: client\\README.md):\n```\n# Getting Started with Create React App\r\n\r\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\r\n\r\n## Available Scripts\r\n\r\nIn the project directory, you can run:\r\n\r\n### `npm start`\r\n\r\nRuns the app in the development mode.\\\r\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\r\n\r\nThe page will reload when you make changes.\\\r\nYou may also see any lint errors in the console.\r\n\r\n### `npm test`\r\n\r\nLaunches the test runner in the interactive watch mode.\\\r\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\r\n\r\n### `npm run build`\r\n\r\nBuilds the app for production to the `build` folder.\\\r\nIt correctly bundles React in production mode and optimizes the build for the best performance.\r\n\r\nThe build is minified and the filenames include the hashes.\\\r\nYour app is ready to be deployed!\r\n\r\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\r\n\r\n### `npm run eject`\r\n\r\n**Note: this is a one-way operation. Once you\n```;\n\n[snippet 86] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\n...</i></div>\r\n <ItemList items={wantItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'wantItems')}/>\r\n </fieldset>\r\n\r\n <button type=\"submit\" id=\"submitBtn\">Create</button>\r\n </form>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 87] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n<h2>Login</h2>\r\n <form onSubmit={handleSubmit}>\r\n <div className=\"login-elements\">\r\n <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"/>\r\n <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"/>\r\n <div className=\"error\" id=\"error-text\"></div>\r\n </div>\r\n <button className=\"login-button\">Log In</button>\r\n </form>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 88] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ntype=\"submit\" id=\"submitOfferBtn\">Make Offer</button>\r\n </form>\r\n </div>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 89] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nhtmlFor={`item${index}`}>{item}</label>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 90] (filepath: client\\src\\App.test.js):\n```\nimport { render, screen } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n render(<App />);\r\n const linkElement = screen.getByText(/learn react/i);\r\n expect(linkElement).toBeInTheDocument();\r\n});\n```;\n\n[snippet 91] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\nimport React, {useState} from 'react';\r\nimport {itemsData} from \"../../../objects/commonObjects\";\r\nimport {renderOptions} from \"../../../utilities/Utilities\";\r\n\r\nexport default function AddItem({onAddItem}) {\r\n const [wearText, setWearText] = useState('');\r\n const [knifeText, setKnifeText] = useState('');\r\n const [finishText, setFinishText] = useState('');\r\n\r\n return (\r\n <>\r\n <label>\r\n Wear\r\n <input value={wearText} type=\"text\" list=\"wearOptions\"\r\n onChange={(e) => setWearText(e.target.value)}/>\r\n <datalist id=\"wearOptions\">{renderOptions(itemsData.wears)}</datalist>\r\n </label>\r\n <label>\r\n Knife\r\n <input value={knifeText} type=\"text\" list=\"knifeOptions\"\r\n onChange={(e) => setKnifeText(e.target.value)}/>\r\n <datalist id=\"knifeOptions\">{renderOptions(itemsData.knives)}</datalist>\r\n </label>\r\n <label>\r\n Finish\r\n <input value={finishText} type=\"text\" list=\"finishOptions\"\r\n onChange={(e) => setFinishText(e.target.value)}/>\r\n <datalist id=\"finishOptions\">{renderOptions(itemsData.finishes)}</datalist>\r\n </label>\r\n\r\n <button onClick={(e) => {\n```;\n\n[snippet 92] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {itemsData} from \"../../objects/commonObjects\";\r\nimport '../../styles/components/Filter.css';\r\n\r\nexport default function Filter({selectedCount, onCheckboxChange}) {\r\n const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n useEffect(() => {\r\n onCheckboxChange(selectedItems);\r\n }, [selectedItems, onCheckboxChange]);\r\n\r\n const handleCheckboxChange = (index) => {\r\n const selectedItem = itemsData.knives[index];\r\n setSelectedItems((prevSelectedItems) => {\r\n if (prevSelectedItems.includes(selectedItem)) {\r\n return prevSelectedItems.filter(item => item !== selectedItem);\r\n } else {\r\n return [...prevSelectedItems, selectedItem];\r\n }\r\n });\r\n };\r\n\r\n return (\r\n <div className=\"filter\">\r\n <header>\r\n {\r\n (selectedCount > 0) ?\r\n (<h2>Filter ({selectedCount}) </h2>) :\r\n (<h2>Filter </h2>)\r\n }\r\n </header>\r\n\r\n <ul>\r\n {itemsData.knives.map((item, index) => (\r\n <li key={index}>\r\n <input\r\n type=\"checkbox\"\r\n className=\"item-checkbox\"\r\n onChange={() => handleCheckboxChange(index)}\r\n />\r\n <label\n```;\n\n[snippet 93] (filepath: client\\src\\pages\\Create.jsx):\n```\nimport React from 'react';\r\nimport Creation from \"../components/create/Creation\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Create() {\r\n return (\r\n <div className=\"create\">\r\n <Creation/>\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border: \"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 94] (filepath: client\\src\\pages\\Login.jsx):\n```\nimport React from 'react';\r\nimport LoginForm from \"../components/login/LoginForm\";\r\n\r\nexport default function Login() {\r\n return (\r\n <div className=\"login\">\r\n <LoginForm/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 95] (filepath: client\\src\\setupTests.js):\n```\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\r\n// allows you to do things like:\r\n// expect(element).toHaveTextContent(/react/i)\r\n// learn more: https://github.com/testing-library/jest-dom\r\nimport '@testing-library/jest-dom';\n``````]","isSelected":false},{"type":"response","value":"<h4><b>repoKing</b>:</h4>\n根据您的需求，如果是需要实现游戏数据与服务器之间的对接，涉及的API可能会更加专注于游戏数据本身的获取、更新和同步等方面。这类API通常需要与游戏的后端服务深度集成，具体的API设计会依赖于游戏的内部逻辑、数据结构以及对外提供服务的方式。以下列出了一些可能需要实现的API类型：\n\n1. **玩家数据同步API**\n   - 获取玩家当前状态：`GET /api/game/player/{playerId}/status`\n   - 更新玩家状态：`POST /api/game/player/{playerId}/updateStatus`\n\n2. **物品交易API**\n   - 查询可交易物品列表：`GET /api/game/items/tradable`\n   - 发起交易请求：`POST /api/game/trade/request`\n   - 确认交易：`POST /api/game/trade/confirm`\n\n3. **盲盒功能API**\n   - 获取盲盒列表：`GET /api/game/blindBoxes`\n   - 打开盲盒：`POST /api/game/blindBox/{boxId}/open`\n\n4. **实时数据同步API**\n   - 同步游戏世界状态：`GET /api/game/world/status`\n   - 同步玩家在游戏世界中的动作：`POST /api/game/player/{playerId}/action`\n\n请注意，以上只是一些示例API，并非具体的实现方案。真实项目中，API的设计应该基于详细的业务需求分析，包括但不限于数据安全性、访问频率控制、数据一致性保障等因素。\n\n此外，实际操作中还需要考虑客户端与服务端数据同步的策略，例如是否采用WebSocket进行实时数据通信，如何处理网络延迟和数据冲突等问题。\n<sub>Tokens used: 66373 (P:65376+C:997) - ¥4.90</sub>\n<sub>Today's total usage: ¥27.139999999999993</sub>","role":"assistant","text":"根据您的需求，如果是需要实现游戏数据与服务器之间的对接，涉及的API可能会更加专注于游戏数据本身的获取、更新和同步等方面。这类API通常需要与游戏的后端服务深度集成，具体的API设计会依赖于游戏的内部逻辑、数据结构以及对外提供服务的方式。以下列出了一些可能需要实现的API类型：\n\n1. **玩家数据同步API**\n   - 获取玩家当前状态：`GET /api/game/player/{playerId}/status`\n   - 更新玩家状态：`POST /api/game/player/{playerId}/updateStatus`\n\n2. **物品交易API**\n   - 查询可交易物品列表：`GET /api/game/items/tradable`\n   - 发起交易请求：`POST /api/game/trade/request`\n   - 确认交易：`POST /api/game/trade/confirm`\n\n3. **盲盒功能API**\n   - 获取盲盒列表：`GET /api/game/blindBoxes`\n   - 打开盲盒：`POST /api/game/blindBox/{boxId}/open`\n\n4. **实时数据同步API**\n   - 同步游戏世界状态：`GET /api/game/world/status`\n   - 同步玩家在游戏世界中的动作：`POST /api/game/player/{playerId}/action`\n\n请注意，以上只是一些示例API，并非具体的实现方案。真实项目中，API的设计应该基于详细的业务需求分析，包括但不限于数据安全性、访问频率控制、数据一致性保障等因素。\n\n此外，实际操作中还需要考虑客户端与服务端数据同步的策略，例如是否采用WebSocket进行实时数据通信，如何处理网络延迟和数据冲突等问题。\n<sub>Tokens used: 66373 (P:65376+C:997) - ¥4.90</sub>\n<sub>Today's total usage: ¥27.139999999999993</sub>","isSelected":false},{"type":"prompt","value":"<h4><b>you</b>:</h4>\n说的不是前端和后端服务之间的api，而是为了实现交易服务我游戏数据和后端的游戏数据和服务器游戏数据之间对接的api","role":"user","text":"说的不是前端和后端服务之间的api，而是为了实现交易服务我游戏数据和后端的游戏数据和服务器游戏数据之间对接的api","fullPrompt":"You are an AI programming assistant. \nYour responses should be concise, helpful, and logical and stay relevant to user's [prompt] and [code selected].\nIf the user asks for code or technical questions, you must provide code suggestions and adhere to technical information. Most likely, assume user wants code output in [language], unless the question is generic.\n\n请使用中文回答。\n\n\n[prompt]:说的不是前端和后端服务之间的api，而是为了实现交易服务我游戏数据和后端的游戏数据和服务器游戏数据之间对接的api\n[language]:code-runner-output\n\n\n You can refer to this context for bigger picture. The [code selected] above is part of a repository. These are some relevant [snippets] from that repository:[```[snippet 1] (filepath: doc\\项目介绍.md):\n```\n// obsidian://open?vault=Phoenix0906_2024-02-26&file=%E8%AE%A4%E7%9F%A5%E7%AE%A1%E7%90%86%2Fmatrix%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D\r\n\r\nrix项目介绍\r\n - 项目介绍\r\n - 这个项目是一个综合性的虚拟物品交易平台，专注于类似 CSGO 游戏内物品的买卖。它允许用户浏览、购买、出售游戏内的道具，如枪支和皮肤。此外，平台还引入了盲盒开箱功能，用户可以购买盲盒并打开以获得随机道具。其他关键功能包括充值提现系统和用户账户管理，确保交易的便捷性和安全性。前端采用 React 构建，后端使用 Node.js，数据库选择根据需求而定，整个平台设计注重用户体验和实时数据更新。\r\n - 我现在要替该平台加入盲盒开箱功能，告诉我步骤。\r\n - 要在该平台加入盲盒开箱功能，可以按以下步骤进行：\r\n 设计盲盒数据模型：\r\n 首先需要设计和确定盲盒的数据结构。例如，是否每个盲盒都有固定或随机的价值范围，包含哪些类型的物品等。\r\n 更新后端API：\r\n 增加一个新的数据库模型来存储盲盒信息。\r\n 创建相关的API接口，比如购买盲盒、打开盲盒等接口。\r\n 更新前端界面：\r\n 在现有的交易平台基础上，添加盲盒的购买和开箱界面，以及展示开箱结果的页面。\r\n 实现开箱逻辑：\r\n 根据设计的规则，实现随机选择盲盒内物品的逻辑。\r\n 测试：\r\n 完成以上步骤后，对新增功能进行充分测试，确保无误后发布。\n```;\n\n[snippet 2] (filepath: server\\routes\\userRoutes.js):\n```\nexpiresIn: 10000 }, (err, token) => {\r\n if (err) throw err;\r\n res.status(200).json({\r\n token,\r\n });\r\n });\r\n } catch (error) {\r\n res.status(500).json({\r\n msg: error.message\r\n })\r\n }\r\n});\r\n\r\n// server/routes/userRoutes.js 中获取用户所有物品详情的接口\r\nrouter.get('/:userId/items', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId;\r\n const user = await User.findById(userId)\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user.items);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: \"An error occurred while fetching user's items.\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/:id\", async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.id);\r\n //req.logUser(user); // 使用中间件方法打印用户信息\r\n if (!user) {\r\n return res.status(404).json({ error: \"User not found\" });\r\n }\r\n res.json(user);\r\n } catch (error) {\r\n res.status(500).json({ error: \"Failed to retrieve user\" });\r\n }\r\n});\r\n\r\nrouter.get(\"/secure-api\", auth, async (req, res) => {\r\n try {\r\n res.json({\r\n msg :\n```;\n\n[snippet 3] (filepath: server\\test\\addTestItems.js):\n```\nconst axios = require('axios'); // 引入 axios\r\n\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000';\r\n\r\n// 随机生成物品名称和稀有度\r\nconst generateRandomItem = (index) => {\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const rarity = rarityTypes[Math.floor(Math.random() * rarityTypes.length)];\r\n const wear = wearTypes[Math.floor(Math.random() * wearTypes.length)];\r\n const knife = knifeTypes[Math.floor(Math.random() * knifeTypes.length)];\r\n const finish = finishTypes[Math.floor(Math.random() * finishTypes.length)];\r\n \r\n return { itemName: `物品${index}`, rarity, wear, knife, finish };\r\n };\r\n// 创建100个随机示例物品\r\nconst sampleItems = Array.from({ length: 100 }, (_, index) => generateRandomItem(index + 1));\r\n\r\nconst addItemsToDatabase = async () => {\r\n try {\r\n const response = await axios.post(`${SERVER_URL}/api/items/batchAdd`, sampleItems); // 修改请求的URL\n```;\n\n[snippet 4] (filepath: server\\server.js):\n```\nitemRoutes);\r\n\r\nconst User = require(\"./schemas/User\");\r\nconst Trade = require(\"./schemas/Trade\");\r\nconst Offer = require(\"./schemas/Offer\");\r\nconst Item = require(\"./schemas/Item\");\r\nconst BlindBox = require(\"./schemas/BlindBox\");\r\n\r\n\r\nconst PORT = 4000;\r\n\r\nmongoose.connect(MONGOURI)\r\n .then(() => {\r\n console.log(\"Connected to MDB\");\r\n app.listen(PORT, () => {\r\n console.log(`Node is running on port ${PORT}`);\r\n });\r\n })\r\n .catch((error) => {\r\n console.log(error);\r\n });\r\n\r\n\r\nconsole.log('服务器启动 3.')\n```;\n\n[snippet 5] (filepath: server\\server.js):\n```\nconst express = require('express');\r\nconst cors = require('cors');\r\nconst user = require(\"./routes/userRoutes\");\r\nconst trade = require(\"./routes/tradeRoutes\");\r\nconst offer = require(\"./routes/offerRoutes\");\r\nconst currency = require(\"./routes/currencyRoutes\"); // 新增\r\nconst boxRoutes = require('./routes/boxRoutes');\r\nconst itemRoutes = require('./routes/itemRoutes'); \r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst app = express();\r\napp.use(cors())\r\n\r\n// const MONGOURI = \"mongodb://csgoAdmin:pswd123@localhost:27017/csgo_trading_app\";\r\nconst MONGOURI = \"mongodb+srv://roegin:tideland@alexmongodb.wfchfom.mongodb.net/buff\";//\"mongodb://db:27017/csgo_trading_app\";\r\n// 具体添加此处\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\napp.get('/headers', (req, res) => {\r\n res.send(req.headers);\r\n});\r\n*/\r\n\r\n\r\napp.use(express.json());\r\napp.use(express.urlencoded({extended: false}));\r\n\r\napp.use(\"/users\", user);\r\napp.use(\"/trades\", trade);\r\napp.use(\"/offers\", offer);\r\napp.use(\"/currency\", currency); // 新增\r\napp.use('/api/boxes', boxRoutes); // 使用/api作为基础路径\r\napp.use('/api/items',\n```;\n\n[snippet 6] (filepath: server\\routes\\userRoutes.js):\n```\nconst express = require(\"express\");\r\nconst auth = require(\"../middleware/auth\");\r\nconst User = require(\"../schemas/User\");\r\nconst jwt = require(\"jsonwebtoken\");\r\nconst bcrypt = require(\"bcryptjs\");\r\nconst cors = require('cors');\r\nconst Currency = require(\"../schemas/Currency\");\r\nconst router = express.Router();\r\nrouter.use(cors());\r\n\r\nfunction logUserMiddleware(req, res, next) {\r\n req.logUser = function(user) {\r\n console.log('测试-user', user);\r\n }\r\n next();\r\n }\r\n\r\n router.use(logUserMiddleware);\r\n\r\n router.post('/recharge/:userId', auth, async (req, res) => {\r\n const userId = req.params.userId;\r\n const { rechargeValue } = req.body;\r\n //let rechargeValueNum = parseFloat(rechargeValue);\r\n \r\n // 这里应该根据你的需求来设置过滤条件\r\n if (true) {\r\n try {\r\n let user = await User.findById(userId).populate('currency');\r\n \r\n // 检查用户是否已有对应的 Currency 文档\r\n if (!user.currency) {\r\n // 如果没有，创建一个新的 Currency 文档并保存\r\n const newCurrency = new Currency({ value: 0, name: 'usd' });\r\n await newCurrency.save();\r\n \r\n // 将新创建的 Currency 文档的 _id 赋值给 user 的 currency 字段\r\n user.currency = newCurrency._id;\r\n\r\n // Save the user document back to the\n```;\n\n[snippet 7] (filepath: client\\src\\components\\UserProfile.js):\n```\nsessionStorage.getItem('auth_token');\r\n\r\n const response = await axios.get(SERVER_URL+\"/users/profile/\" + getUserId(auth_token), {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n setUser(response.data);\r\n } catch (error) {\r\n console.error('获取用户信息报错',error.response);\r\n }\r\n };\r\n\r\n // 获取用户物品信息的函数\r\n // client/src/components/UserProfile.js 中获取用户物品信息的部分\r\n const getUserItems = async () => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n // 更新请求路径以匹配服务端路由\r\n const response = await axios.get(`${SERVER_URL}/users/${getUserId(auth_token)}/items`, {\r\n headers: { 'auth-token': auth_token },\r\n });\r\n\r\n if(response.status === 200) {\r\n setItems(response.data); // 假设 setUserItems 会更新状态以展示物品列表\r\n }\r\n } catch (error) {\r\n console.error('获取用户物品信息失败', error.response);\r\n }\r\n };\r\n\r\n useEffect(() => {\r\n\r\n getUser();\r\n getUserItems();\r\n }, []); // 添加 getUser 为依赖项\r\n\r\n return (\r\n <div>\r\n {user && (\r\n <div>\r\n <h1>用户名: {user.username}</h1>\r\n {/* 展示用户余额 */}\r\n <p>账户余额: {user.currency?.value || 0}</p>\r\n\r\n {/* 充值输入和按钮 */}\r\n <input type=\"number\"\n```;\n\n[snippet 8] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\n// 生成随机物品数据并添加到服务器的函数，返回新物品的ID\r\nasync function addNewItem() {\r\n // 随机生成物品数据，取自 [snippet 5]\r\n const rarityTypes = ['普通', '稀有', '罕见', '传说'];\r\n const wearTypes = ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'];\r\n const knifeTypes = ['Karambit', 'Bayonet', 'Flip Knife', 'Butterfly Knife'];\r\n const finishTypes = ['Crimson Web', 'Fade', 'Asiimov', 'Slaughter'];\r\n \r\n const itemData = {\r\n itemName: `${knifeTypes[Math.floor(Math.random() * knifeTypes.length)]} | ${finishTypes[Math.floor(Math.random() * finishTypes.length)]}`,\r\n rarity: rarityTypes[Math.floor(Math.random() * rarityTypes.length)],\r\n wear: wearTypes[Math.floor(Math.random() * wearTypes.length)],\r\n // 其他字段根据需要添加\r\n };\r\n \r\n // 调用添加物品的API\r\n const response = await axios.post(`${SERVER_URL}/api/items/add`, itemData);\r\n return response.data.item._id; // 假定响应体中返回了新创建的物品信息\r\n }\r\n\r\n // 为每个盲盒生成物品并构造盲盒数据的函数\r\nasync function generateBlindBoxData(index) {\r\n let itemIds = [];\r\n for (let i = 0; i < 3; i++) { // 假设每个盲盒包含3个物品\n```;\n\n[snippet 9] (filepath: server\\routes\\itemRoutes.js):\n```\n// server/routes/itemRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst Item = require('../schemas/Item'); // 确保路径正确\r\n\r\n// 添加物品的API\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const { itemName, rarity, wear, knife, finish } = req.body;\r\n //console.log('测试-添加物品',req.body)\r\n const newItem = new Item({ itemName, rarity, wear, knife, finish });\r\n await newItem.save();\r\n res.json({ success: true, item: newItem });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加物品的路由\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const items = req.body; // 假设前端发送的是一个物品数组\r\n // 使用 mongoose 的 insertMany 方法批量插入数据\r\n await Item.insertMany(items);\r\n res.status(200).json({ success: true, message: \"批量添加成功\" });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 10] (filepath: server\\test\\addBlindBoxesToServer.js):\n```\nconst axios = require('axios'); // 引入 axios\r\nconst SERVER_URL = 'http://alex.shinestu.com:4000'\r\nconst { generateBlindBoxData } = require('./generateBlindBoxData');\r\n\r\n\r\n\r\n// 向服务器批量添加盲盒的函数\r\nasync function addBlindBoxesToServer() {\r\n let blindBoxes = [];\r\n for (let i = 0; i < 10; i++) {\r\n console.log('generateBlindBoxData');\r\n const blindBoxData = await generateBlindBoxData(i + 1); // 异步获取盲盒数据\r\n blindBoxes.push(blindBoxData);\r\n }\r\n \r\n try {\r\n console.log('url', `${SERVER_URL}/api/boxes/batchAdd`);\r\n const response = await axios.post(`${SERVER_URL}/api/boxes/batchAdd`, blindBoxes);\r\n console.log('批量添加盲盒成功', response.data);\r\n } catch (error) {\r\n console.error('批量添加盲盒失败:', error.message);\r\n }\r\n }\r\n\r\naddBlindBoxesToServer();\n```;\n\n[snippet 11] (filepath: client\\src\\pages\\Offers.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {IncomingOffers, OutgoingOffers} from \"../components/offers/Offer\";\r\nimport {getUserId, currentTime} from \"../utilities/Utilities\";\r\nimport '../styles/pages/Offers.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Offers() {\r\n const [offerData, setOfferData] = useState({\r\n tradeOffers: [],\r\n associatedTrades: [],\r\n });\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n useEffect(() => {\r\n\r\n if (!auth_token) {\r\n return;\r\n }\r\n\r\n fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`)\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the new data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => console.error('Error fetching data:', error));\r\n });\r\n\r\n // Function to update the offer status and fetch updated data\r\n const handleDeclineOffer = (offerId) => {\r\n // Make a network request to update the offer status in the database\r\n fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 12] (filepath: server\\routes\\boxRoutes.js):\n```\nitems: { $each: selectedBox.items } } }, // 使用 $each 将数组中的每个元素都添加到用户的 items 字段\r\n { new: true }\r\n ).exec();\r\n\r\n // 响应成功信息，可以选择返回给客户端更多信息（例如盲盒中包含的具体物品）\r\n res.json({ success: true, message: \"盲盒开箱成功\", items: selectedBox.items });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ success: false, message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 添加单个盲盒接口\r\nrouter.post('/add', async (req, res) => {\r\n try {\r\n const blindBox = new BlindBox(req.body);\r\n await blindBox.save();\r\n res.status(201).json({ message: \"盲盒添加成功\", blindBox });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n// 批量添加盲盒接口\r\nrouter.post('/batchAdd', async (req, res) => {\r\n try {\r\n const blindBoxes = req.body; // 预期是一个盲盒数组\r\n const result = await BlindBox.insertMany(blindBoxes);\r\n res.status(201).json({ message: \"批量添加盲盒成功\", result });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ message: \"服务器错误\" });\r\n }\r\n});\r\n\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 13] (filepath: server\\routes\\userRoutes.js):\n```\ndatabase\r\n await user.save();\r\n }else {\r\n // 获取Currency对象，更新它，然后保存\r\n let currency = await Currency.findById(user.currency._id);\r\n // Parse currency value and recharge value into floats before adding\r\n currency.value = parseFloat(currency.value) + parseFloat(rechargeValue);\r\n await currency.save();\r\n \r\n // 更新用户文档中的currency字段\r\n user = await User.findByIdAndUpdate(userId, {currency: currency._id}, {new:true}).populate('currency');\r\n }\r\n \r\n \r\n res.json({ message: 'Recharge successful', value: user.currency.value });\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while recharging.' });\r\n }\r\n } else {\r\n res.status(403).json({ error: 'User is not allowed to recharge.' });\r\n }\r\n });\r\n\r\n router.get('/profile/:userId', auth, async (req, res) => {\r\n try {\r\n const userId = req.params.userId; // 从URL获取用户ID\r\n console.log('/profile请求-userId',userId)\r\n\r\n const user = await User.findById(userId)\r\n .populate('currency') // 已存在的填充，用于获取货币详情\r\n .populate({\r\n path: 'items', // 填充物品详情\r\n model: 'Item' // 确保 Item 模型已正确导入并使用\r\n })\r\n .exec();\r\n\r\n res.json(user);\r\n } catch (error)\n```;\n\n[snippet 14] (filepath: server\\test\\register.js):\n```\nconst axios = require('axios'); // 如果你在浏览器环境下，不需要这一行\r\n\r\nasync function registerUser(username, password) {\r\n try {\r\n const response = await axios.post(SERVER_URL+'/users/register', { // 修改为你自己的服务器地址\r\n username,\r\n password\r\n });\r\n\r\n console.log(response.data.msg); // \"User created successfully\"\r\n } catch (error) {\r\n console.error(`Error: ${error.response.data.msg}`); // \"User already exists\" 或其他错误信息\r\n }\r\n}\r\n\r\n\r\n// 使用你自己的用户名和密码调用这个函数\r\nregisterUser('wangbuai', '1234');\n```;\n\n[snippet 15] (filepath: client\\src\\config.js):\n```\nlet SERVER_URL;\r\n\r\n\r\n\r\nif (process.env.BUff_ENV === 'development') {\r\n SERVER_URL = process.env.REACT_APP_DEV_SERVER_URL || \"http://localhost:4000\";\r\n console.log('SERVER_URL-development',SERVER_URL,process.env.REACT_APP_DEV_SERVER_URL,process.env.BUff_ENV)\r\n}else{\r\n SERVER_URL = process.env.REACT_APP_PROD_SERVER_URL || \"http://alex.shinestu.com:4000\";\r\n console.log('SERVER_URL-product',SERVER_URL,process.env.REACT_APP_PROD_SERVER_URL,process.env.BUff_ENV)\r\n}\r\n\r\nconsole.log('SERVER_URL',SERVER_URL,process.env.BUff_ENV)\r\n\r\nexport { SERVER_URL }; //一到两周上连,四月上旬能开出武器 //厚黑学 /资治通鉴\n```;\n\n[snippet 16] (filepath: server\\routes\\boxRoutes.js):\n```\n// server/routes/boxRoutes.js\r\nconst express = require('express');\r\nconst router = express.Router();\r\nconst authMiddleware = require('../middleware/auth'); // 调整路径以匹配你的项目结构\r\nconst BlindBox = require('../schemas/BlindBox');\r\nconst User = require('../schemas/User'); // 调整路径以匹配你的项目结构\r\nconst Item = require(\"../schemas/Item\");\r\n\r\n// server/routes/boxRoutes.js\r\nrouter.post('/openbox',authMiddleware, async (req, res) => {\r\n try {\r\n // 假设所有盲盒都有统一格式存储在BlindBox模型中\r\n const blindBoxes = await BlindBox.find({});\r\n const randomIndex = Math.floor(Math.random() * blindBoxes.length);\r\n const selectedBox = blindBoxes[randomIndex];\r\n\r\n // 从选中的盲盒中随机抽取一个物品\r\n const items = selectedBox.items; // 假设items是存储item ObjectId的数组\r\n const selectedItemIndex = Math.floor(Math.random() * items.length);\r\n // server/routes/boxRoutes.js 中 openbox 接口的修改\r\n const selectedItem = await Item.findById(items[selectedItemIndex]).exec(); // 确保 Item 已经导入\r\n\r\n //console.log('req.user',req.user)\r\n const userId = req.user.id; // 或其他方式获取当前用户ID\r\n\r\n // 更新用户物品列表，将盲盒中的所有物品添加至用户\r\n await User.findByIdAndUpdate(\r\n userId, \r\n { $push: {\n```;\n\n[snippet 17] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {useParams} from 'react-router-dom';\r\nimport MakeOfferForm from '../components/makeoffer/MakeOfferForm';\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function MakeOffer() {\r\n const {_id} = useParams();\r\n const [tradeData, setTradeData] = useState({});\r\n const [loading, setLoading] = useState(true);\r\n const [error, setError] = useState(null);\r\n\r\n useEffect(() => {\r\n fetch(SERVER_URL+`/trades/${_id}`)\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Network response was not ok');\r\n }\r\n return response.json();\r\n })\r\n .then((tradeDataArray) => {\r\n if (Array.isArray(tradeDataArray) && tradeDataArray.length > 0) {\r\n setTradeData(tradeDataArray[0]);\r\n setLoading(false);\r\n } else {\r\n setError(new Error('Invalid data format.'));\r\n setLoading(false);\r\n }\r\n })\r\n .catch((error) => {\r\n setError(error);\r\n setLoading(false);\r\n });\r\n }, [_id]);\r\n\r\n return (\r\n <div>\r\n {loading ? (\n```;\n\n[snippet 18] (filepath: README.md):\n```\n# Counter-Strike Item Trading Application\r\n\r\n## Description\r\nA full-stack web application that enable traders to create new trade listings and make offers on existing trade listings.\r\nOffers a comprehensive set of features including posting trades, accepting/declining incoming offers, viewing prior trading history, \r\ncompleted trade activity, and item filters.\r\n\r\n## Technologies Used\r\n- React.js\r\n- Node.js\r\n- Express.js\r\n- MongoDB\r\n\r\n## Methodology\r\n\r\n## Demonstration\n```;\n\n[snippet 19] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nimport React, {useReducer} from 'react';\r\nimport AddItem from \"./itemList/AddItem\";\r\nimport ItemList from \"./itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport {toast} from 'react-toastify';\r\nimport '../../styles/components/Creation.css'\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function Creation() {\r\n // Initialize two separate states and dispatch functions for each list\r\n const [haveItems, dispatchHaveItems] = useReducer(itemsReducer, []);\r\n const [wantItems, dispatchWantItems] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postTrade = () => {\r\n const haveItemsFormatted =\n```;\n\n[snippet 20] (filepath: server\\routes\\userRoutes.js):\n```\n'Secure Api Tested'\r\n });\r\n } catch (e) {\r\n res.send({ msg: \"Error in Fetching user\" });\r\n }\r\n});\r\n\r\nconsole.log('/profile请求路由设置')\r\n\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 21] (filepath: server\\routes\\tradeRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require(\"../schemas/Trade\");\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nlet clients = [];\r\n\r\nrouter.get('/status', (request, response) => response.json({ clients: clients.length }));\r\n\r\nrouter.get('/all', eventsHandler);\r\n\r\nasync function eventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const tradeData = await Trade.find({}).lean().exec();\r\n\r\n const tradeEventData = `data: ${JSON.stringify(tradeData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(tradeEventData);\r\n\r\n const clientId = Date.now();\r\n\r\n const newClient = {\r\n id: clientId,\r\n response\r\n };\r\n\r\n clients.push(newClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${clientId} Connection closed`);\r\n clients = clients.filter(client => client.id !== clientId);\r\n });\r\n } catch (error) {\n```;\n\n[snippet 22] (filepath: server\\routes\\offerRoutes.js):\n```\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Trade = require('../schemas/Trade');\r\nconst Offer = require('../schemas/Offer');\r\nconst User = require(\"../schemas/User\");\r\n\r\nconst router = express.Router();\r\n\r\nlet offerClients = [];\r\n\r\nrouter.get('/all', offerEventsHandler);\r\n\r\nasync function offerEventsHandler(request, response, next) {\r\n const headers = {\r\n 'Content-Type': 'text/event-stream',\r\n 'Connection': 'keep-alive',\r\n 'Cache-Control': 'no-cache',\r\n 'Access-Control-Allow-Origin': '*',\r\n };\r\n\r\n try {\r\n const offerData = await Offer.find({}).lean().exec();\r\n\r\n const offerEventData = `data: ${JSON.stringify(offerData)}\\n\\n`;\r\n\r\n response.writeHead(200, headers);\r\n response.write(offerEventData);\r\n\r\n const offerClientId = Date.now();\r\n\r\n const newOfferClient = {\r\n id: offerClientId,\r\n response\r\n };\r\n\r\n offerClients.push(newOfferClient);\r\n\r\n request.on('close', () => {\r\n console.log(`${offerClientId} Connection closed`);\r\n offerClients = offerClients.filter(offerClient => offerClient.id !== offerClientId);\r\n });\r\n } catch\n```;\n\n[snippet 23] (filepath: server\\routes\\offerRoutes.js):\n```\n(error) {\r\n console.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nfunction sendEventsToAll(newOffer) {\r\n offerClients.forEach(offerClient => offerClient.response.write(`data: ${JSON.stringify(newOffer)}\\n\\n`))\r\n}\r\n\r\nrouter.get('/:userId', async(req, res) => {\r\n const userId = req.params.userId;\r\n\r\n try {\r\n const trades = await Trade.find({ userId: userId });\r\n const tradeOffers = [];\r\n const associatedTrades = [];\r\n\r\n for (const trade of trades) {\r\n const offers = await Offer.find({ _id: { $in: trade.offers } });\r\n tradeOffers.push({ trade, offers });\r\n }\r\n\r\n const offers = await Offer.find({ userId: userId });\r\n for (const offer of offers) {\r\n const trade = await Trade.findOne({ _id: offer.tradeId });\r\n associatedTrades.push({ offer, trade });\r\n }\r\n\r\n const combinedData = {\r\n tradeOffers: tradeOffers,\r\n associatedTrades: associatedTrades,\r\n };\r\n\r\n res.json(combinedData);\r\n\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post('/new', auth, async(req, res) => {\r\n const newOffer = req.body;\r\n\r\n try {\r\n const\n```;\n\n[snippet 24] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error(error);\r\n response.status(500).end();\r\n }\r\n}\r\n\r\nrouter.get('/:_id', async(req, res) => {\r\n const id = req.params._id;\r\n\r\n try {\r\n const trade = await Trade.find({_id: id});\r\n res.json(trade);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.'})\r\n }\r\n});\r\n\r\nfunction sendEventsToAll(newData) {\r\n clients.forEach(client => client.response.write(`data: ${JSON.stringify(newData)}\\n\\n`))\r\n}\r\n\r\nrouter.post('/new', auth, addTrade);\r\n\r\nasync function addTrade(request, response, next) {\r\n const newTrade = request.body;\r\n\r\n try {\r\n const tradeDocument = new Trade(newTrade);\r\n const savedTrade = await tradeDocument.save();\r\n\r\n const tradeId = savedTrade._id;\r\n\r\n const userId = newTrade.userId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdTrades: tradeId } });\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n response.json(savedTrade);\r\n } catch (error) {\n```;\n\n[snippet 25] (filepath: server\\test\\addTestItems.js):\n```\nconsole.log('批量添加成功:', response.data);\r\n } catch (error) {\r\n if (error.response) {\r\n // 请求已发出，服务器响应状态码不在 2xx 范围内\r\n console.error('添加失败:', error.response.data);\r\n } else if (error.request) {\r\n // 请求已发出但未收到响应\r\n console.error('服务器未响应:', error.request);\r\n } else {\r\n // 发送请求时出现了某些问题\r\n console.error('请求错误:', error.message);\r\n }\r\n }\r\n};\r\n\r\naddItemsToDatabase();\r\n\r\n// Note: 这个脚本应该在 Node.js 环境中运行。确保你的环境中已经安装了 axios。\n```;\n\n[snippet 26] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nimport React, {useReducer, useState} from 'react';\r\nimport AddItem from \"../create/itemList/AddItem\";\r\nimport ItemList from \"../create/itemList/ItemList\";\r\nimport {getUserId} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/MakeOfferForm.css'\r\nimport {toast} from 'react-toastify';\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nfunction itemsReducer(items, action) {\r\n switch (action.type) {\r\n case 'added': {\r\n return [...items, {\r\n id: action.id,\r\n wear: action.wear,\r\n knife: action.knife,\r\n finish: action.finish\r\n }];\r\n }\r\n case 'deleted': {\r\n return items.filter(item => item.id !== action.id);\r\n }\r\n case 'cleared': {\r\n return [];\r\n }\r\n default: {\r\n throw Error('Unknown action: ' + action.type);\r\n }\r\n }\r\n}\r\n\r\nexport default function MakeOfferForm({tradeData}) {\r\n const [forItems, setForItems] = useState(tradeData.have);\r\n const [forItemsExc, setForItemsExc] = useState([]);\r\n const [haveItems, dispatch] = useReducer(itemsReducer, []);\r\n\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n\r\n const postOffer = () => {\r\n const\n```;\n\n[snippet 27] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"declined\"\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n // After successfully updating the status, fetch the updated data\r\n return fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n })\r\n .then((response) => response.json())\r\n .then((newData) => {\r\n // Update the offerData state with the updated data\r\n setOfferData(newData);\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n const handleAcceptOffer = async (tradeId, offerId) => {\r\n try {\r\n const tradeResponse = await fetch(SERVER_URL+`/trades/update/${tradeId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n acceptedOffer: offerId,\r\n tradeStatus: \"inactive\"\r\n })\r\n });\r\n\r\n if (!tradeResponse.ok) {\r\n throw new Error('Trade update request failed.');\r\n }\r\n\r\n const offerResponse = await fetch(SERVER_URL+`/offers/update/${offerId}`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type':\n```;\n\n[snippet 28] (filepath: client\\src\\pages\\Index.jsx):\n```\nimport React, {useState, useEffect, useRef} from 'react';\r\nimport Filter from \"../components/index/Filter\";\r\nimport Trades from \"../components/index/Trades\";\r\nimport Activity from \"../components/index/Activity\";\r\nimport '../styles/pages/Index.css';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function Index() {\r\n const [data, setData] = useState([]);\r\n const [filteredData, setFilteredData] = useState([]);\r\n const [offerData, setOfferData] = useState([]);\r\n const [selectedCheckboxes, setSelectedCheckboxes] = useState([]);\r\n const hasRendered = useRef(false);\r\n const hasRenderedOffers = useRef(false);\r\n\r\n useEffect(() => {\r\n let events = null;\r\n\r\n if (!hasRendered.current) {\r\n events = new EventSource(SERVER_URL+'/trades/all');\r\n\r\n events.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setData(parsedData);\r\n };\r\n\r\n hasRendered.current = true;\r\n }\r\n\r\n return () => {\r\n if (events) {\r\n events.close();\r\n hasRendered.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n let offerEvents = null;\r\n\r\n if\n```;\n\n[snippet 29] (filepath: client\\src\\pages\\Offers.jsx):\n```\n'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n status: \"accepted\",\r\n acceptedAt: currentTime()\r\n })\r\n });\r\n\r\n if (!offerResponse.ok) {\r\n throw new Error('Offer update request failed.');\r\n }\r\n\r\n // Fetch updated offer data and set it in your state\r\n const newDataResponse = await fetch(SERVER_URL+`/offers/${getUserId(auth_token)}`);\r\n if (!newDataResponse.ok) {\r\n throw new Error('Fetching updated offer data failed.');\r\n }\r\n\r\n const newData = await newDataResponse.json();\r\n setOfferData(newData);\r\n } catch (error) {\r\n console.error(\"Error: \", error);\r\n }\r\n };\r\n\r\n return (\r\n <div className=\"offer-grid-container\">\r\n <div className=\"incoming-tab\">\r\n <IncomingOffers data={offerData.tradeOffers} onDeclineOffer={handleDeclineOffer}\r\n onAcceptOffer={handleAcceptOffer}/>\r\n </div>\r\n <div className=\"outgoing-tab\">\r\n <OutgoingOffers data={offerData.associatedTrades}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 30] (filepath: server\\routes\\tradeRoutes.js):\n```\nconsole.error('Error saving trade to MongoDB:', error);\r\n response.status(500).end('Internal Server Error');\r\n }\r\n}\r\n\r\nrouter.post('/update/:_id', auth, updateTrade);\r\n\r\nasync function updateTrade(request, response, next) {\r\n const tradeId = request.params._id;\r\n const tradeUpdate = request.body;\r\n\r\n try {\r\n const offerId = tradeUpdate.acceptedOffer;\r\n const newTradeStatus = tradeUpdate.tradeStatus;\r\n\r\n const updatedTrade = await Trade.findByIdAndUpdate(tradeId, { acceptedOffer: offerId, status: newTradeStatus }, { new: true });\r\n\r\n if (!updatedTrade) {\r\n return response.status(404).json({ message: 'Trade or Offer not found.' });\r\n }\r\n\r\n // Fetch the entire dataset from the trades collection\r\n const entireDataset = await Trade.find({});\r\n\r\n // Send the entire dataset as an SSE event\r\n sendEventsToAll(entireDataset);\r\n\r\n return response.status(200).json({ message: 'Trade and Offer updated successfully', updatedTrade });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 31] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nhaveItemsFormatted = haveItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/offers/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n tradeId: tradeData._id,\r\n userId: getUserId(auth_token),\r\n offered: haveItemsFormatted,\r\n for: forItems\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearOffer();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n })\r\n }\r\n\r\n function clearOffer() {\r\n dispatch({\r\n type: 'cleared'\r\n });\r\n\r\n setForItems(tradeData.have);\r\n setForItemsExc([]);\r\n }\r\n\r\n function handleAddItemToList(itemObject) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItem(itemId) {\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\n```;\n\n[snippet 32] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n'application/json'\r\n }\r\n });\r\n \r\n if (response.status !== 200) {\r\n error.innerHTML = response.data.msg;\r\n } else {\r\n sessionStorage.setItem('auth_token', response.data.token);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n authContext.login();\r\n console.log('测试-authContext',authContext)\r\n redirect(response.data.token);\r\n }\r\n } catch (err) {\r\n if (err.response) {\r\n // 当响应状态码超出2xx范围时执行\r\n console.log(err.response.data);\r\n error.innerHTML = err.response.data.msg;\r\n } else if (err.request) {\r\n // 请求已发出但未收到响应时执行\r\n console.log(err.request);\r\n } else {\r\n // 在设置请求时触发了某些问题时执行\r\n console.log('Error', err.message);\r\n }\r\n }\r\n };\r\n\r\n const navigate = useNavigate();\r\n\r\n async function redirect(token) {\r\n const decoded = jwtDecode(token);\r\n const userId = decoded.user.id;\r\n\r\n const userResponse = await fetch(`${SERVER_URL}/users/${userId}`, {\r\n method: 'GET',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n }\r\n });\r\n\r\n if (userResponse.status === 200) {\r\n navigate('/');\r\n } else {\r\n console.log('Error retrieving data.')\r\n }\r\n }\r\n\r\n return (\r\n <div className=\"login-form-container\">\n```;\n\n[snippet 33] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ne.preventDefault();\r\n\r\n if (auth_token) {\r\n postOffer();\r\n\r\n toast.success('Offer sent!');\r\n } else {\r\n toast.error('Please log in to make offer.');\r\n }\r\n }\r\n\r\n function handleAddBtn(itemId) {\r\n const includedItem = forItemsExc.find(item => item._id === itemId);\r\n setForItems([...forItems, includedItem]);\r\n\r\n const newForExcArray = forItemsExc.filter(item => item._id !== itemId);\r\n setForItemsExc(newForExcArray);\r\n }\r\n\r\n function handleDeleteBtn(itemId) {\r\n const excludedItem = forItems.find(item => item._id === itemId);\r\n setForItemsExc([...forItemsExc, excludedItem]);\r\n\r\n const newForArray = forItems.filter(item => item._id !== itemId);\r\n setForItems(newForArray);\r\n }\r\n\r\n return (\r\n <div>\r\n <div className=\"trade-offer-container\">\r\n <h2>[H]ave: </h2>\r\n <ul>\r\n {tradeData.have.map((item, index) => (\r\n <li key={index}>\r\n {`${item.knife} | ${item.finish} (${item.wear})`}\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <h2>[W]ant: </h2>\r\n <ul>\r\n {tradeData.want.map((item, index) => (\r\n <li key={index}>\r\n {item.knife} | {item.finish} ({item.wear})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div\n```;\n\n[snippet 34] (filepath: client\\src\\components\\UserProfile.js):\n```\n// client\\src\\components\\UserProfile.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport {getUserId} from \"../utilities/Utilities\";\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst UserProfile = () => {\r\n const [user, setUser] = useState(null);\r\n const [items, setItems] = useState([]);\r\n\r\n \r\n\r\n // Define rechargeAmount and setRechargeAmount\r\n const [rechargeAmount, setRechargeAmount] = useState(0)\r\n const recharge = async (amount) => {\r\n try {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n const response = await axios.post(SERVER_URL+\"/users/recharge/\" + getUserId(auth_token), { rechargeValue: amount }, {\r\n headers: { \r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token \r\n },\r\n });\r\n\r\n if(response.data.message === 'Recharge successful') {\r\n console.log('测试-充值成功')\r\n setUser(prevUser => ({...prevUser, currency: { value: response.data.value }}));\r\n getUser();\r\n }\r\n } catch (error) {\r\n console.error('充值失败',error.response);\r\n }\r\n };\r\n\r\n // Get user info\r\n const getUser = async () => {\r\n try {\r\n const auth_token =\n```;\n\n[snippet 35] (filepath: client\\src\\context\\AuthContext.js):\n```\n// client\\src\\context\\AuthContext.js\r\nimport { createContext } from 'react';\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthContext = createContext({\r\n isAuthenticated: false, // 提供一个初始值\r\n login: () => {},\r\n logout: () => {},\r\n registerUser: () => Promise.resolve(),\r\n});\r\n\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{ registerUser }}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default AuthContext;\n```;\n\n[snippet 36] (filepath: server\\test\\generateBlindBoxData.js):\n```\nconst itemId = await addNewItem(); // 创建物品并获取ID\r\n itemIds.push(itemId);\r\n }\r\n \r\n return {\r\n //id: index,\r\n items: itemIds, // 盲盒包含的物品ID数组\r\n // 可以添加更多盲盒属性\r\n };\r\n }\r\n\r\n module.exports = { generateBlindBoxData };\n```;\n\n[snippet 37] (filepath: server\\schemas\\User.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst UserSchema = mongoose.Schema({\r\n username: {\r\n type: String,\r\n required: true\r\n },\r\n password: {\r\n type: String,\r\n required: true\r\n },\r\n createdTrades: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n }],\r\n createdOffers: [{\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }],\r\n // 新增\r\n currency: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Currency\"\r\n },\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n\r\n});\r\n\r\nmodule.exports = mongoose.model(\"User\", UserSchema);\n```;\n\n[snippet 38] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\nimport React, {useState,useContext} from 'react';\r\nimport {toast} from 'react-toastify';\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\nimport { Navigate } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nexport default function BlindBox() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n const [isLoading, setIsLoading] = useState(false);\r\n // client/src/pages/BlindBox.jsx\r\n const [openedItem, setOpenedItem] = useState(null);\r\n \r\n const openBox = async () => {\r\n setIsLoading(true);\r\n try {\r\n const response = await fetch(`${SERVER_URL}/api/boxes/openbox`, {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': sessionStorage.getItem('auth_token'),\r\n },\r\n });\r\n const data = await response.json();\r\n if (response.ok) {\r\n setOpenedItem(data.item); // 保存开出的物品信息\r\n toast.success(`恭喜你获得了：${data.item.itemName}`);\r\n } else {\r\n toast.error(data.message);\r\n }\r\n } catch (error) {\r\n console.error(error);\r\n toast.error('网络错误，请稍后再试');\r\n } finally {\r\n setIsLoading(false);\r\n }\r\n };\r\n // 如果用户未登录，则重定向到登录页面\r\n if\n```;\n\n[snippet 39] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\nhaveItems.map(({id, ...rest}) => rest);\r\n const wantItemsFormatted = wantItems.map(({id, ...rest}) => rest);\r\n\r\n fetch(SERVER_URL+'/trades/new', {\r\n method: 'POST',\r\n headers: {\r\n 'Content-Type': 'application/json',\r\n 'auth-token': auth_token\r\n },\r\n body: JSON.stringify({\r\n userId: getUserId(auth_token),\r\n have: haveItemsFormatted,\r\n want: wantItemsFormatted\r\n })\r\n })\r\n .then((response) => {\r\n if (!response.ok) {\r\n throw new Error('Response error encountered.');\r\n }\r\n return response.json();\r\n })\r\n .then(() => {\r\n clearItemLists();\r\n })\r\n .catch((error) => {\r\n console.error(\"Error: \", error);\r\n });\r\n };\r\n\r\n function handleAddItemToList(itemObject, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const dispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'added',\r\n id: nextId++,\r\n wear: itemObject.wear,\r\n knife: itemObject.knife,\r\n finish: itemObject.finish\r\n });\r\n }\r\n\r\n function handleDeleteItemFromList(itemId, listType) {\r\n // Determine which dispatch function to use based on the listType parameter\r\n const\n```;\n\n[snippet 40] (filepath: client\\src\\App.js):\n```\nelement={<Login/>}/>\r\n <Route path='/register' element={<Register/>}/> {/* 新增 */}\r\n <Route path='offers/:_id' element={<MakeOffer/>}/>\r\n <Route path='/profile' element={<UserProfile/>}/> {/* Add this line */}\r\n <Route\r\n path=\"/blindbox\"\r\n element= {<BlindBox />} />\r\n \r\n </Routes>\r\n </AuthProvider>\r\n </Router>\r\n \r\n );\r\n}\n```;\n\n[snippet 41] (filepath: server\\schemas\\Trade.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst TradeSchema = mongoose.Schema({\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n have: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n want: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n offers: [\r\n {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\"\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"active\", \"inactive\"],\r\n default: \"active\"\r\n },\r\n acceptedOffer: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Offer\",\r\n default: null\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Trade\", TradeSchema);\n```;\n\n[snippet 42] (filepath: server\\schemas\\Item.js):\n```\n// server/schemas/Item.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst ItemSchema = new mongoose.Schema({\r\n itemName: String,\r\n rarity: String,\r\n // 新增或确认其他相关字段\r\n wear: String,\r\n knife: String,\r\n finish: String,\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Item\", ItemSchema);\n```;\n\n[snippet 43] (filepath: client\\src\\components\\UserProfile.js):\n```\nvalue={rechargeAmount} onChange={(e) => setRechargeAmount(e.target.value)} />\r\n <button onClick={() => recharge(rechargeAmount)}>充值</button>\r\n </div>\r\n )}\r\n <h2>我的物品列表</h2>\r\n <ul>\r\n {items.map((item, index) => (\r\n <li key={index}>{item.itemName} - {item.description}</li> // 使用 itemName 和 description 替代 itemId\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n};\r\n\r\nexport default UserProfile;\n```;\n\n[snippet 44] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\ndispatch = listType === 'haveItems' ? dispatchHaveItems : dispatchWantItems;\r\n\r\n dispatch({\r\n type: 'deleted',\r\n id: itemId\r\n });\r\n }\r\n\r\n function clearItemLists() {\r\n dispatchHaveItems({\r\n type: 'cleared'\r\n });\r\n\r\n dispatchWantItems({\r\n type: 'cleared'\r\n });\r\n }\r\n\r\n const handleSubmit = (e) => {\r\n e.preventDefault();\r\n\r\n if (auth_token) {\r\n postTrade();\r\n\r\n toast.success('Trade created!');\r\n } else {\r\n toast.error('Please log in to create a trade.');\r\n };\r\n };\r\n\r\n return (\r\n <div className=\"creation-container\">\r\n <form onSubmit={handleSubmit}>\r\n <h2>Create Trade Offer</h2>\r\n <fieldset>\r\n <legend><b>Have</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'haveItems')}/>\r\n <div className=\"have-header\"><i>You have ...</i></div>\r\n <ItemList items={haveItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'haveItems')}/>\r\n </fieldset>\r\n\r\n <div className=\"swap\">&#8645;</div>\r\n\r\n <fieldset>\r\n <legend><b>Want</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item, 'wantItems')}/>\r\n <div className=\"want-header\"><i>You want\n```;\n\n[snippet 45] (filepath: client\\src\\context\\AuthProvider.js):\n```\n// client\\src\\context\\AuthProvider.js\r\nimport React, { useState } from 'react';\r\nimport AuthContext from \"./AuthContext\";\r\nimport axios from 'axios';\r\n\r\nimport { SERVER_URL } from '../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nconst AuthProvider = ({children}) => {\r\n const [isAuthenticated, setIsAuthenticated] = useState(\r\n sessionStorage.getItem('isAuthenticated') === 'true'\r\n );\r\n\r\n const login = () => {\r\n setIsAuthenticated(true);\r\n sessionStorage.setItem('isAuthenticated', 'true');\r\n };\r\n\r\n const logout = () => {\r\n setIsAuthenticated(false);\r\n sessionStorage.setItem('isAuthenticated', 'false');\r\n // 清除其他相关sessionStorage项，比如auth-token等\r\n sessionStorage.removeItem('auth_token');\r\n };\r\n\r\n const registerUser = async (username, password) => {\r\n try {\r\n const res = await axios.post(SERVER_URL+'/users/register', { username, password });\r\n console.log(res.data);\r\n return res\r\n } catch (err) {\r\n console.error(err);\r\n }\r\n };\r\n\r\n return (\r\n <AuthContext.Provider value={{isAuthenticated, login, logout, registerUser}}>\r\n {children}\r\n </AuthContext.Provider>\r\n );\r\n};\r\n\r\nexport default\n```;\n\n[snippet 46] (filepath: client\\src\\pages\\MakeOffer.jsx):\n```\n<p>Loading...</p>\r\n ) : error ? (\r\n <p>Error: {error.message}</p>\r\n ) : (\r\n <div className=\"offer-tab\">\r\n <MakeOfferForm tradeData={tradeData}/>\r\n </div>\r\n )}\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border:\"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 47] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"outgoing-component\">\r\n <h2>Outgoing Offers &uarr;</h2>\r\n\r\n {data.map((entry) => (\r\n <div key={entry.offer._id} className=\"outgoing-item\">\r\n <div className=\"offered\">\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>You Offered:</b></span>\r\n <span className=\"status\"><b>status:</b> <i>{entry.offer.status}</i></span>\r\n </div>\r\n <ul>\r\n {entry.offer.offered.map((offerItem) => (\r\n <li key={offerItem._id}>{`${offerItem.knife} ${offerItem.finish} (${convertWear(offerItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <div className=\"label-header\">\r\n <span className=\"label\"><b>For:</b></span>\r\n </div>\r\n\r\n <ul>\r\n {entry.offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n <ul>\r\n {entry.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n <span\n```;\n\n[snippet 48] (filepath: server\\routes\\userRoutes.js):\n```\n{\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nrouter.post(\"/register\", async(req, res) => {\r\n const {username, password} = req.body;\r\n\r\n try {\r\n let user = await User.findOne({username});\r\n if(user) {\r\n return res.status(400).json({\r\n msg:\"User already exists\"\r\n });\r\n }\r\n user = new User({\r\n username,\r\n password\r\n });\r\n const s = await bcrypt.genSalt(10);\r\n user.password = await bcrypt.hash(password, s);\r\n\r\n await user.save();\r\n\r\n res.status(200).json({\r\n msg: \"User created successfully\"\r\n });\r\n } catch(error) {\r\n res.status(500).json({\r\n msg: error.message\r\n });\r\n }\r\n});\r\n\r\nrouter.post(\"/login\", async (req, res) => {\r\n const { username, password } = req.body;\r\n\r\n try {\r\n let user = await User.findOne({ username: username });\r\n\r\n if(!user) {\r\n return res.status(400).json({\r\n msg: \"Invalid username\"\r\n });\r\n }\r\n\r\n const flag = await bcrypt.compare(password, user.password);\r\n if(!flag) {\r\n return res.status(400).json({\r\n msg: \"Invalid password\"\r\n });\r\n }\r\n\r\n const payload = {\r\n user: {\r\n id: user.id\r\n }\r\n };\r\n\r\n jwt.sign(payload, 'secret-key', {\n```;\n\n[snippet 49] (filepath: server\\routes\\currencyRoutes.js):\n```\n// server\\routes\\currencyRoutes.js\r\nconst express = require('express');\r\nconst auth = require(\"../middleware/auth\");\r\nconst Currency = require('../schemas/Currency');\r\nconst User = require('../schemas/User');\r\n\r\nconst router = express.Router();\r\n\r\nrouter.get('/:userId', auth, async (req, res) => {\r\n try {\r\n const user = await User.findById(req.params.userId).populate('currency');\r\n res.json(user.currency);\r\n } catch (error) {\r\n console.error(error);\r\n res.status(500).json({ error: 'An error occurred while fetching data.' });\r\n }\r\n});\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 50] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\ndata */}\r\n <ul>\r\n {offer.offered.map((offeredItem) => (\r\n <li key={offeredItem._id}>{`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>For:</b></span>\r\n {/* Render the 'offer.for' data */}\r\n <ul>\r\n {offer.for.map((forItem) => (\r\n <li key={forItem._id}>{`${forItem.knife} ${forItem.finish} (${convertWear(forItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n offer.status === \"pending\" ? (\r\n <div className=\"button-container\">\r\n <button className=\"action\"\r\n id=\"accept-btn\"\r\n onClick={() => onAcceptOffer(offer.tradeId, offer._id)}\r\n >Accept\r\n </button>\r\n <button\r\n className=\"action\"\r\n id=\"decline-btn\"\r\n onClick={() => onDeclineOffer(offer._id)} // Call the parent's onDeclineOffer function\r\n >\r\n Decline\r\n </button>\r\n </div>\r\n ) : (\r\n <div className=\"offer-status\">\r\n {offer.status === \"declined\" ? (\r\n <span><i>Trade Declined</i></span>\r\n ) : (\r\n <span><i>Trade Accepted</i></span>\r\n )}\r\n </div>\r\n )\r\n }\r\n </div>\r\n ))\r\n )}\r\n </div>\r\n );\r\n}\r\n\r\nexport function OutgoingOffers({data}) {\r\n return (\r\n <div\n```;\n\n[snippet 51] (filepath: server\\routes\\offerRoutes.js):\n```\nofferDocument = new Offer(newOffer);\r\n await offerDocument.save();\r\n\r\n const offerId = offerDocument._id;\r\n const userId = newOffer.userId;\r\n const tradeId = newOffer.tradeId;\r\n\r\n await User.findByIdAndUpdate(userId, { $push: { createdOffers: offerId } });\r\n await Trade.findByIdAndUpdate(tradeId, { $push: { offers: offerId }});\r\n\r\n res.status(201).json({ message: 'Offer created successfully' });\r\n } catch (error) {\r\n console.error('Error saving offer to MongoDb:', error);\r\n res.status(500).end('Internal Server Error');\r\n }\r\n});\r\n\r\nrouter.post('/update/:_id', auth, updateOffer);\r\n\r\nasync function updateOffer(request, response, next) {\r\n const offerId = request.params._id;\r\n const offerUpdate = request.body;\r\n\r\n try {\r\n const newStatus = offerUpdate.status;\r\n\r\n let updatedOffer;\r\n\r\n if(newStatus === \"accepted\") {\r\n const newAcceptedAt = offerUpdate.acceptedAt;\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status: newStatus,\r\n acceptedAt: newAcceptedAt\r\n }, { new: true });\r\n } else if(newStatus === \"declined\") {\r\n updatedOffer = await Offer.findByIdAndUpdate(offerId, {\r\n status:\n```;\n\n[snippet 52] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\nimport React, {useEffect, useContext} from 'react';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport AuthContext from \"../../context/AuthContext\";\r\nimport jwtDecode from 'jwt-decode';\r\nimport '../../styles/components/LoginForm.css'\r\nimport axios from 'axios'; // 确保已经引入axios\r\n\r\nimport { SERVER_URL } from '../../config'; // 请根据实际路径调整 //SERVER_URL+'\r\n\r\nexport default function LoginForm() {\r\n const authContext = useContext(AuthContext);\r\n\r\n useEffect(() => {\r\n const auth_token = sessionStorage.getItem('auth_token');\r\n if (auth_token !== null) {\r\n console.log('Auth token present');\r\n redirect(auth_token);\r\n } else {\r\n console.log('No Auth token present');\r\n }\r\n }, [])\r\n\r\n const handleSubmit = async (e) => {\r\n e.preventDefault();\r\n \r\n const username = document.getElementById('username').value;\r\n const password = document.getElementById('password').value;\r\n let error = document.getElementById(\"error-text\");\r\n \r\n const requestBody = {\r\n username,\r\n password\r\n }\r\n \r\n try {\r\n const response = await axios.post(SERVER_URL+\"/users/login\", requestBody, {\r\n headers: {\r\n \"Content-Type\":\n```;\n\n[snippet 53] (filepath: server\\schemas\\Offer.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst OfferSchema = mongoose.Schema({\r\n tradeId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"Trade\"\r\n },\r\n userId: {\r\n type: mongoose.Schema.Types.ObjectId,\r\n ref: \"User\"\r\n },\r\n offered: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n for: [\r\n {\r\n wear: String,\r\n knife: String,\r\n finish: String\r\n }\r\n ],\r\n createdAt: {\r\n type: Date,\r\n default: Date.now\r\n },\r\n status: {\r\n type: String,\r\n enum: [\"pending\", \"accepted\", \"declined\"],\r\n default: \"pending\"\r\n },\r\n acceptedAt: {\r\n type: String,\r\n default: null\r\n }\r\n})\r\n\r\nmodule.exports = mongoose.model(\"Offer\", OfferSchema);\n```;\n\n[snippet 54] (filepath: server\\routes\\offerRoutes.js):\n```\nnewStatus\r\n }, { new: true });\r\n }\r\n\r\n if (!updatedOffer) {\r\n return response.status(404).json({ message: 'Offer not found' });\r\n }\r\n\r\n sendEventsToAll(updatedOffer);\r\n\r\n return response.status(200).json({ message: 'Offer updated successfully', updatedOffer });\r\n } catch (error) {\r\n return response.status(500).json({ message: 'Internal server error', error: error.message });\r\n }\r\n}\r\n\r\nmodule.exports = router;\n```;\n\n[snippet 55] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nimport React from 'react';\r\nimport '../../styles/components/Activity.css'\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\n\r\nexport default function Activity({data}) {\r\n\r\n const acceptedData = data.filter((item) => item.status === 'accepted');\r\n\r\n return (\r\n <div className=\"activity\">\r\n <header>\r\n <h2>Activity</h2>\r\n </header>\r\n\r\n <table className=\"activity-table\">\r\n <thead>\r\n <th className=\"time-header\">Time</th>\r\n <th className=\"trade-header\" colSpan={3}>Trade</th>\r\n </thead>\r\n\r\n <tbody>\r\n {acceptedData.map((offer) => (\r\n <tr key={offer._id}>\r\n <td className=\"time-data\">{offer.acceptedAt}</td>\r\n\r\n <td className=\"trade-data\">\r\n {offer.offered.map((offeredItem, index, array) => (\r\n <span key={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}), `) :\r\n (`${offeredItem.knife} ${offeredItem.finish} (${convertWear(offeredItem.wear)}) `)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n\r\n <td>&#x2194;</td>\r\n\r\n <td className=\"trade-data\">\r\n\r\n {offer.for.map((acceptedItem, index, array) => (\r\n <span\n```;\n\n[snippet 56] (filepath: server\\test\\testCors.js):\n```\nconst axios = require('axios');\r\n\r\n// Please replace with your SERVER_URL\r\nconst SERVER_URL = \"http://alex.shinestu.com:4000\";\r\n\r\naxios.get(SERVER_URL + '/headers')\r\n .then(response => {\r\n console.log(\"Headers:\", response.data);\r\n })\r\n .catch(error => {\r\n console.error(\"Error:\", error);\r\n });\n```;\n\n[snippet 57] (filepath: client\\src\\components\\Navbar.jsx):\n```\n{\r\n authContext.isAuthenticated ?\r\n (\r\n <>\r\n <NavLink to=\"/profile\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>个人中心</NavLink>\r\n <NavLink to=\"/login\" className=\"log-link\" onClick={handleLogout}>登出</NavLink>\r\n </>\r\n ) :\r\n (\r\n <>\r\n <NavLink to=\"/login\" className=\"log-link\" style={{backgroundColor: 'lightblue', borderRadius: '5px'}}>登录</NavLink>\r\n <NavLink to=\"/register\" className=\"log-link\" style={{backgroundColor: 'lightgreen', borderRadius: '5px', marginLeft: '10px'}}>注册</NavLink>\r\n </>\r\n )\r\n }\r\n </div>\r\n </header>\r\n );\r\n}\n```;\n\n[snippet 58] (filepath: client\\src\\App.js):\n```\n// client\\src\\App.js\r\nimport {BrowserRouter as Router, Routes, Route, Navigate } from 'react-router-dom';\r\nimport React, { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext';\r\nimport Navbar from './components/Navbar';\r\nimport Index from './pages/Index';\r\nimport Offers from \"./pages/Offers\";\r\nimport Create from \"./pages/Create\";\r\nimport Login from \"./pages/Login\";\r\nimport Register from \"./components/Register\";\r\nimport MakeOffer from \"./pages/MakeOffer\";\r\nimport AuthProvider from \"./context/AuthProvider\";\r\nimport UserProfile from \"./components/UserProfile\"; // Import the new component\r\n\r\nimport BlindBox from \"./pages/BlindBox\"; // 引入盲盒组件\r\n\r\nimport { withAuth } from './AuthGuard';\r\n\r\nexport default function App() {\r\n const { isAuthenticated } = useContext(AuthContext);\r\n console.log('isAuthenticated',isAuthenticated)\r\n return (\r\n\r\n <Router>\r\n <AuthProvider>\r\n <Navbar/>\r\n <Routes>\r\n <Route path='/' exact element={<Index/>}/>\r\n <Route path='/offers' element={<Offers/>}/>\r\n <Route path='/create' element={<Create/>}/>\r\n <Route path='/login'\n```;\n\n[snippet 59] (filepath: client\\src\\pages\\Index.jsx):\n```\n(!hasRenderedOffers.current) {\r\n offerEvents = new EventSource(SERVER_URL+'/offers/all');\r\n\r\n offerEvents.onmessage = (event) => {\r\n const parsedData = JSON.parse(event.data);\r\n\r\n setOfferData((offerData) => offerData.concat(parsedData));\r\n };\r\n\r\n hasRenderedOffers.current = true;\r\n }\r\n\r\n return () => {\r\n if (offerEvents) {\r\n offerEvents.close();\r\n hasRenderedOffers.current = false;\r\n }\r\n };\r\n }, []);\r\n\r\n useEffect(() => {\r\n if (selectedCheckboxes.length === 0) {\r\n setFilteredData(data);\r\n return;\r\n }\r\n\r\n const filteredItems = data.filter((trade) => {\r\n const haveItems = trade.have;\r\n const wantItems = trade.want;\r\n\r\n return (\r\n haveItems.some((haveItem) => selectedCheckboxes.includes(haveItem.knife)) ||\r\n wantItems.some((wantItem) => selectedCheckboxes.includes(wantItem.knife))\r\n );\r\n });\r\n\r\n setFilteredData(filteredItems);\r\n }, [selectedCheckboxes, data]);\r\n\r\n const handleCheckboxChange = (selectedItems) => {\r\n setSelectedCheckboxes(selectedItems);\r\n };\r\n\r\n return (\r\n <div className=\"grid-container\">\r\n <div className=\"left-sidebar\">\r\n <Filter\n```;\n\n[snippet 60] (filepath: client\\src\\components\\index\\Trades.jsx):\n```\nimport React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Trades.css';\r\n\r\nexport default function Trades({data}) {\r\n\r\n const gridItems = data.map((trade, index) => (\r\n <div key={trade._id} className=\"trade-grid-item\">\r\n\r\n <div className=\"trade-list\">\r\n <div><b>[H]</b>ave</div>\r\n <ul>\r\n {trade.have.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n\r\n <div><b>[W]</b>ant</div>\r\n <ul>\r\n {trade.want.map((item, itemIndex) => (\r\n <li key={itemIndex}>\r\n {item.knife} | {item.finish} ({convertWear(item.wear)})\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n {\r\n (trade.status === \"active\") ?\r\n (\r\n <NavLink to={`/offers/${trade._id}`} key={trade._id} className=\"navlink-offer-btn\">\r\n <div className=\"offerBtn\">Make Offer</div>\r\n </NavLink>\r\n ) :\r\n (<div className=\"completed\">Completed</div>)\r\n }\r\n </div>\r\n ));\r\n\r\n return (\r\n <div className=\"trade-grid-container\">\r\n {gridItems}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 61] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../utilities/Utilities\";\r\nimport '../../styles/components/Offer.css'\r\n\r\nexport function IncomingOffers({data, onDeclineOffer, onAcceptOffer}) {\r\n return (\r\n <div className=\"incoming-component\">\r\n <h2>Incoming Offers &darr;</h2>\r\n\r\n {data.flatMap((item) =>\r\n item.offers.map((offer) => (\r\n <div key={offer._id} className=\"incoming-item\">\r\n <div className=\"original\">\r\n <span className=\"label\"><b>[H]</b>ave</span>\r\n {/* Render the 'item.trade.have' data */}\r\n <ul>\r\n {item.trade.have.map((haveItem) => (\r\n <li key={haveItem._id}>{`${haveItem.knife} ${haveItem.finish} (${convertWear(haveItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n\r\n <span className=\"label\"><b>[W]</b>ant</span>\r\n {/* Render the 'item.trade.want' data */}\r\n <ul>\r\n {item.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n <div className=\"offered\">\r\n <span className=\"label\"><b>{`${offer.userId} Offered:`}</b></span>\r\n {/* Render the 'offer.offered'\n```;\n\n[snippet 62] (filepath: client\\src\\pages\\BlindBox.jsx):\n```\n(!isAuthenticated) {\r\n return <Navigate replace to=\"/login\" />;\r\n }\r\n \r\n return (\r\n <div>\r\n {openedItem && (\r\n <div>恭喜你获得了：{openedItem.itemName}</div>\r\n )}\r\n <h2>盲盒开箱</h2>\r\n <button disabled={isLoading} onClick={openBox}>\r\n {isLoading ? '正在开箱...' : '打开盲盒'}\r\n </button>\r\n </div>\r\n );\r\n }\n```;\n\n[snippet 63] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\nclassName=\"down-arrow\">&darr;</div>\r\n\r\n <div className=\"your-offer-container\">\r\n <form onSubmit={handleSubmit}>\r\n\r\n <h2>Your offer: </h2>\r\n <fieldset>\r\n <legend><b>Offer</b></legend>\r\n <AddItem onAddItem={(item) => handleAddItemToList(item)}/>\r\n\r\n <div className=\"have-header\"><i>You are offering ...</i></div>\r\n\r\n <ItemList items={haveItems} onDeleteItem={(itemId) => handleDeleteItem(itemId)}/>\r\n\r\n </fieldset>\r\n <div className=\"offer-for-items\">\r\n <h2>For:</h2>\r\n <ul>\r\n {forItems.length > 0 ? (\r\n forItems.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} ({item.wear})\r\n {forItems.length > 1 ? (\r\n <button className=\"delete-btn\"\r\n onClick={() => handleDeleteBtn(item._id)}> - </button>\r\n ) : null}\r\n </li>\r\n ))\r\n ) : null}\r\n </ul>\r\n </div>\r\n\r\n {forItemsExc.length > 0 ? (\r\n <div classname=\"offer-exc-items\">\r\n <h2>Excluded:</h2>\r\n <ul>\r\n {forItemsExc.map((item) => (\r\n <li key={item._id}>\r\n {item.knife} {item.finish} {item.wear}\r\n <button className=\"add-btn\" onClick={() => handleAddBtn(item._id)}> +</button>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n ) : null}\r\n\r\n <button\n```;\n\n[snippet 64] (filepath: server\\middleware\\auth.js):\n```\nconst jwt = require(\"jsonwebtoken\");\r\n\r\nmodule.exports = function(req, res, next) {\r\n const token = req.header(\"auth-token\");\r\n if (!token){\r\n return res.status(401).json({ msg: \"No token in header\" });\r\n }\r\n try {\r\n const decoded = jwt.verify(token, 'secret-key');\r\n req.user = decoded.user;\r\n next();\r\n } catch (err) {\r\n res.status(500).json({\r\n msg : err.message\r\n });\r\n }\r\n};\n```;\n\n[snippet 65] (filepath: client\\src\\components\\Register.js):\n```\n// client\\src\\components\\Register.js\r\nimport React, { useState, useContext } from 'react';\r\nimport AuthContext from '../context/AuthContext';\r\n\r\nconst Register = () => {\r\n const { registerUser } = useContext(AuthContext);\r\n const [username, setUsername] = useState('');\r\n const [password, setPassword] = useState('');\r\n const [message, setMessage] = useState(''); // 新增\r\n\r\nconst register = async () => {\r\n try {\r\n const response = await registerUser(username, password);\r\n\r\n if (response.status === 200) {\r\n setMessage(response.data.msg);\r\n }\r\n } catch (error) {\r\n console.log('error',error)\r\n // 检查 error 对象是否包含 response 属性\r\n if(error.response){\r\n setMessage(error.response.data.msg); // 如果服务器返回了错误信息，则显示\r\n } else {\r\n console.log(error)\r\n setMessage('An error occurred.'); // 否则显示一般错误信息\r\n }\r\n }\r\n};\r\n\r\n return (\r\n <div>\r\n <input type=\"text\" placeholder=\"用户名\" onChange={(e) => setUsername(e.target.value)} />\r\n <input type=\"password\" placeholder=\"密码\" onChange={(e) => setPassword(e.target.value)} />\r\n <button onClick={register}>注册</button>\r\n {/* 新增：显示消息 */}\r\n {message && <div>{message}</div>}\r\n </div>\n```;\n\n[snippet 66] (filepath: client\\src\\context\\AuthProvider.js):\n```\nAuthProvider;\n```;\n\n[snippet 67] (filepath: server\\schemas\\Currency.js):\n```\n// server\\schemas\\Currency.js\r\nconst mongoose = require(\"mongoose\");\r\n\r\nconst CurrencySchema = mongoose.Schema({\r\n name: {\r\n type: String,\r\n required: true\r\n },\r\n value: {\r\n type: Number,\r\n required: true\r\n }\r\n});\r\n\r\nmodule.exports = mongoose.model(\"Currency\", CurrencySchema);\n```;\n\n[snippet 68] (filepath: client\\src\\components\\Navbar.jsx):\n```\nimport React, {useContext} from 'react';\r\nimport {NavLink, useNavigate} from 'react-router-dom';\r\nimport AuthContext from \"../context/AuthContext\";\r\nimport '../styles/components/Navbar.css';\r\n\r\nexport default function Navbar() {\r\n const authContext = useContext(AuthContext);\r\n const navigate = useNavigate();\r\n\r\n const handleLogout = () => {\r\n sessionStorage.clear();\r\n authContext.logout();\r\n navigate('/login');\r\n };\r\n\r\n return (\r\n <header className=\"navbar\">\r\n <div className=\"navbar-logo\">\r\n <h1>BUFF</h1>\r\n </div>\r\n <nav className=\"navbar-menu\">\r\n <ul>\r\n <li>\r\n <NavLink to=\"/\" activeClassName=\"active-link\" className=\"navbar-link\" exact>\r\n Trades\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/offers\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Offers\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/create\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n Create\r\n </NavLink>\r\n </li>\r\n <li>\r\n <NavLink to=\"/blindbox\" activeClassName=\"active-link\" className=\"navbar-link\">\r\n 盲盒\r\n </NavLink>\r\n </li>\r\n \r\n </ul>\r\n </nav>\r\n <div className=\"navbar-login-logout\">\n```;\n\n[snippet 69] (filepath: client\\src\\utilities\\Utilities.js):\n```\nimport jwtDecode from \"jwt-decode\";\r\nimport {wearDictionary} from \"../objects/commonObjects\";\r\n\r\nexport function convertWear(wear) {\r\n return (wearDictionary[wear]);\r\n}\r\n\r\nexport function getUserId(auth_token) {\r\n const decoded = jwtDecode(auth_token);\r\n return decoded.user.id;\r\n}\r\n\r\nexport function renderOptions(options) {\r\n return options.map((option, index) => (\r\n <option key={index}>{option}</option>\r\n ));\r\n}\r\n\r\nexport function currentTime() {\r\n const now = new Date();\r\n const hours = now.getHours();\r\n const minutes = now.getMinutes();\r\n const timeFormat = `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;\r\n return timeFormat;\r\n}\n```;\n\n[snippet 70] (filepath: client\\src\\objects\\commonObjects.js):\n```\nexport const itemsData = {\r\n wears: ['Factory New', 'Minimal Wear', 'Field-Tested', 'Well-Worn', 'Battle-Scarred'],\r\n knives: [\r\n 'Bayonet', 'Bowie Knife', 'Butterfly Knife', 'Classic Knife',\r\n 'Falchion Knife', 'Flip Knife', 'Gut Knife', 'Huntsman Knife',\r\n 'Karambit', 'M9 Bayonet', 'Navaja Knife', 'Nomad Knife',\r\n 'Paracord Knife', 'Shadow Daggers', 'Skeleton Knife',\r\n 'Stiletto Knife', 'Survival Knife', 'Talon Knife', 'Ursus Knife'\r\n ],\r\n finishes: [\r\n \"Vanilla\", \"Safari Mesh\", \"Urban Masked\", \"Scorched\", \"Boreal Forest\", \"Stained\",\r\n \"Blue Steel\", \"Night\", \"Forest DDPAT\", \"Crimson Web\", \"Slaughter\", \"Fade\", \"Rust Coat\",\r\n \"Ultraviolet\", \"Damascus Steel\", \"Tiger Tooth\", \"Doppler (Phase 1)\", \"Doppler (Phase 2)\",\r\n \"Doppler (Phase 3)\", \"Doppler (Phase 4)\", \"Doppler (Ruby)\", \"Doppler (Sapphire)\",\r\n \"Doppler (Black Pearl)\", \"Marble Fade\", \"Freehand\", \"Bright Water\", \"Black Laminate\",\r\n \"Autotronic\", \"Lore\", \"Gamma Doppler (Phase 1)\", \"Gamma Doppler (Phase 2)\",\r\n \"Gamma Doppler (Phase 3)\", \"Gamma Doppler (Phase 4)\", \"Gamma Doppler (Emerald)\",\r\n \"Case Hardened\"\r\n ]\r\n};\r\n\r\nexport const wearDictionary = {\r\n 'Factory\n```;\n\n[snippet 71] (filepath: client\\src\\pages\\Index.jsx):\n```\nselectedCount={selectedCheckboxes.length}\r\n onCheckboxChange={handleCheckboxChange}/>\r\n </div>\r\n <div className=\"content\">\r\n <Trades data={filteredData}/>\r\n </div>\r\n <div className=\"right-sidebar\">\r\n <Activity data={offerData}/>\r\n </div>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 72] (filepath: client\\src\\AuthGuard.js):\n```\n// AuthGuard.js 示例\r\nimport React from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useContext } from 'react';\r\nimport AuthContext from './context/AuthContext'; // 确保导入正确的上下文\r\n\r\nexport function withAuth(Component) {\r\n console.log('withAuth')\r\n return (props) => {\r\n console.log('authguard检查')\r\n const navigate = useNavigate();\r\n const authContext = useContext(AuthContext); // 使用AuthContext\r\n\r\n if (!authContext.isAuthenticated) { // 判断是否登录\r\n console.log('未登录触发authguard')\r\n navigate('/login');\r\n return null;\r\n }\r\n\r\n return <Component {...props} />;\r\n };\r\n}\n```;\n\n[snippet 73] (filepath: client\\src\\components\\index\\Activity.jsx):\n```\nkey={index}>\r\n {\r\n (index !== array.length - 1) ?\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)}),`) :\r\n (` ${acceptedItem.knife} ${acceptedItem.finish} (${convertWear(acceptedItem.wear)})`)\r\n }\r\n </span>\r\n ))}\r\n </td>\r\n </tr>\r\n ))}\r\n </tbody>\r\n </table>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 74] (filepath: client\\src\\components\\offers\\Offer.jsx):\n```\nclassName=\"label\"><b>[W]</b>ant</span>\r\n <ul>\r\n {entry.trade.want.map((wantItem) => (\r\n <li key={wantItem._id}>{`${wantItem.knife} ${wantItem.finish} (${convertWear(wantItem.wear)})`}</li>\r\n ))}\r\n </ul>\r\n </div>\r\n </div>\r\n ))}\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 75] (filepath: server\\schemas\\BlindBox.js):\n```\nconst mongoose = require(\"mongoose\");\r\n\r\nconst BlindBoxlindBoxSchema = new mongoose.Schema({\r\n items: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Item' }],\r\n });\r\n\r\n module.exports = mongoose.model(\"BlindBox\", BlindBoxlindBoxSchema);\n```;\n\n[snippet 76] (filepath: client\\src\\components\\makeoffer\\MakeOfferForm.jsx):\n```\ntype=\"submit\" id=\"submitOfferBtn\">Make Offer</button>\r\n </form>\r\n </div>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 77] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)\r\n\r\n### Analyzing the Bundle Size\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)\r\n\r\n### Making a Progressive Web App\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)\r\n\r\n### Advanced Configuration\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)\r\n\r\n### Deployment\r\n\r\nThis section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)\r\n\r\n### `npm run build` fails to minify\r\n\r\nThis section has moved here:\n```;\n\n[snippet 78] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\ne.preventDefault();\r\n setWearText('');\r\n setKnifeText('');\r\n setFinishText('');\r\n onAddItem({\r\n wear: wearText,\r\n knife: knifeText,\r\n finish: finishText\r\n });\r\n }}>Add\r\n </button>\r\n </>\r\n );\r\n}\n```;\n\n[snippet 79] (filepath: client\\src\\objects\\commonObjects.js):\n```\nNew': 'FN',\r\n 'Minimal Wear': 'MW',\r\n 'Field-Tested': 'FT',\r\n 'Well-Worn': 'WW',\r\n 'Battle-Scarred': 'BS'\r\n};\n```;\n\n[snippet 80] (filepath: client\\src\\index.js):\n```\nimport React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root'));\r\nroot.render(\r\n <React.StrictMode>\r\n <App />\r\n </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\n```;\n\n[snippet 81] (filepath: client\\README.md):\n```\n`eject`, you can't go back!**\r\n\r\nIf you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.\r\n\r\nInstead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.\r\n\r\nYou don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.\r\n\r\n## Learn More\r\n\r\nYou can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).\r\n\r\nTo learn React, check out the [React documentation](https://reactjs.org/).\r\n\r\n### Code Splitting\r\n\r\nThis section has moved here:\n```;\n\n[snippet 82] (filepath: client\\README.md):\n```\n# Getting Started with Create React App\r\n\r\nThis project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).\r\n\r\n## Available Scripts\r\n\r\nIn the project directory, you can run:\r\n\r\n### `npm start`\r\n\r\nRuns the app in the development mode.\\\r\nOpen [http://localhost:3000](http://localhost:3000) to view it in your browser.\r\n\r\nThe page will reload when you make changes.\\\r\nYou may also see any lint errors in the console.\r\n\r\n### `npm test`\r\n\r\nLaunches the test runner in the interactive watch mode.\\\r\nSee the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.\r\n\r\n### `npm run build`\r\n\r\nBuilds the app for production to the `build` folder.\\\r\nIt correctly bundles React in production mode and optimizes the build for the best performance.\r\n\r\nThe build is minified and the filenames include the hashes.\\\r\nYour app is ready to be deployed!\r\n\r\nSee the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.\r\n\r\n### `npm run eject`\r\n\r\n**Note: this is a one-way operation. Once you\n```;\n\n[snippet 83] (filepath: client\\README.md):\n```\n[https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)\n```;\n\n[snippet 84] (filepath: client\\src\\components\\Register.js):\n```\n);\r\n};\r\n\r\nexport default Register;\n```;\n\n[snippet 85] (filepath: client\\src\\components\\create\\itemList\\ItemList.jsx):\n```\nimport React from 'react';\r\nimport {convertWear} from \"../../../utilities/Utilities\";\r\nimport '../../../styles/components/ItemList.css';\r\n\r\nexport default function ItemList({items, onDeleteItem}) {\r\n return (\r\n <ul className=\"item-list\">\r\n {items.map((item) => (\r\n <li key={item.id}>\r\n <Item item={item} onDelete={onDeleteItem}/>\r\n </li>\r\n ))}\r\n </ul>\r\n );\r\n}\r\n\r\nfunction Item({item, onDelete}) {\r\n let itemContent;\r\n\r\n itemContent = (\r\n <>\r\n {`${item.knife} ${item.finish} (${convertWear(item.wear)})`}\r\n </>\r\n );\r\n\r\n return (\r\n <label>\r\n {itemContent}\r\n <button className=\"delete-button\" onClick={() => onDelete(item.id)}>X</button>\r\n </label>\r\n );\r\n}\n```;\n\n[snippet 86] (filepath: client\\src\\components\\create\\Creation.jsx):\n```\n...</i></div>\r\n <ItemList items={wantItems}\r\n onDeleteItem={(itemId) => handleDeleteItemFromList(itemId, 'wantItems')}/>\r\n </fieldset>\r\n\r\n <button type=\"submit\" id=\"submitBtn\">Create</button>\r\n </form>\r\n </div>\r\n );\r\n}\r\n\r\nlet nextId = 0;\n```;\n\n[snippet 87] (filepath: client\\src\\pages\\Create.jsx):\n```\nimport React from 'react';\r\nimport Creation from \"../components/create/Creation\";\r\nimport {ToastContainer} from \"react-toastify\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nexport default function Create() {\r\n return (\r\n <div className=\"create\">\r\n <Creation/>\r\n <ToastContainer\r\n position=\"top-right\"\r\n toastStyle={{top: \"55px\", boxShadow: \"none\",\r\n border: \"1px solid #dcdcdd\", color:\"#6d6d6d\"}}\r\n hideProgressBar={true}\r\n autoClose={1500}/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 88] (filepath: client\\src\\reportWebVitals.js):\n```\nconst reportWebVitals = onPerfEntry => {\r\n if (onPerfEntry && onPerfEntry instanceof Function) {\r\n import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n getCLS(onPerfEntry);\r\n getFID(onPerfEntry);\r\n getFCP(onPerfEntry);\r\n getLCP(onPerfEntry);\r\n getTTFB(onPerfEntry);\r\n });\r\n }\r\n};\r\n\r\nexport default reportWebVitals;\n```;\n\n[snippet 89] (filepath: client\\src\\components\\login\\LoginForm.jsx):\n```\n<h2>Login</h2>\r\n <form onSubmit={handleSubmit}>\r\n <div className=\"login-elements\">\r\n <input type=\"text\" id=\"username\" name=\"username\" placeholder=\"Username\"/>\r\n <input type=\"password\" id=\"password\" name=\"password\" placeholder=\"Password\"/>\r\n <div className=\"error\" id=\"error-text\"></div>\r\n </div>\r\n <button className=\"login-button\">Log In</button>\r\n </form>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 90] (filepath: client\\src\\App.test.js):\n```\nimport { render, screen } from '@testing-library/react';\r\nimport App from './App';\r\n\r\ntest('renders learn react link', () => {\r\n render(<App />);\r\n const linkElement = screen.getByText(/learn react/i);\r\n expect(linkElement).toBeInTheDocument();\r\n});\n```;\n\n[snippet 91] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nhtmlFor={`item${index}`}>{item}</label>\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 92] (filepath: client\\src\\components\\create\\itemList\\AddItem.jsx):\n```\nimport React, {useState} from 'react';\r\nimport {itemsData} from \"../../../objects/commonObjects\";\r\nimport {renderOptions} from \"../../../utilities/Utilities\";\r\n\r\nexport default function AddItem({onAddItem}) {\r\n const [wearText, setWearText] = useState('');\r\n const [knifeText, setKnifeText] = useState('');\r\n const [finishText, setFinishText] = useState('');\r\n\r\n return (\r\n <>\r\n <label>\r\n Wear\r\n <input value={wearText} type=\"text\" list=\"wearOptions\"\r\n onChange={(e) => setWearText(e.target.value)}/>\r\n <datalist id=\"wearOptions\">{renderOptions(itemsData.wears)}</datalist>\r\n </label>\r\n <label>\r\n Knife\r\n <input value={knifeText} type=\"text\" list=\"knifeOptions\"\r\n onChange={(e) => setKnifeText(e.target.value)}/>\r\n <datalist id=\"knifeOptions\">{renderOptions(itemsData.knives)}</datalist>\r\n </label>\r\n <label>\r\n Finish\r\n <input value={finishText} type=\"text\" list=\"finishOptions\"\r\n onChange={(e) => setFinishText(e.target.value)}/>\r\n <datalist id=\"finishOptions\">{renderOptions(itemsData.finishes)}</datalist>\r\n </label>\r\n\r\n <button onClick={(e) => {\n```;\n\n[snippet 93] (filepath: client\\src\\pages\\Login.jsx):\n```\nimport React from 'react';\r\nimport LoginForm from \"../components/login/LoginForm\";\r\n\r\nexport default function Login() {\r\n return (\r\n <div className=\"login\">\r\n <LoginForm/>\r\n </div>\r\n );\r\n}\n```;\n\n[snippet 94] (filepath: client\\src\\setupTests.js):\n```\n// jest-dom adds custom jest matchers for asserting on DOM nodes.\r\n// allows you to do things like:\r\n// expect(element).toHaveTextContent(/react/i)\r\n// learn more: https://github.com/testing-library/jest-dom\r\nimport '@testing-library/jest-dom';\n```;\n\n[snippet 95] (filepath: client\\src\\components\\index\\Filter.jsx):\n```\nimport React, {useState, useEffect} from 'react';\r\nimport {itemsData} from \"../../objects/commonObjects\";\r\nimport '../../styles/components/Filter.css';\r\n\r\nexport default function Filter({selectedCount, onCheckboxChange}) {\r\n const [selectedItems, setSelectedItems] = useState([]);\r\n\r\n useEffect(() => {\r\n onCheckboxChange(selectedItems);\r\n }, [selectedItems, onCheckboxChange]);\r\n\r\n const handleCheckboxChange = (index) => {\r\n const selectedItem = itemsData.knives[index];\r\n setSelectedItems((prevSelectedItems) => {\r\n if (prevSelectedItems.includes(selectedItem)) {\r\n return prevSelectedItems.filter(item => item !== selectedItem);\r\n } else {\r\n return [...prevSelectedItems, selectedItem];\r\n }\r\n });\r\n };\r\n\r\n return (\r\n <div className=\"filter\">\r\n <header>\r\n {\r\n (selectedCount > 0) ?\r\n (<h2>Filter ({selectedCount}) </h2>) :\r\n (<h2>Filter </h2>)\r\n }\r\n </header>\r\n\r\n <ul>\r\n {itemsData.knives.map((item, index) => (\r\n <li key={index}>\r\n <input\r\n type=\"checkbox\"\r\n className=\"item-checkbox\"\r\n onChange={() => handleCheckboxChange(index)}\r\n />\r\n <label\n``````]","isSelected":false},{"type":"response","value":"<h4><b>repoKing</b>:</h4>\n对于游戏数据和服务器游戏数据之间的API接口设计，考虑到您需要与射击游戏（如CSGO）的服务器进行数据交互来实现交易功能，通常涉及以下几个方面：\n\n1. **用户身份验证**：确保与游戏服务器交互的是合法用户。\n   - API: `/api/authenticate`\n   - 方法: `POST`\n   - 参数: `{ \"userid\": \"\", \"token\": \"\" }`\n   - 功能: 验证用户身份并获取访问权限。\n\n2. **物品信息获取**：从游戏服务器获取特定物品的详细信息。\n   - API: `/api/items/{item_id}`\n   - 方法: `GET`\n   - 参数: `item_id`（物品的唯一标识）\n   - 功能: 获取指定物品的详细信息，如名称、稀有度、外观状态等。\n\n3. **用户库存查询**：查询用户在游戏中的物品库存。\n   - API: `/api/inventory/{user_id}`\n   - 方法: `GET`\n   - 参数: `user_id`（用户的唯一标识）\n   - 功能: 获取用户拥有的所有游戏物品列表。\n\n4. **交易提案创建**：向游戏服务器发送交易提案。\n   - API: `/api/trade/offer`\n   - 方法: `POST`\n   - 参数: `{ \"from_user\": \"\", \"to_user\": \"\", \"items_offered\": [], \"items_requested\": [] }`\n   - 功能: 创建一个新的交易提案，包括提供和请求的物品列表。\n\n5. **交易状态查询**：查询交易提案的当前状态。\n   - API: `/api/trade/status/{trade_id}`\n   - 方法: `GET`\n   - 参数: `trade_id`（交易提案的唯一标识）\n   - 功能: 获取特定交易提案的当前状态，例如是否被接受、拒绝或等待中。\n\n6. **交易执行**：执行已经被双方同意的交易。\n   - API: `/api/trade/execute/{trade_id}`\n   - 方法: `POST`\n   - 参数: `trade_id`\n   - 功能: 执行指定的交易，将物品从一个用户转移到另一个用户。\n\n请注意，这些API接口需与游戏官方的API接口兼容，具体参数和方法可能会有所不同。此外，为了保证安全性，所有的API调用都应该使用HTTPS协议，并在必要时采取额外的安全措施，如OAuth验证、API调用频率限制等。\n<sub>Tokens used: 66777 (P:65390+C:1387) - ¥4.98</sub>\n<sub>Today's total usage: ¥32.11999999999999</sub>","role":"assistant","text":"对于游戏数据和服务器游戏数据之间的API接口设计，考虑到您需要与射击游戏（如CSGO）的服务器进行数据交互来实现交易功能，通常涉及以下几个方面：\n\n1. **用户身份验证**：确保与游戏服务器交互的是合法用户。\n   - API: `/api/authenticate`\n   - 方法: `POST`\n   - 参数: `{ \"userid\": \"\", \"token\": \"\" }`\n   - 功能: 验证用户身份并获取访问权限。\n\n2. **物品信息获取**：从游戏服务器获取特定物品的详细信息。\n   - API: `/api/items/{item_id}`\n   - 方法: `GET`\n   - 参数: `item_id`（物品的唯一标识）\n   - 功能: 获取指定物品的详细信息，如名称、稀有度、外观状态等。\n\n3. **用户库存查询**：查询用户在游戏中的物品库存。\n   - API: `/api/inventory/{user_id}`\n   - 方法: `GET`\n   - 参数: `user_id`（用户的唯一标识）\n   - 功能: 获取用户拥有的所有游戏物品列表。\n\n4. **交易提案创建**：向游戏服务器发送交易提案。\n   - API: `/api/trade/offer`\n   - 方法: `POST`\n   - 参数: `{ \"from_user\": \"\", \"to_user\": \"\", \"items_offered\": [], \"items_requested\": [] }`\n   - 功能: 创建一个新的交易提案，包括提供和请求的物品列表。\n\n5. **交易状态查询**：查询交易提案的当前状态。\n   - API: `/api/trade/status/{trade_id}`\n   - 方法: `GET`\n   - 参数: `trade_id`（交易提案的唯一标识）\n   - 功能: 获取特定交易提案的当前状态，例如是否被接受、拒绝或等待中。\n\n6. **交易执行**：执行已经被双方同意的交易。\n   - API: `/api/trade/execute/{trade_id}`\n   - 方法: `POST`\n   - 参数: `trade_id`\n   - 功能: 执行指定的交易，将物品从一个用户转移到另一个用户。\n\n请注意，这些API接口需与游戏官方的API接口兼容，具体参数和方法可能会有所不同。此外，为了保证安全性，所有的API调用都应该使用HTTPS协议，并在必要时采取额外的安全措施，如OAuth验证、API调用频率限制等。\n<sub>Tokens used: 66777 (P:65390+C:1387) - ¥4.98</sub>\n<sub>Today's total usage: ¥32.11999999999999</sub>","isSelected":false}]